{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "2ff079c7-a244-4d5c-9bce-c2bfa150efcf",
   "metadata": {},
   "source": [
    "# Setup"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "f1f3849a-2907-4935-99b9-3eb415f7e9e1",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-09-22 04:19:39.002308: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 FMA\n",
      "To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.\n",
      "2024-09-22 04:19:39.229942: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libcudart.so.11.0'; dlerror: libcudart.so.11.0: cannot open shared object file: No such file or directory\n",
      "2024-09-22 04:19:39.229987: I tensorflow/stream_executor/cuda/cudart_stub.cc:29] Ignore above cudart dlerror if you do not have a GPU set up on your machine.\n",
      "2024-09-22 04:19:39.283627: E tensorflow/stream_executor/cuda/cuda_blas.cc:2981] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n",
      "2024-09-22 04:19:40.341087: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libnvinfer.so.7'; dlerror: libnvinfer.so.7: cannot open shared object file: No such file or directory\n",
      "2024-09-22 04:19:40.341314: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libnvinfer_plugin.so.7'; dlerror: libnvinfer_plugin.so.7: cannot open shared object file: No such file or directory\n",
      "2024-09-22 04:19:40.341332: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:38] TF-TRT Warning: Cannot dlopen some TensorRT libraries. If you would like to use Nvidia GPU with TensorRT, please make sure the missing libraries mentioned above are installed properly.\n"
     ]
    }
   ],
   "source": [
    "import sys\n",
    "assert sys.version_info >= (3,5)\n",
    "\n",
    "import sklearn\n",
    "assert sklearn.__version__ >= \"0.20\"\n",
    "\n",
    "try:\n",
    "    %tensorflow_version 2.x\n",
    "except Exception:\n",
    "    pass\n",
    "\n",
    "import tensorflow as tf\n",
    "from tensorflow import keras\n",
    "assert tf.__version__ >= \"2.0\"\n",
    "\n",
    "%load_ext tensorboard\n",
    "\n",
    "import numpy as np\n",
    "import os\n",
    "\n",
    "np.random.seed(100)\n",
    "\n",
    "%matplotlib inline\n",
    "import matplotlib as mpl\n",
    "import matplotlib.pyplot as plt\n",
    "mpl.rc('axes', labelsize=14)\n",
    "mpl.rc('xtick', labelsize=12)\n",
    "mpl.rc('ytick', labelsize=12)\n",
    "\n",
    "PROJECT_ROOT_DIR = \".\"\n",
    "CHAPTER_ID = \"deep\"\n",
    "IMAGES_PATH = os.path.join(PROJECT_ROOT_DIR, \"images\", CHAPTER_ID)\n",
    "os.makedirs(IMAGES_PATH, exist_ok=True)\n",
    "\n",
    "def save_fig(fig_id, tight_layout=True, fig_extension=\"png\", resolution=300):\n",
    "    path = os.path.join(IMAGES_PATH, fig_id + \".\" + fig_extension)\n",
    "    print(\"Saving figure\", fig_id)\n",
    "    if tight_layout:\n",
    "        plt.tight_layout()\n",
    "    plt.savefig(path, format=fig_extension, dpi=resolution)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fee72486-fbe9-4929-8522-bccce117e28f",
   "metadata": {},
   "source": [
    "# Vanishing/Exploding Gradients Problem"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "0d4b25d3-bb0e-4f98-b338-0ef383728e33",
   "metadata": {},
   "outputs": [],
   "source": [
    "def logit(z):\n",
    "    return 1 / (1 + np.exp(-z))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "b0663e60-9a58-459d-9e2b-5ee0983bdbee",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Saving figure sigmoid_saturation_plot\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "z = np.linspace(-5, 5, 200)\n",
    "\n",
    "plt.plot([-5, 5], [0, 0], 'k-')\n",
    "plt.plot([-5, 5], [1, 1], 'k--')\n",
    "plt.plot([0, 0], [-0.2, 1.2], 'k-')\n",
    "plt.plot([-5, 5], [-3/4, 7/4], 'g--')\n",
    "plt.plot(z, logit(z), \"b-\", linewidth=2)\n",
    "props = dict(facecolor='black', shrink=0.1)\n",
    "plt.annotate('Saturating', xytext=(3.5, 0.7), xy=(5, 1), arrowprops=props, fontsize=14, ha=\"center\")\n",
    "plt.annotate('Saturating', xytext=(-3.5, 0.3), xy=(-5, 0), arrowprops=props, fontsize=14, ha=\"center\")\n",
    "plt.annotate('Linear', xytext=(2, 2.0), xy=(0, 0.5), arrowprops=props, fontsize=14, ha=\"center\")\n",
    "plt.grid(True)\n",
    "plt.title(\"Sigmoid activation function\", fontsize=14)\n",
    "plt.axis([-5, 5, -0.2, 1.2])\n",
    "\n",
    "save_fig(\"sigmoid_saturation_plot\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "482859c7-ba0b-4b52-b35a-f1e09ee0b68e",
   "metadata": {},
   "source": [
    "## Xavier and He Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "0e93c37b-13b1-48bc-8021-75645939c5d4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Constant',\n",
       " 'GlorotNormal',\n",
       " 'GlorotUniform',\n",
       " 'HeNormal',\n",
       " 'HeUniform',\n",
       " 'Identity',\n",
       " 'Initializer',\n",
       " 'LecunNormal',\n",
       " 'LecunUniform',\n",
       " 'Ones',\n",
       " 'Orthogonal',\n",
       " 'RandomNormal',\n",
       " 'RandomUniform',\n",
       " 'TruncatedNormal',\n",
       " 'VarianceScaling',\n",
       " 'Zeros',\n",
       " 'constant',\n",
       " 'deserialize',\n",
       " 'get',\n",
       " 'glorot_normal',\n",
       " 'glorot_uniform',\n",
       " 'he_normal',\n",
       " 'he_uniform',\n",
       " 'identity',\n",
       " 'lecun_normal',\n",
       " 'lecun_uniform',\n",
       " 'ones',\n",
       " 'orthogonal',\n",
       " 'random_normal',\n",
       " 'random_uniform',\n",
       " 'serialize',\n",
       " 'truncated_normal',\n",
       " 'variance_scaling',\n",
       " 'zeros']"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "[name for name in dir(keras.initializers) if not name.startswith(\"_\")]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "1f65bfc4-5409-47b0-be6e-67dac41d3349",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<keras.layers.core.dense.Dense at 0x7f6bafe25c60>"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "keras.layers.Dense(10, activation=\"relu\", kernel_initializer=\"he_normal\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "5ac31e3f-f7a9-4d2c-87f0-532188e54ab8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<keras.layers.core.dense.Dense at 0x7f6bafe26a40>"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "init = keras.initializers.VarianceScaling(scale=2., mode='fan_avg',\n",
    "                                          distribution='uniform')\n",
    "keras.layers.Dense(10, activation=\"relu\", kernel_initializer=init)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "62b370b5-13d6-49fa-97e0-c85f40f0178a",
   "metadata": {},
   "source": [
    "## Nonsaturating Activation Functions"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "325f184c-b138-48d1-91f3-8fb4da2970fe",
   "metadata": {},
   "source": [
    "### Leaky ReLU"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "2cafdf14-dc97-4d0d-b742-cf839388e486",
   "metadata": {},
   "outputs": [],
   "source": [
    "def leaky_relu(z, alpha=0.01):\n",
    "    return np.maximum(alpha*z, z)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "ab1c5b7b-38ae-4844-8927-c4d2c39d062e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Saving figure leaky_relu_plot\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(z, leaky_relu(z, 0.05), \"b-\", linewidth=2)\n",
    "plt.plot([-5, 5], [0, 0], 'k-')\n",
    "plt.plot([0, 0], [-0.5, 4.2], 'k-')\n",
    "plt.grid(True)\n",
    "props = dict(facecolor='black', shrink=0.1)\n",
    "plt.annotate('Leak', xytext=(-3.5, 0.5), xy=(-5, -0.2), arrowprops=props, fontsize=14, ha=\"center\")\n",
    "plt.title(\"Leaky ReLU activation function\", fontsize=14)\n",
    "plt.axis([-5, 5, -0.5, 4.2])\n",
    "\n",
    "save_fig(\"leaky_relu_plot\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "ac3c94e7-d802-4c64-8d5e-19acfe089be9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['deserialize',\n",
       " 'elu',\n",
       " 'exponential',\n",
       " 'gelu',\n",
       " 'get',\n",
       " 'hard_sigmoid',\n",
       " 'linear',\n",
       " 'relu',\n",
       " 'selu',\n",
       " 'serialize',\n",
       " 'sigmoid',\n",
       " 'softmax',\n",
       " 'softplus',\n",
       " 'softsign',\n",
       " 'swish',\n",
       " 'tanh']"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "[m for m in dir(keras.activations) if not m.startswith(\"_\")]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "8432ae3b-62c3-4ec8-a363-d6571c1a4491",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['LeakyReLU', 'PReLU', 'ReLU', 'ThresholdedReLU']"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "[m for m in dir(keras.layers) if \"relu\" in m.lower()]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cc79986a-b7b0-48dc-b578-631312d0bc3a",
   "metadata": {},
   "source": [
    "Let's train a neural network on Fashion MNIST using the Leaky ReLU:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "e1d3eb19-747b-4ddf-bff6-f7d3d7d6707e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/train-labels-idx1-ubyte.gz\n",
      "29515/29515 [==============================] - 0s 0us/step\n",
      "Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/train-images-idx3-ubyte.gz\n",
      "26421880/26421880 [==============================] - 1s 0us/step\n",
      "Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/t10k-labels-idx1-ubyte.gz\n",
      "5148/5148 [==============================] - 0s 0us/step\n",
      "Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/t10k-images-idx3-ubyte.gz\n",
      "4422102/4422102 [==============================] - 0s 0us/step\n"
     ]
    }
   ],
   "source": [
    "(X_train_full, y_train_full), (X_test, y_test) = keras.datasets.fashion_mnist.load_data()\n",
    "X_train_full = X_train_full / 255.0\n",
    "X_test = X_test / 255.0\n",
    "X_valid, X_train = X_train_full[:5000], X_train_full[5000:]\n",
    "y_valid, y_train = y_train_full[:5000], y_train_full[5000:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "39f97d13-b963-4a7b-8be3-b23f6cd30507",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-09-22 04:19:47.445984: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libcuda.so.1'; dlerror: libcuda.so.1: cannot open shared object file: No such file or directory\n",
      "2024-09-22 04:19:47.446066: W tensorflow/stream_executor/cuda/cuda_driver.cc:263] failed call to cuInit: UNKNOWN ERROR (303)\n",
      "2024-09-22 04:19:47.446105: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:156] kernel driver does not appear to be running on this host (jupyter_machrafal): /proc/driver/nvidia/version does not exist\n",
      "2024-09-22 04:19:47.446884: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 FMA\n",
      "To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.\n"
     ]
    }
   ],
   "source": [
    "tf.random.set_seed(100)\n",
    "np.random.seed(100)\n",
    "\n",
    "model = keras.models.Sequential([\n",
    "    keras.layers.Flatten(input_shape=[28, 28]),\n",
    "    keras.layers.Dense(300, kernel_initializer=\"he_normal\"),\n",
    "    keras.layers.LeakyReLU(),\n",
    "    keras.layers.Dense(100, kernel_initializer=\"he_normal\"),\n",
    "    keras.layers.LeakyReLU(),\n",
    "    keras.layers.Dense(10, activation=\"softmax\")\n",
    "])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "4d408b1f-fc32-4352-b5bc-10388996eb7e",
   "metadata": {},
   "outputs": [],
   "source": [
    "model.compile(loss=\"sparse_categorical_crossentropy\",\n",
    "              optimizer=keras.optimizers.SGD(learning_rate=1e-3),\n",
    "              metrics=[\"accuracy\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "a2c5103a-4ae3-49e8-bb55-732c83dc35aa",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/10\n",
      "1719/1719 [==============================] - 7s 4ms/step - loss: 1.3131 - accuracy: 0.6039 - val_loss: 0.8851 - val_accuracy: 0.7192\n",
      "Epoch 2/10\n",
      "1719/1719 [==============================] - 8s 4ms/step - loss: 0.7951 - accuracy: 0.7457 - val_loss: 0.7125 - val_accuracy: 0.7694\n",
      "Epoch 3/10\n",
      "1719/1719 [==============================] - 9s 5ms/step - loss: 0.6823 - accuracy: 0.7770 - val_loss: 0.6392 - val_accuracy: 0.7922\n",
      "Epoch 4/10\n",
      "1719/1719 [==============================] - 8s 5ms/step - loss: 0.6240 - accuracy: 0.7932 - val_loss: 0.5947 - val_accuracy: 0.8044\n",
      "Epoch 5/10\n",
      "1719/1719 [==============================] - 7s 4ms/step - loss: 0.5863 - accuracy: 0.8046 - val_loss: 0.5696 - val_accuracy: 0.8096\n",
      "Epoch 6/10\n",
      "1719/1719 [==============================] - 7s 4ms/step - loss: 0.5591 - accuracy: 0.8128 - val_loss: 0.5443 - val_accuracy: 0.8194\n",
      "Epoch 7/10\n",
      "1719/1719 [==============================] - 8s 4ms/step - loss: 0.5388 - accuracy: 0.8174 - val_loss: 0.5229 - val_accuracy: 0.8254\n",
      "Epoch 8/10\n",
      "1719/1719 [==============================] - 8s 4ms/step - loss: 0.5227 - accuracy: 0.8229 - val_loss: 0.5079 - val_accuracy: 0.8328\n",
      "Epoch 9/10\n",
      "1719/1719 [==============================] - 7s 4ms/step - loss: 0.5100 - accuracy: 0.8253 - val_loss: 0.4972 - val_accuracy: 0.8338\n",
      "Epoch 10/10\n",
      "1719/1719 [==============================] - 8s 5ms/step - loss: 0.4992 - accuracy: 0.8287 - val_loss: 0.4906 - val_accuracy: 0.8378\n"
     ]
    }
   ],
   "source": [
    "history = model.fit(X_train, y_train, epochs=10,\n",
    "                    validation_data=(X_valid, y_valid))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b45b2542-4c08-46fc-9de0-3f996afd1bb0",
   "metadata": {},
   "source": [
    "Now let's try PReLU:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "aa870093-451d-434e-b790-b11e7162f899",
   "metadata": {},
   "outputs": [],
   "source": [
    "tf.random.set_seed(100)\n",
    "np.random.seed(100)\n",
    "\n",
    "model = keras.models.Sequential([\n",
    "    keras.layers.Flatten(input_shape=[28, 28]),\n",
    "    keras.layers.Dense(300, kernel_initializer=\"he_normal\"),\n",
    "    keras.layers.PReLU(),\n",
    "    keras.layers.Dense(100, kernel_initializer=\"he_normal\"),\n",
    "    keras.layers.PReLU(),\n",
    "    keras.layers.Dense(10, activation=\"softmax\")\n",
    "])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "6c405a2c-7f04-4d30-80af-83c418c2f548",
   "metadata": {},
   "outputs": [],
   "source": [
    "model.compile(loss=\"sparse_categorical_crossentropy\",\n",
    "              optimizer=keras.optimizers.SGD(learning_rate=1e-3),\n",
    "              metrics=[\"accuracy\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "b5cd251e-aff3-4e9e-b3d9-247ddc9f64c5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/10\n",
      "1719/1719 [==============================] - 9s 5ms/step - loss: 1.2965 - accuracy: 0.6057 - val_loss: 0.8871 - val_accuracy: 0.7244\n",
      "Epoch 2/10\n",
      "1719/1719 [==============================] - 8s 5ms/step - loss: 0.7960 - accuracy: 0.7431 - val_loss: 0.7098 - val_accuracy: 0.7746\n",
      "Epoch 3/10\n",
      "1719/1719 [==============================] - 7s 4ms/step - loss: 0.6799 - accuracy: 0.7770 - val_loss: 0.6324 - val_accuracy: 0.7966\n",
      "Epoch 4/10\n",
      "1719/1719 [==============================] - 7s 4ms/step - loss: 0.6194 - accuracy: 0.7959 - val_loss: 0.5855 - val_accuracy: 0.8120\n",
      "Epoch 5/10\n",
      "1719/1719 [==============================] - 7s 4ms/step - loss: 0.5806 - accuracy: 0.8079 - val_loss: 0.5607 - val_accuracy: 0.8184\n",
      "Epoch 6/10\n",
      "1719/1719 [==============================] - 7s 4ms/step - loss: 0.5527 - accuracy: 0.8168 - val_loss: 0.5347 - val_accuracy: 0.8250\n",
      "Epoch 7/10\n",
      "1719/1719 [==============================] - 7s 4ms/step - loss: 0.5317 - accuracy: 0.8223 - val_loss: 0.5106 - val_accuracy: 0.8338\n",
      "Epoch 8/10\n",
      "1719/1719 [==============================] - 8s 5ms/step - loss: 0.5149 - accuracy: 0.8269 - val_loss: 0.4953 - val_accuracy: 0.8372\n",
      "Epoch 9/10\n",
      "1719/1719 [==============================] - 8s 4ms/step - loss: 0.5015 - accuracy: 0.8305 - val_loss: 0.4839 - val_accuracy: 0.8390\n",
      "Epoch 10/10\n",
      "1719/1719 [==============================] - 8s 4ms/step - loss: 0.4901 - accuracy: 0.8337 - val_loss: 0.4767 - val_accuracy: 0.8424\n"
     ]
    }
   ],
   "source": [
    "history = model.fit(X_train, y_train, epochs=10,\n",
    "                    validation_data=(X_valid, y_valid))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e9ac50c7-78c4-4dba-a404-5ab2d8159bcf",
   "metadata": {},
   "source": [
    "### ELU"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "74af4f98-2086-4562-b6cc-d522e130ce72",
   "metadata": {},
   "outputs": [],
   "source": [
    "def elu(z, alpha=1):\n",
    "    return np.where(z < 0, alpha * (np.exp(z) - 1), z)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "21c95a21-66c8-4a81-b03c-02947137e1cd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Saving figure elu_plot\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(z, elu(z), \"b-\", linewidth=2)\n",
    "plt.plot([-5, 5], [0, 0], 'k-')\n",
    "plt.plot([-5, 5], [-1, -1], 'k--')\n",
    "plt.plot([0, 0], [-2.2, 3.2], 'k-')\n",
    "plt.grid(True)\n",
    "plt.title(r\"ELU activation function ($\\alpha=1$)\", fontsize=14)\n",
    "plt.axis([-5, 5, -2.2, 3.2])\n",
    "\n",
    "save_fig(\"elu_plot\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fce62610-1e4b-460b-8dd3-e0570d1bee25",
   "metadata": {},
   "source": [
    "Implementing ELU in TensorFlow is trivial, just specify the activation function when building each layer:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "a35a7897-dc67-4a2b-b105-9ec3f5e68bd8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<keras.layers.core.dense.Dense at 0x7f6b90122e60>"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "keras.layers.Dense(10, activation=\"elu\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "427df9ad-4b1c-45db-932c-33a931209cf2",
   "metadata": {},
   "source": [
    "### SELU"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3d9cbb61-624b-4432-8144-2e88c6f4b496",
   "metadata": {},
   "source": [
    "This activation function was proposed in this [great paper](https://arxiv.org/pdf/1706.02515.pdf) by Günter Klambauer, Thomas Unterthiner and Andreas Mayr, published in June 2017. During training, a neural network composed exclusively of a stack of dense layers using the SELU activation function and LeCun initialization will self-normalize: the output of each layer will tend to preserve the same mean and variance during training, which solves the vanishing/exploding gradients problem. As a result, this activation function outperforms the other activation functions very significantly for such neural nets, so you should really try it out. Unfortunately, the self-normalizing property of the SELU activation function is easily broken: you cannot use ℓ<sub>1</sub> or ℓ<sub>2</sub> regularization, regular dropout, max-norm, skip connections or other non-sequential topologies (so recurrent neural networks won't self-normalize). However, in practice it works quite well with sequential CNNs. If you break self-normalization, SELU will not necessarily outperform other activation functions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "910642b3-0957-43b4-befb-ea8f7415d834",
   "metadata": {},
   "outputs": [],
   "source": [
    "from scipy.special import erfc\n",
    "\n",
    "# alpha and scale to self normalize with mean 0 and standard deviation 1\n",
    "# (see equation 14 in the paper):\n",
    "alpha_0_1 = -np.sqrt(2 / np.pi) / (erfc(1/np.sqrt(2)) * np.exp(1/2) - 1)\n",
    "scale_0_1 = (1 - erfc(1 / np.sqrt(2)) * np.sqrt(np.e)) * np.sqrt(2 * np.pi) * (2 * erfc(np.sqrt(2))*np.e**2 + np.pi*erfc(1/np.sqrt(2))**2*np.e - 2*(2+np.pi)*erfc(1/np.sqrt(2))*np.sqrt(np.e)+np.pi+2)**(-1/2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "f012d541-4fce-43b5-b427-a9cf83b7b541",
   "metadata": {},
   "outputs": [],
   "source": [
    "def selu(z, scale=scale_0_1, alpha=alpha_0_1):\n",
    "    return scale * elu(z, alpha)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5d14f5c1-20da-4428-a4db-ea31379f10fa",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Saving figure selu_plot\n"
     ]
    },
    {
     "data": {
      "image/png": "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CQmWJCshISF32S+//GJJsiRZU6dOLTD+4YcftiQV+jfZqlUrS5I1b968Qs+xb9++Qo89fPjwIl9DUfUkJiZaUVFRVkhIiPX999/nLs/KyrIGDhxoSbKmTJlS4HFy6r/11lutrKys3OWvvPKKJcm6+eabi3x+wJexKxaoBFdffbVmzJghy7I0Y8YMde/eXbGxsTrzzDM1duxY7dq1q9jfnTFjhiZPnlzoNnXqVA++gpLl7ErLr06dOurbt6927dqlvXv35i5/6aWXlJ2drccff7zQFhmXy6W4uLhy1ZKzNW7x4sUFln/00Uf6/fffNWjQIAUGBpZYe1BQkMaMGaOsrKwSdyeXxmeffaaff/5ZV155pbp3717gvkcffVQxMTFaunSpMjIyCv3urFmzVKVKldz+ZZddpvj4eH311Vflqqk8GjRooAkTJhRYduONN0pSgbo2b96sr7/+Wh07dtRNN91U6HHq1q1brjpWrlypxMREjRw5Ui1atMhdHhAQoKefflpBQUFF7rqtWrWqpk2bpoCAvK+74cOHKygoyNa/K1BZCHZAJbn77rt14MABrVixQnfeeac6dOigX3/9Vc8//7xatGihd955p8jfO3jwoCzLKnQ7duyYZ19ACXbv3q2bbrpJjRo1UmhoaO4xUs8995wkcwB/js2bN0vSSXclnqrLLrtMderU0bJly5SZmZm7PCfo5d8NK5kzlidOnKjzzjtP1apVy629b9++hWo/Fd99950kFTlFSs7xfGlpadqxY0eB+6Kjo4sMnXXr1rV13Z9//vkFQpGUF9Ly11XZ67mkv+sZZ5yhhg0bavfu3Tp+/HiB+5o0aVLoLPOgoCDVqlXLq95TQEXhGDugEkVERKh///7q37+/JCkxMVEPPvigXnjhBd14443av39/gS00lSHnSzk7O7vYMTn3/fMLvCg//fSTWrduraSkJHXp0kW9evVSZGSkAgICtH79en3yyScFzvhNTEyUy+WqtKkrAgMDNWTIEM2YMUMffvihevbsqeTkZP373//WOeecowsvvDB3bEZGhjp37qxvv/1WF1xwgYYNG6YaNWooKChIe/bs0YIFC4o9W7m0kpKSJKnAsWf55fwdcsblKO4s0KCgoBLXXWWLjIwstCwoyHx1ZGVl5S5LTEyUJJ1++umVUkdp/q47d+5UUlKSIiIicpcXVb9kXkP++gGnINgBHhQVFaW5c+fqvffe0969e/Xf//5XLVu2rPTnlKSjR4+qYcOGRY45cuRIgbElmTVrlv766y8tWrRIQ4cOLXDfmDFj9MknnxRYFh0dLcuydPDgwUr70h82bJhmzJihxYsXq2fPnnrzzTeVmppaaGvdypUr9e233+rGG2/UK6+8UuC+ZcuWacGCBeWuJSdI/P7770Xef+jQoQLjPCUntOffqpkjJ5SVR85JLvv37y/3YxXFW/+ugLdhVyzgYS6XS1WrVvXY8zVv3lxS3hQs/3T06FHt2rVLZ5xxRqmCXc4VM/555qtlWfrss88KjW/durUkc8zbyeQcC1fWLSnnnXeemjdvrpUrV+r48eNavHhxoWlOSqpdkjZu3FjkYwcEBJSpngsuuECSipxOIyUlRV9//bXCwsJ01llnlfoxK0L16tUlFR28cnZzlkdlr+eS/q779u3Tzz//rIYNGxbYWgf4I4IdUAleeumlYg/M/ve//61t27YpOjraI1MtXHfddQoICND06dP122+/FbgvOztbEyZMUGZmpq6//vpSPV58fLwk5c4/l2Pq1KnaunVrofFjxoxRYGCgHn744QInVUgmDOY/pi0mJkaS+aIuq2HDhunEiRN69tlntXbtWnXq1En16tUrVe2ffPKJXn755SIfNyYmptDfrSTt27dXo0aN9J///Ecff/xxgfsef/xxHT16VIMHD670XfD/dNFFF0kyV+/Iv2t306ZNWrJkSYU8/kUXXaQNGzYU+bfMHyirV68ul8tVpvV8zTXXKCoqSgkJCfrxxx9zl1uWpfvuu0+ZmZlcogwQu2KBSvGf//xHY8aM0Zlnnqn27dsrLi5OKSkp+u6777Rx40YFBATohRdeUEhISKHffeaZZ4q9pNgVV1yhtm3bFlj24osv6oMPPihy/KhRo9ShQwc988wzGj9+vM455xxdc801io+PV1JSklavXq3t27erXbt2evDBB0v12saMGaOEhAT17dtXAwYMUI0aNfTFF1/o22+/Vc+ePfXee+8VGN+8eXPNnj1bd9xxh84991z17t1b8fHxOnTokDZs2KCePXtq9uzZkvImJn7wwQf1448/KioqStHR0Ro7duxJ6xoyZIjuv/9+TZ48WdnZ2YV2w0pSr169VL9+fT399NPaunWrmjVrph07dmjVqlXq06dPkZMBX3rppVqx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\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(z, selu(z), \"b-\", linewidth=2)\n",
    "plt.plot([-5, 5], [0, 0], 'k-')\n",
    "plt.plot([-5, 5], [-1.758, -1.758], 'k--')\n",
    "plt.plot([0, 0], [-2.2, 3.2], 'k-')\n",
    "plt.grid(True)\n",
    "plt.title(\"SELU activation function\", fontsize=14)\n",
    "plt.axis([-5, 5, -2.2, 3.2])\n",
    "\n",
    "save_fig(\"selu_plot\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8546283d-16af-479f-bf64-bfe193a48079",
   "metadata": {},
   "source": [
    "By default, the SELU hyperparameters (`scale` and `alpha`) are tuned in such a way that the mean output of each neuron remains close to 0, and the standard deviation remains close to 1 (assuming the inputs are standardized with mean 0 and standard deviation 1 too). Using this activation function, even a 1,000 layer deep neural network preserves roughly mean 0 and standard deviation 1 across all layers, avoiding the exploding/vanishing gradients problem:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "58e8a1a3-8654-4f19-9264-1fb36cfbd29f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Layer 0: mean 0.01, std deviation 0.99\n",
      "Layer 100: mean 0.05, std deviation 0.87\n",
      "Layer 200: mean 0.00, std deviation 0.93\n",
      "Layer 300: mean 0.02, std deviation 0.90\n",
      "Layer 400: mean -0.04, std deviation 0.92\n",
      "Layer 500: mean 0.01, std deviation 0.99\n",
      "Layer 600: mean -0.03, std deviation 0.90\n",
      "Layer 700: mean 0.04, std deviation 0.97\n",
      "Layer 800: mean 0.02, std deviation 0.92\n",
      "Layer 900: mean 0.02, std deviation 0.95\n"
     ]
    }
   ],
   "source": [
    "np.random.seed(100)\n",
    "Z = np.random.normal(size=(500, 100))\n",
    "for layer in range(1000):\n",
    "    W = np.random.normal(size=(100, 100), scale=np.sqrt(1/100))\n",
    "    Z = selu(np.dot(Z, W))\n",
    "    means = np.mean(Z, axis=0).mean()\n",
    "    stds = np.std(Z, axis=0).mean()\n",
    "    if layer % 100 == 0:\n",
    "        print(\"Layer {}: mean {:.2f}, std deviation {:.2f}\".format(layer, means, stds))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8c0f7cf8-056d-4561-9b03-1b2304f22f72",
   "metadata": {},
   "source": [
    "Using SELU is easy:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9a53b05a-232c-43f1-a5e9-f69bf99a2d71",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<keras.layers.core.dense.Dense at 0x7f6b78e36fe0>"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "keras.layers.Dense(10, activation=\"selu\",\n",
    "                   kernel_initializer=\"lecun_normal\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e3a99f45-00d3-40e6-be1d-cdfb90f65cf2",
   "metadata": {},
   "source": [
    "Let's create a neural net for Fashion MNIST with 100 hidden layers, using the SELU activation function:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "6116b47b-cd29-40ed-a6d9-d4a12ad92cca",
   "metadata": {},
   "outputs": [],
   "source": [
    "np.random.seed(100)\n",
    "tf.random.set_seed(100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "56802108-c2ef-48d6-99a0-26ff56f3a31a",
   "metadata": {},
   "outputs": [],
   "source": [
    "model = keras.models.Sequential()\n",
    "model.add(keras.layers.Flatten(input_shape=[28, 28]))\n",
    "model.add(keras.layers.Dense(300, activation=\"selu\",\n",
    "                             kernel_initializer=\"lecun_normal\"))\n",
    "for layer in range(99):\n",
    "    model.add(keras.layers.Dense(100, activation=\"selu\",\n",
    "                                 kernel_initializer=\"lecun_normal\"))\n",
    "model.add(keras.layers.Dense(10, activation=\"softmax\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "118b63a6-5611-481e-8b9e-36209c6b995f",
   "metadata": {},
   "outputs": [],
   "source": [
    "model.compile(loss=\"sparse_categorical_crossentropy\",\n",
    "              optimizer=keras.optimizers.SGD(learning_rate=1e-3),\n",
    "              metrics=[\"accuracy\"])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "241cb861-865f-4c11-8cb8-25340f28c192",
   "metadata": {},
   "source": [
    "Now let's train it. Do not forget to scale the inputs to mean 0 and standard deviation 1:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "54a2cf66-2219-4b19-aec9-33964c1e4758",
   "metadata": {},
   "outputs": [],
   "source": [
    "pixel_means = X_train.mean(axis=0, keepdims=True)\n",
    "pixel_stds = X_train.std(axis=0, keepdims=True)\n",
    "X_train_scaled = (X_train - pixel_means) / pixel_stds\n",
    "X_valid_scaled = (X_valid - pixel_means) / pixel_stds\n",
    "X_test_scaled = (X_test - pixel_means) / pixel_stds"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "6d1b7258-4da0-4802-9dee-46c34ff62acd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/5\n",
      "1719/1719 [==============================] - 36s 19ms/step - loss: 0.9411 - accuracy: 0.6419 - val_loss: 0.6796 - val_accuracy: 0.7638\n",
      "Epoch 2/5\n",
      "1719/1719 [==============================] - 29s 17ms/step - loss: 0.6139 - accuracy: 0.7782 - val_loss: 0.5497 - val_accuracy: 0.8082\n",
      "Epoch 3/5\n",
      "1719/1719 [==============================] - 31s 18ms/step - loss: 0.5330 - accuracy: 0.8156 - val_loss: 0.4968 - val_accuracy: 0.8318\n",
      "Epoch 4/5\n",
      "1719/1719 [==============================] - 30s 17ms/step - loss: 0.4742 - accuracy: 0.8352 - val_loss: 0.4700 - val_accuracy: 0.8306\n",
      "Epoch 5/5\n",
      "1719/1719 [==============================] - 34s 20ms/step - loss: 0.4431 - accuracy: 0.8454 - val_loss: 0.4886 - val_accuracy: 0.8316\n"
     ]
    }
   ],
   "source": [
    "history = model.fit(X_train_scaled, y_train, epochs=5,\n",
    "                    validation_data=(X_valid_scaled, y_valid))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3063f32c-dd68-4269-b20d-c09e10925f53",
   "metadata": {},
   "source": [
    "Now look at what happens if we try to use the ReLU activation function instead:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "a6f4fd0b-0fab-4af0-9a4f-4795234121d8",
   "metadata": {},
   "outputs": [],
   "source": [
    "np.random.seed(100)\n",
    "tf.random.set_seed(100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "335797af-262a-45e2-b539-c4bf5b5679b9",
   "metadata": {},
   "outputs": [],
   "source": [
    "model = keras.models.Sequential()\n",
    "model.add(keras.layers.Flatten(input_shape=[28, 28]))\n",
    "model.add(keras.layers.Dense(300, activation=\"relu\", kernel_initializer=\"he_normal\"))\n",
    "for layer in range(99):\n",
    "    model.add(keras.layers.Dense(100, activation=\"relu\", kernel_initializer=\"he_normal\"))\n",
    "model.add(keras.layers.Dense(10, activation=\"softmax\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "9c4b3617-7421-4fdb-a16a-a94b98e85732",
   "metadata": {},
   "outputs": [],
   "source": [
    "model.compile(loss=\"sparse_categorical_crossentropy\",\n",
    "              optimizer=keras.optimizers.SGD(learning_rate=1e-3),\n",
    "              metrics=[\"accuracy\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "4bff39b3-396b-4b7f-bb6e-799f1d3317d8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/5\n",
      "1719/1719 [==============================] - 33s 16ms/step - loss: 1.9570 - accuracy: 0.2455 - val_loss: 1.7010 - val_accuracy: 0.3652\n",
      "Epoch 2/5\n",
      "1719/1719 [==============================] - 29s 17ms/step - loss: 1.4969 - accuracy: 0.3869 - val_loss: 1.2032 - val_accuracy: 0.5068\n",
      "Epoch 3/5\n",
      "1719/1719 [==============================] - 27s 16ms/step - loss: 1.1349 - accuracy: 0.5151 - val_loss: 0.8786 - val_accuracy: 0.6522\n",
      "Epoch 4/5\n",
      "1719/1719 [==============================] - 29s 17ms/step - loss: 0.8631 - accuracy: 0.6457 - val_loss: 0.8412 - val_accuracy: 0.6610\n",
      "Epoch 5/5\n",
      "1719/1719 [==============================] - 27s 16ms/step - loss: 0.8386 - accuracy: 0.6592 - val_loss: 0.7564 - val_accuracy: 0.6984\n"
     ]
    }
   ],
   "source": [
    "history = model.fit(X_train_scaled, y_train, epochs=5,\n",
    "                    validation_data=(X_valid_scaled, y_valid))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7ce14c9c-1350-42d5-862e-645268a1a1ed",
   "metadata": {},
   "source": [
    "Not great at all, we suffered from the vanishing/exploding gradients problem."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bbe28efb-b507-4722-9e95-98774b1bbc74",
   "metadata": {},
   "source": [
    "# Batch Normalization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "34d370e9-0d3b-4ed7-8976-79adb01f815a",
   "metadata": {},
   "outputs": [],
   "source": [
    "model = keras.models.Sequential([\n",
    "    keras.layers.Flatten(input_shape=[28, 28]),\n",
    "    keras.layers.BatchNormalization(),\n",
    "    keras.layers.Dense(300, activation=\"relu\"),\n",
    "    keras.layers.BatchNormalization(),\n",
    "    keras.layers.Dense(100, activation=\"relu\"),\n",
    "    keras.layers.BatchNormalization(),\n",
    "    keras.layers.Dense(10, activation=\"softmax\")\n",
    "])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "22572672-4590-4d46-bc84-72132de0e52b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential_4\"\n",
      "_________________________________________________________________\n",
      " Layer (type)                Output Shape              Param #   \n",
      "=================================================================\n",
      " flatten_4 (Flatten)         (None, 784)               0         \n",
      "                                                                 \n",
      " batch_normalization (BatchN  (None, 784)              3136      \n",
      " ormalization)                                                   \n",
      "                                                                 \n",
      " dense_212 (Dense)           (None, 300)               235500    \n",
      "                                                                 \n",
      " batch_normalization_1 (Batc  (None, 300)              1200      \n",
      " hNormalization)                                                 \n",
      "                                                                 \n",
      " dense_213 (Dense)           (None, 100)               30100     \n",
      "                                                                 \n",
      " batch_normalization_2 (Batc  (None, 100)              400       \n",
      " hNormalization)                                                 \n",
      "                                                                 \n",
      " dense_214 (Dense)           (None, 10)                1010      \n",
      "                                                                 \n",
      "=================================================================\n",
      "Total params: 271,346\n",
      "Trainable params: 268,978\n",
      "Non-trainable params: 2,368\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "8af7a5fc-b81a-4ea3-b054-78ee165cb589",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('batch_normalization/gamma:0', True),\n",
       " ('batch_normalization/beta:0', True),\n",
       " ('batch_normalization/moving_mean:0', False),\n",
       " ('batch_normalization/moving_variance:0', False)]"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bn1 = model.layers[1]\n",
    "[(var.name, var.trainable) for var in bn1.variables]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "d8f3eafd-8402-4b34-92b8-a2d8f7d31e13",
   "metadata": {},
   "outputs": [],
   "source": [
    "#bn1.updates #deprecated"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "4459ea8d-d431-467c-9074-a9cdfe8f5a8c",
   "metadata": {},
   "outputs": [],
   "source": [
    "model.compile(loss=\"sparse_categorical_crossentropy\",\n",
    "              optimizer=keras.optimizers.SGD(learning_rate=1e-3),\n",
    "              metrics=[\"accuracy\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "7b854ae8-43dc-4a22-b82c-dcd7fa28c282",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/10\n",
      "1719/1719 [==============================] - 12s 6ms/step - loss: 0.8513 - accuracy: 0.7123 - val_loss: 0.5537 - val_accuracy: 0.8148\n",
      "Epoch 2/10\n",
      "1719/1719 [==============================] - 20s 12ms/step - loss: 0.5775 - accuracy: 0.8009 - val_loss: 0.4737 - val_accuracy: 0.8380\n",
      "Epoch 3/10\n",
      "1719/1719 [==============================] - 10s 6ms/step - loss: 0.5156 - accuracy: 0.8214 - val_loss: 0.4377 - val_accuracy: 0.8514\n",
      "Epoch 4/10\n",
      "1719/1719 [==============================] - 10s 6ms/step - loss: 0.4838 - accuracy: 0.8307 - val_loss: 0.4148 - val_accuracy: 0.8600\n",
      "Epoch 5/10\n",
      "1719/1719 [==============================] - 10s 6ms/step - loss: 0.4583 - accuracy: 0.8383 - val_loss: 0.4000 - val_accuracy: 0.8634\n",
      "Epoch 6/10\n",
      "1719/1719 [==============================] - 11s 6ms/step - loss: 0.4438 - accuracy: 0.8431 - val_loss: 0.3874 - val_accuracy: 0.8680\n",
      "Epoch 7/10\n",
      "1719/1719 [==============================] - 11s 6ms/step - loss: 0.4269 - accuracy: 0.8514 - val_loss: 0.3781 - val_accuracy: 0.8692\n",
      "Epoch 8/10\n",
      "1719/1719 [==============================] - 11s 6ms/step - loss: 0.4124 - accuracy: 0.8544 - val_loss: 0.3727 - val_accuracy: 0.8746\n",
      "Epoch 9/10\n",
      "1719/1719 [==============================] - 10s 6ms/step - loss: 0.4020 - accuracy: 0.8585 - val_loss: 0.3649 - val_accuracy: 0.8758\n",
      "Epoch 10/10\n",
      "1719/1719 [==============================] - 10s 6ms/step - loss: 0.3946 - accuracy: 0.8610 - val_loss: 0.3593 - val_accuracy: 0.8754\n"
     ]
    }
   ],
   "source": [
    "histrory = model.fit(X_train, y_train, epochs=10,\n",
    "                     validation_data=(X_valid, y_valid))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "78a7990f-60cd-43c1-be19-30827496da9f",
   "metadata": {},
   "source": [
    "Sometimes applying BN before the activation function works better (there's a debate on this topic). Moreover, the layer before a `BatchNormalization` layer does not need to have bias terms, since the `BatchNormalization` layer has some as well, it would be a waste of parameters, so you can set `use_bias=False` when creating those layers:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "0cbc7295-e70b-45c0-8398-8d2ff8fee690",
   "metadata": {},
   "outputs": [],
   "source": [
    "model = keras.models.Sequential([\n",
    "    keras.layers.Flatten(input_shape=[28, 28]),\n",
    "    keras.layers.BatchNormalization(),\n",
    "    keras.layers.Dense(300, use_bias=False),\n",
    "    keras.layers.BatchNormalization(),\n",
    "    keras.layers.Activation(\"relu\"),\n",
    "    keras.layers.Dense(100, use_bias=False),\n",
    "    keras.layers.BatchNormalization(),\n",
    "    keras.layers.Activation(\"relu\"),\n",
    "    keras.layers.Dense(10, activation=\"softmax\")\n",
    "])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "05262444-e52e-43ec-8484-c2e64d7c1149",
   "metadata": {},
   "outputs": [],
   "source": [
    "model.compile(loss=\"sparse_categorical_crossentropy\",\n",
    "              optimizer=keras.optimizers.SGD(learning_rate=1e-3),\n",
    "              metrics=[\"accuracy\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "8d6002a4-cbbb-4312-a298-06e3b3883a53",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/10\n",
      "1719/1719 [==============================] - 12s 6ms/step - loss: 1.0254 - accuracy: 0.6741 - val_loss: 0.6701 - val_accuracy: 0.7880\n",
      "Epoch 2/10\n",
      "1719/1719 [==============================] - 16s 9ms/step - loss: 0.6739 - accuracy: 0.7807 - val_loss: 0.5598 - val_accuracy: 0.8182\n",
      "Epoch 3/10\n",
      "1719/1719 [==============================] - 12s 7ms/step - loss: 0.5937 - accuracy: 0.8024 - val_loss: 0.5075 - val_accuracy: 0.8332\n",
      "Epoch 4/10\n",
      "1719/1719 [==============================] - 11s 6ms/step - loss: 0.5471 - accuracy: 0.8156 - val_loss: 0.4745 - val_accuracy: 0.8428\n",
      "Epoch 5/10\n",
      "1719/1719 [==============================] - 10s 6ms/step - loss: 0.5147 - accuracy: 0.8245 - val_loss: 0.4519 - val_accuracy: 0.8502\n",
      "Epoch 6/10\n",
      "1719/1719 [==============================] - 10s 6ms/step - loss: 0.4939 - accuracy: 0.8307 - val_loss: 0.4354 - val_accuracy: 0.8578\n",
      "Epoch 7/10\n",
      "1719/1719 [==============================] - 12s 7ms/step - loss: 0.4745 - accuracy: 0.8362 - val_loss: 0.4217 - val_accuracy: 0.8612\n",
      "Epoch 8/10\n",
      "1719/1719 [==============================] - 11s 6ms/step - loss: 0.4591 - accuracy: 0.8429 - val_loss: 0.4113 - val_accuracy: 0.8634\n",
      "Epoch 9/10\n",
      "1719/1719 [==============================] - 10s 6ms/step - loss: 0.4439 - accuracy: 0.8464 - val_loss: 0.4020 - val_accuracy: 0.8650\n",
      "Epoch 10/10\n",
      "1719/1719 [==============================] - 10s 6ms/step - loss: 0.4358 - accuracy: 0.8485 - val_loss: 0.3941 - val_accuracy: 0.8672\n"
     ]
    }
   ],
   "source": [
    "history = model.fit(X_train, y_train, epochs=10,\n",
    "                    validation_data=(X_valid, y_valid))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b7dbbdc2-a13e-47b2-8461-1d8613ec38be",
   "metadata": {},
   "source": [
    "## Gradient Clipping"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8ef3169e-cd4d-4c67-aacf-36764240f93e",
   "metadata": {},
   "source": [
    "All Keras optimizers accept `clipnorm` or `clipvalue` arguments:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "5f5e34f1-6f80-49e0-96e4-e9f224435861",
   "metadata": {},
   "outputs": [],
   "source": [
    "optimizer = keras.optimizers.SGD(clipvalue=1.0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "754aa188-bb77-4dd4-a471-2e2e24dd4604",
   "metadata": {},
   "outputs": [],
   "source": [
    "optimizer = keras.optimizers.SGD(clipnorm=1.0)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "489f972d-fcb8-40e2-ad79-2fbf45653836",
   "metadata": {},
   "source": [
    "## Reusing Pretrained Layers"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d726f287-b8d2-4227-a7c7-db174ccde870",
   "metadata": {},
   "source": [
    "### Reusing a Keras model"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eeeac3c9-17fe-484d-8776-2fbaad283b3b",
   "metadata": {},
   "source": [
    "Let's split the fashion MNIST training set in two:\n",
    "* `X_train_A`: all images of all items except for sandals and shirts (classes 5 and 6).\n",
    "* `X_train_B`: a much smaller training set of just the first 200 images of sandals or shirts.\n",
    "\n",
    "The validation set and the test set are also split this way, but without restricting the number of images.\n",
    "\n",
    "We will train a model on set A (classification task with 8 classes), and try to reuse it to tackle set B (binary classification). We hope to transfer a little bit of knowledge from task A to task B, since classes in set A (sneakers, ankle boots, coats, t-shirts, etc.) are somewhat similar to classes in set B (sandals and shirts). However, since we are using `Dense` layers, only patterns that occur at the same location can be reused (in contrast, convolutional layers will transfer much better, since learned patterns can be detected anywhere on the image, as we will see in the CNN chapter)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "5533f8e3-0bec-4bb8-80da-4c702d54ed62",
   "metadata": {},
   "outputs": [],
   "source": [
    "def split_dataset(X, y):\n",
    "    y_5_or_6 = (y == 5) | (y == 6) # sandals or shirts\n",
    "    y_A = y[~y_5_or_6]\n",
    "    y_A[y_A > 6] -= 2 # class indices 7, 8, 9 should be moved to 5, 6, 7\n",
    "    y_B = (y[y_5_or_6] == 6).astype(np.float32) # binary classification task: is it a shirt (class 6)?\n",
    "    return ((X[~y_5_or_6], y_A),\n",
    "            (X[y_5_or_6], y_B))\n",
    "\n",
    "(X_train_A, y_train_A), (X_train_B, y_train_B) = split_dataset(X_train, y_train)\n",
    "(X_valid_A, y_valid_A), (X_valid_B, y_valid_B) = split_dataset(X_valid, y_valid)\n",
    "(X_test_A, y_test_A), (X_test_B, y_test_B) = split_dataset(X_test, y_test)\n",
    "X_train_B = X_train_B[:200]\n",
    "y_train_B = y_train_B[:200]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "7b60e541-5580-4027-9127-af98a81e0196",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(43986, 28, 28)"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train_A.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "67657d91-dd3c-4b04-b5c4-3f177fda84bb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(200, 28, 28)"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train_B.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "6432a10a-5c51-4572-afbc-147488d87a6d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([4, 0, 5, 7, 7, 7, 4, 4, 3, 4, 0, 1, 6, 3, 4, 3, 2, 6, 5, 3, 4, 5,\n",
       "       1, 3, 4, 2, 0, 6, 7, 1], dtype=uint8)"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_train_A[:30]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "90bc3871-b901-4b16-b3ea-bf434f717678",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1., 1., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0.,\n",
       "       0., 0., 1., 1., 0., 0., 1., 1., 0., 1., 1., 1., 1.], dtype=float32)"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_train_B[:30]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "07c363d4-d554-49d2-9d95-2781b216cffe",
   "metadata": {},
   "outputs": [],
   "source": [
    "tf.random.set_seed(100)\n",
    "np.random.seed(100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "92c02dff-0f84-48e9-95aa-7acd26c6b949",
   "metadata": {},
   "outputs": [],
   "source": [
    "model_A = keras.models.Sequential()\n",
    "model_A.add(keras.layers.Flatten(input_shape=[28, 28]))\n",
    "for n_hidden in (300, 100, 50, 50, 50):\n",
    "    model_A.add(keras.layers.Dense(n_hidden, activation=\"selu\"))\n",
    "model_A.add(keras.layers.Dense(8, activation=\"softmax\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "55904fa4-98fc-43fa-bdf6-676700c22539",
   "metadata": {},
   "outputs": [],
   "source": [
    "model_A.compile(loss=\"sparse_categorical_crossentropy\",\n",
    "                optimizer=keras.optimizers.SGD(learning_rate=1e-3),\n",
    "                metrics=[\"accuracy\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "a8dba576-715a-41be-938f-2e46b2a2abb2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/20\n",
      "1375/1375 [==============================] - 7s 4ms/step - loss: 0.6121 - accuracy: 0.8075 - val_loss: 0.3917 - val_accuracy: 0.8642\n",
      "Epoch 2/20\n",
      "1375/1375 [==============================] - 6s 4ms/step - loss: 0.3638 - accuracy: 0.8730 - val_loss: 0.3312 - val_accuracy: 0.8842\n",
      "Epoch 3/20\n",
      "1375/1375 [==============================] - 7s 5ms/step - loss: 0.3246 - accuracy: 0.8871 - val_loss: 0.3034 - val_accuracy: 0.8964\n",
      "Epoch 4/20\n",
      "1375/1375 [==============================] - 8s 6ms/step - loss: 0.3046 - accuracy: 0.8935 - val_loss: 0.2900 - val_accuracy: 0.9016\n",
      "Epoch 5/20\n",
      "1375/1375 [==============================] - 6s 5ms/step - loss: 0.2905 - accuracy: 0.9003 - val_loss: 0.2774 - val_accuracy: 0.9073\n",
      "Epoch 6/20\n",
      "1375/1375 [==============================] - 6s 5ms/step - loss: 0.2801 - accuracy: 0.9036 - val_loss: 0.2727 - val_accuracy: 0.9071\n",
      "Epoch 7/20\n",
      "1375/1375 [==============================] - 6s 4ms/step - loss: 0.2717 - accuracy: 0.9069 - val_loss: 0.2660 - val_accuracy: 0.9108\n",
      "Epoch 8/20\n",
      "1375/1375 [==============================] - 6s 4ms/step - loss: 0.2642 - accuracy: 0.9096 - val_loss: 0.2776 - val_accuracy: 0.8999\n",
      "Epoch 9/20\n",
      "1375/1375 [==============================] - 6s 4ms/step - loss: 0.2587 - accuracy: 0.9107 - val_loss: 0.2555 - val_accuracy: 0.9150\n",
      "Epoch 10/20\n",
      "1375/1375 [==============================] - 6s 4ms/step - loss: 0.2536 - accuracy: 0.9129 - val_loss: 0.2524 - val_accuracy: 0.9136\n",
      "Epoch 11/20\n",
      "1375/1375 [==============================] - 6s 4ms/step - loss: 0.2494 - accuracy: 0.9135 - val_loss: 0.2519 - val_accuracy: 0.9108\n",
      "Epoch 12/20\n",
      "1375/1375 [==============================] - 6s 4ms/step - loss: 0.2448 - accuracy: 0.9165 - val_loss: 0.2464 - val_accuracy: 0.9153\n",
      "Epoch 13/20\n",
      "1375/1375 [==============================] - 8s 6ms/step - loss: 0.2412 - accuracy: 0.9172 - val_loss: 0.2480 - val_accuracy: 0.9143\n",
      "Epoch 14/20\n",
      "1375/1375 [==============================] - 7s 5ms/step - loss: 0.2375 - accuracy: 0.9180 - val_loss: 0.2503 - val_accuracy: 0.9123\n",
      "Epoch 15/20\n",
      "1375/1375 [==============================] - 7s 5ms/step - loss: 0.2345 - accuracy: 0.9194 - val_loss: 0.2443 - val_accuracy: 0.9173\n",
      "Epoch 16/20\n",
      "1375/1375 [==============================] - 7s 5ms/step - loss: 0.2312 - accuracy: 0.9206 - val_loss: 0.2483 - val_accuracy: 0.9138\n",
      "Epoch 17/20\n",
      "1375/1375 [==============================] - 16s 12ms/step - loss: 0.2286 - accuracy: 0.9218 - val_loss: 0.2413 - val_accuracy: 0.9155\n",
      "Epoch 18/20\n",
      "1375/1375 [==============================] - 7s 5ms/step - loss: 0.2259 - accuracy: 0.9214 - val_loss: 0.2366 - val_accuracy: 0.9195\n",
      "Epoch 19/20\n",
      "1375/1375 [==============================] - 7s 5ms/step - loss: 0.2238 - accuracy: 0.9232 - val_loss: 0.2376 - val_accuracy: 0.9178\n",
      "Epoch 20/20\n",
      "1375/1375 [==============================] - 7s 5ms/step - loss: 0.2213 - accuracy: 0.9236 - val_loss: 0.2363 - val_accuracy: 0.9188\n"
     ]
    }
   ],
   "source": [
    "history = model_A.fit(X_train_A, y_train_A, epochs=20,\n",
    "                      validation_data=(X_valid_A, y_valid_A))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "b1d4bc44-90f4-4c60-86bc-cd48c92e65d3",
   "metadata": {},
   "outputs": [],
   "source": [
    "model_A.save(\"my_model_A.h5\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "e56696ed-315d-452b-acf1-d019183bde73",
   "metadata": {},
   "outputs": [],
   "source": [
    "model_B = keras.models.Sequential()\n",
    "model_B.add(keras.layers.Flatten(input_shape=[28, 28]))\n",
    "for n_hidden in (300, 100, 50, 50, 50):\n",
    "    model_B.add(keras.layers.Dense(n_hidden, activation=\"selu\"))\n",
    "model_B.add(keras.layers.Dense(1, activation=\"sigmoid\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "3e52b62c-6cae-48e8-8bf0-dcaabfecfbc4",
   "metadata": {},
   "outputs": [],
   "source": [
    "model_B.compile(loss=\"binary_crossentropy\",\n",
    "                optimizer=keras.optimizers.SGD(learning_rate=1e-3),\n",
    "                metrics=[\"accuracy\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "427aedc5-d970-4901-8589-1735f3980c07",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/20\n",
      "7/7 [==============================] - 1s 70ms/step - loss: 1.0069 - accuracy: 0.5700 - val_loss: 0.4630 - val_accuracy: 0.8012\n",
      "Epoch 2/20\n",
      "7/7 [==============================] - 0s 26ms/step - loss: 0.4037 - accuracy: 0.8550 - val_loss: 0.3537 - val_accuracy: 0.8793\n",
      "Epoch 3/20\n",
      "7/7 [==============================] - 0s 26ms/step - loss: 0.3094 - accuracy: 0.9050 - val_loss: 0.2846 - val_accuracy: 0.9249\n",
      "Epoch 4/20\n",
      "7/7 [==============================] - 0s 33ms/step - loss: 0.2486 - accuracy: 0.9300 - val_loss: 0.2452 - val_accuracy: 0.9402\n",
      "Epoch 5/20\n",
      "7/7 [==============================] - 0s 24ms/step - loss: 0.2086 - accuracy: 0.9600 - val_loss: 0.2136 - val_accuracy: 0.9554\n",
      "Epoch 6/20\n",
      "7/7 [==============================] - 0s 33ms/step - loss: 0.1807 - accuracy: 0.9700 - val_loss: 0.1910 - val_accuracy: 0.9594\n",
      "Epoch 7/20\n",
      "7/7 [==============================] - 0s 34ms/step - loss: 0.1590 - accuracy: 0.9800 - val_loss: 0.1732 - val_accuracy: 0.9625\n",
      "Epoch 8/20\n",
      "7/7 [==============================] - 0s 24ms/step - loss: 0.1414 - accuracy: 0.9850 - val_loss: 0.1584 - val_accuracy: 0.9655\n",
      "Epoch 9/20\n",
      "7/7 [==============================] - 0s 23ms/step - loss: 0.1268 - accuracy: 0.9850 - val_loss: 0.1463 - val_accuracy: 0.9675\n",
      "Epoch 10/20\n",
      "7/7 [==============================] - 0s 27ms/step - loss: 0.1156 - accuracy: 0.9850 - val_loss: 0.1361 - val_accuracy: 0.9746\n",
      "Epoch 11/20\n",
      "7/7 [==============================] - 0s 25ms/step - loss: 0.1055 - accuracy: 0.9850 - val_loss: 0.1298 - val_accuracy: 0.9746\n",
      "Epoch 12/20\n",
      "7/7 [==============================] - 0s 25ms/step - loss: 0.0976 - accuracy: 0.9850 - val_loss: 0.1217 - val_accuracy: 0.9757\n",
      "Epoch 13/20\n",
      "7/7 [==============================] - 0s 26ms/step - loss: 0.0908 - accuracy: 0.9900 - val_loss: 0.1157 - val_accuracy: 0.9777\n",
      "Epoch 14/20\n",
      "7/7 [==============================] - 0s 32ms/step - loss: 0.0840 - accuracy: 0.9900 - val_loss: 0.1107 - val_accuracy: 0.9807\n",
      "Epoch 15/20\n",
      "7/7 [==============================] - 0s 29ms/step - loss: 0.0787 - accuracy: 0.9900 - val_loss: 0.1056 - val_accuracy: 0.9817\n",
      "Epoch 16/20\n",
      "7/7 [==============================] - 0s 34ms/step - loss: 0.0738 - accuracy: 0.9900 - val_loss: 0.1009 - val_accuracy: 0.9817\n",
      "Epoch 17/20\n",
      "7/7 [==============================] - 0s 31ms/step - loss: 0.0693 - accuracy: 0.9900 - val_loss: 0.0975 - val_accuracy: 0.9817\n",
      "Epoch 18/20\n",
      "7/7 [==============================] - 0s 27ms/step - loss: 0.0654 - accuracy: 0.9900 - val_loss: 0.0944 - val_accuracy: 0.9817\n",
      "Epoch 19/20\n",
      "7/7 [==============================] - 0s 25ms/step - loss: 0.0617 - accuracy: 0.9900 - val_loss: 0.0914 - val_accuracy: 0.9817\n",
      "Epoch 20/20\n",
      "7/7 [==============================] - 0s 26ms/step - loss: 0.0589 - accuracy: 0.9900 - val_loss: 0.0881 - val_accuracy: 0.9828\n"
     ]
    }
   ],
   "source": [
    "history = model_B.fit(X_train_B, y_train_B, epochs=20,\n",
    "                      validation_data=(X_valid_B, y_valid_B))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "92264baa-c660-4026-a02c-6045540a6466",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential_7\"\n",
      "_________________________________________________________________\n",
      " Layer (type)                Output Shape              Param #   \n",
      "=================================================================\n",
      " flatten_7 (Flatten)         (None, 784)               0         \n",
      "                                                                 \n",
      " dense_224 (Dense)           (None, 300)               235500    \n",
      "                                                                 \n",
      " dense_225 (Dense)           (None, 100)               30100     \n",
      "                                                                 \n",
      " dense_226 (Dense)           (None, 50)                5050      \n",
      "                                                                 \n",
      " dense_227 (Dense)           (None, 50)                2550      \n",
      "                                                                 \n",
      " dense_228 (Dense)           (None, 50)                2550      \n",
      "                                                                 \n",
      " dense_229 (Dense)           (None, 1)                 51        \n",
      "                                                                 \n",
      "=================================================================\n",
      "Total params: 275,801\n",
      "Trainable params: 275,801\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "model_B.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "d46efd0c-e015-4dfe-ae80-54fa44682616",
   "metadata": {},
   "outputs": [],
   "source": [
    "model_A = keras.models.load_model(\"my_model_A.h5\")\n",
    "model_B_on_A = keras.models.Sequential(model_A.layers[:-1])\n",
    "model_B_on_A.add(keras.layers.Dense(1, activation=\"sigmoid\"))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "35172a90-50e8-48a2-be59-3b722e8ddc72",
   "metadata": {},
   "source": [
    "Note that `model_B_on_A` and `model_A` actually share layers now, so when we train one, it will update both models. If we want to avoid that, we need to build `model_B_on_A` on top of a *clone* of `model_A`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "17f4f14e-1dfb-4cd5-b3ca-a5ddb7f7ba7c",
   "metadata": {},
   "outputs": [],
   "source": [
    "model_A_clone = keras.models.clone_model(model_A)\n",
    "model_A_clone.set_weights(model_A.get_weights())\n",
    "model_B_on_A = keras.models.Sequential(model_A_clone.layers[:-1])\n",
    "model_B_on_A.add(keras.layers.Dense(1, activation=\"sigmoid\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "898809fa-197b-4b4f-9939-7b5c0ee2b29d",
   "metadata": {},
   "outputs": [],
   "source": [
    "for layer in model_B_on_A.layers[:-1]:\n",
    "    layer.trainable = False\n",
    "    \n",
    "model_B_on_A.compile(loss=\"binary_crossentropy\",\n",
    "                     optimizer=keras.optimizers.SGD(learning_rate=1e-3),\n",
    "                     metrics=[\"accuracy\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "2ff49d59-017c-43ae-9d1f-2dd2a9d567be",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/4\n",
      "7/7 [==============================] - 1s 74ms/step - loss: 0.4228 - accuracy: 0.8450 - val_loss: 0.4154 - val_accuracy: 0.8590\n",
      "Epoch 2/4\n",
      "7/7 [==============================] - 0s 32ms/step - loss: 0.3974 - accuracy: 0.8500 - val_loss: 0.3921 - val_accuracy: 0.8742\n",
      "Epoch 3/4\n",
      "7/7 [==============================] - 0s 23ms/step - loss: 0.3749 - accuracy: 0.8700 - val_loss: 0.3713 - val_accuracy: 0.8884\n",
      "Epoch 4/4\n",
      "7/7 [==============================] - 0s 36ms/step - loss: 0.3548 - accuracy: 0.8750 - val_loss: 0.3529 - val_accuracy: 0.8966\n",
      "Epoch 1/16\n",
      "7/7 [==============================] - 2s 67ms/step - loss: 0.2990 - accuracy: 0.9200 - val_loss: 0.2533 - val_accuracy: 0.9412\n",
      "Epoch 2/16\n",
      "7/7 [==============================] - 0s 27ms/step - loss: 0.2224 - accuracy: 0.9550 - val_loss: 0.2047 - val_accuracy: 0.9594\n",
      "Epoch 3/16\n",
      "7/7 [==============================] - 0s 28ms/step - loss: 0.1802 - accuracy: 0.9650 - val_loss: 0.1721 - val_accuracy: 0.9706\n",
      "Epoch 4/16\n",
      "7/7 [==============================] - 0s 28ms/step - loss: 0.1517 - accuracy: 0.9750 - val_loss: 0.1508 - val_accuracy: 0.9787\n",
      "Epoch 5/16\n",
      "7/7 [==============================] - 0s 26ms/step - loss: 0.1318 - accuracy: 0.9800 - val_loss: 0.1329 - val_accuracy: 0.9807\n",
      "Epoch 6/16\n",
      "7/7 [==============================] - 0s 34ms/step - loss: 0.1152 - accuracy: 0.9850 - val_loss: 0.1200 - val_accuracy: 0.9838\n",
      "Epoch 7/16\n",
      "7/7 [==============================] - 0s 28ms/step - loss: 0.1034 - accuracy: 0.9850 - val_loss: 0.1100 - val_accuracy: 0.9848\n",
      "Epoch 8/16\n",
      "7/7 [==============================] - 0s 25ms/step - loss: 0.0939 - accuracy: 0.9850 - val_loss: 0.1018 - val_accuracy: 0.9868\n",
      "Epoch 9/16\n",
      "7/7 [==============================] - 0s 29ms/step - loss: 0.0858 - accuracy: 0.9850 - val_loss: 0.0949 - val_accuracy: 0.9868\n",
      "Epoch 10/16\n",
      "7/7 [==============================] - 0s 27ms/step - loss: 0.0793 - accuracy: 0.9850 - val_loss: 0.0887 - val_accuracy: 0.9868\n",
      "Epoch 11/16\n",
      "7/7 [==============================] - 0s 24ms/step - loss: 0.0731 - accuracy: 0.9850 - val_loss: 0.0829 - val_accuracy: 0.9878\n",
      "Epoch 12/16\n",
      "7/7 [==============================] - 0s 25ms/step - loss: 0.0671 - accuracy: 0.9900 - val_loss: 0.0784 - val_accuracy: 0.9878\n",
      "Epoch 13/16\n",
      "7/7 [==============================] - 0s 34ms/step - loss: 0.0629 - accuracy: 0.9950 - val_loss: 0.0744 - val_accuracy: 0.9888\n",
      "Epoch 14/16\n",
      "7/7 [==============================] - 0s 25ms/step - loss: 0.0588 - accuracy: 1.0000 - val_loss: 0.0713 - val_accuracy: 0.9899\n",
      "Epoch 15/16\n",
      "7/7 [==============================] - 0s 24ms/step - loss: 0.0557 - accuracy: 1.0000 - val_loss: 0.0683 - val_accuracy: 0.9899\n",
      "Epoch 16/16\n",
      "7/7 [==============================] - 0s 34ms/step - loss: 0.0525 - accuracy: 1.0000 - val_loss: 0.0657 - val_accuracy: 0.9899\n"
     ]
    }
   ],
   "source": [
    "history = model_B_on_A.fit(X_train_B, y_train_B, epochs=4,\n",
    "                           validation_data=(X_valid_B, y_valid_B))\n",
    "\n",
    "for layer in model_B_on_A.layers[:-1]:\n",
    "    layer.trainable = True\n",
    "    \n",
    "model_B_on_A.compile(loss=\"binary_crossentropy\",\n",
    "                     optimizer=keras.optimizers.SGD(learning_rate=1e-3),\n",
    "                     metrics=[\"accuracy\"])\n",
    "history = model_B_on_A.fit(X_train_B, y_train_B, epochs=16,\n",
    "                           validation_data=(X_valid_B, y_valid_B))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "86e6a7ec-ea42-436e-b1fd-5bc3ab15cb55",
   "metadata": {},
   "source": [
    "So, what's the final verdict?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "89d64dab-da00-49d2-94b7-33dff6d9cf64",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "63/63 [==============================] - 0s 3ms/step - loss: 0.0814 - accuracy: 0.9820\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[0.08142367005348206, 0.9819999933242798]"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_B.evaluate(X_test_B, y_test_B)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "30fd8859-cdbb-4ebd-9ac8-a34a7485ff9f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "63/63 [==============================] - 0s 3ms/step - loss: 0.0636 - accuracy: 0.9925\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[0.06361334025859833, 0.9925000071525574]"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_B_on_A.evaluate(X_test_B, y_test_B)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1f83f4ae-8293-4d3b-ab6a-ab46baf4a8d8",
   "metadata": {},
   "source": [
    "Great! We got quite a bit of transfer: the error rate dropped by a factor of 4.9!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "eba7b379-ca5c-45d1-8633-aaab3d4157ff",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4.916666666666718"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(100 - 97.05) / (100 - 99.40)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4c56e2a0-4909-494b-9d5f-8a6b2d5b9f13",
   "metadata": {},
   "source": [
    "# Faster Optimizers"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b1f380b4-6453-454b-9f9d-2ac8f8e3552e",
   "metadata": {},
   "source": [
    "## Momentum optimization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "69121950-51a1-4a05-a0c4-7b61ad52bd43",
   "metadata": {},
   "outputs": [],
   "source": [
    "optimizer = keras.optimizers.SGD(learning_rate=0.001, momentum=0.9)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b4896264-27ba-4592-956c-07052b8f175c",
   "metadata": {},
   "source": [
    "## Nesterov Accelerated Gradient"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "e738eec3-6477-4970-b831-ede4eb5a2884",
   "metadata": {},
   "outputs": [],
   "source": [
    "optimizer = keras.optimizers.SGD(learning_rate=0.001, momentum=0.9, nesterov=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3cab371e-5913-4172-9e79-683fc0c62ea1",
   "metadata": {},
   "source": [
    "## AdaGrad"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "a981b8ff-c469-4616-95ff-ade08a4250c9",
   "metadata": {},
   "outputs": [],
   "source": [
    "optimizer = keras.optimizers.Adagrad(learning_rate=0.001)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "19677025-df62-4a88-b6ea-fa3e48792ac3",
   "metadata": {},
   "source": [
    "## RMSProp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "b341c5fb-cb06-44dc-8a43-7c7746af6023",
   "metadata": {},
   "outputs": [],
   "source": [
    "optimizer = keras.optimizers.RMSprop(learning_rate=0.001, rho=0.9)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "074333c6-e19b-43de-9d08-4b137f8ae813",
   "metadata": {},
   "source": [
    "## Adam Optimization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "12b09afa-9041-4450-b64f-ff0245f16c8a",
   "metadata": {},
   "outputs": [],
   "source": [
    "optimizer = keras.optimizers.Adam(learning_rate=0.001, beta_1=0.9, beta_2=0.999)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eb515174-dc2d-4013-a516-b9253e19d2a0",
   "metadata": {},
   "source": [
    "## Adamax Optimization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "9a0b311a-c25b-4245-adb0-0d4a9ca5ad0b",
   "metadata": {},
   "outputs": [],
   "source": [
    "optimizer = keras.optimizers.Adamax(learning_rate=0.001, beta_1=0.9, beta_2=0.999)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ed59c38-8abb-4cf8-a897-889167a566c4",
   "metadata": {},
   "source": [
    "## Nadam Optimization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "5d2393a5-d4cf-4eac-ac70-f9f8135b45fa",
   "metadata": {},
   "outputs": [],
   "source": [
    "optimizer = keras.optimizers.Nadam(learning_rate=0.001, beta_1=0.9, beta_2=0.999)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "686e648b-b920-4971-a641-1d70f73cf0c7",
   "metadata": {},
   "source": [
    "## Learning Rate Scheduling"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "799396af-4d0d-40d6-8ba3-2d11b7ea360f",
   "metadata": {},
   "source": [
    "### Power Scheduling"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7dff7f92-43d7-4c60-ae74-44f2d00485bc",
   "metadata": {},
   "source": [
    "```lr = lr0 / (1 + steps / s)**c```\n",
    "* Keras uses `c=1` and `s = 1 / decay`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "0fece922-850c-495d-9a3d-616150fc328d",
   "metadata": {},
   "outputs": [],
   "source": [
    "optimizer = keras.optimizers.SGD(learning_rate=0.01, decay=1e-4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "45038dd1-6236-4f46-85b5-691610a04ff4",
   "metadata": {},
   "outputs": [],
   "source": [
    "model = keras.models.Sequential([\n",
    "    keras.layers.Flatten(input_shape=[28, 28]),\n",
    "    keras.layers.Dense(300, activation=\"selu\", kernel_initializer=\"lecun_normal\"),\n",
    "    keras.layers.Dense(100, activation=\"selu\", kernel_initializer=\"lecun_normal\"),\n",
    "    keras.layers.Dense(10, activation=\"softmax\")\n",
    "])\n",
    "model.compile(loss=\"sparse_categorical_crossentropy\", optimizer=optimizer, metrics=[\"accuracy\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "c0aa48e5-a671-4007-b1d0-b45a63f01210",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/25\n",
      "1719/1719 [==============================] - 9s 5ms/step - loss: 0.4883 - accuracy: 0.8289 - val_loss: 0.4037 - val_accuracy: 0.8588\n",
      "Epoch 2/25\n",
      "1719/1719 [==============================] - 7s 4ms/step - loss: 0.3816 - accuracy: 0.8653 - val_loss: 0.3786 - val_accuracy: 0.8636\n",
      "Epoch 3/25\n",
      "1719/1719 [==============================] - 7s 4ms/step - loss: 0.3491 - accuracy: 0.8762 - val_loss: 0.3697 - val_accuracy: 0.8674\n",
      "Epoch 4/25\n",
      "1719/1719 [==============================] - 7s 4ms/step - loss: 0.3269 - accuracy: 0.8836 - val_loss: 0.3621 - val_accuracy: 0.8768\n",
      "Epoch 5/25\n",
      "1719/1719 [==============================] - 7s 4ms/step - loss: 0.3112 - accuracy: 0.8884 - val_loss: 0.3530 - val_accuracy: 0.8740\n",
      "Epoch 6/25\n",
      "1719/1719 [==============================] - 10s 6ms/step - loss: 0.2978 - accuracy: 0.8946 - val_loss: 0.3473 - val_accuracy: 0.8760\n",
      "Epoch 7/25\n",
      "1719/1719 [==============================] - 8s 5ms/step - loss: 0.2875 - accuracy: 0.8974 - val_loss: 0.3401 - val_accuracy: 0.8810\n",
      "Epoch 8/25\n",
      "1719/1719 [==============================] - 8s 4ms/step - loss: 0.2783 - accuracy: 0.9015 - val_loss: 0.3368 - val_accuracy: 0.8798\n",
      "Epoch 9/25\n",
      "1719/1719 [==============================] - 7s 4ms/step - loss: 0.2709 - accuracy: 0.9032 - val_loss: 0.3402 - val_accuracy: 0.8794\n",
      "Epoch 10/25\n",
      "1719/1719 [==============================] - 7s 4ms/step - loss: 0.2631 - accuracy: 0.9074 - val_loss: 0.3361 - val_accuracy: 0.8804\n",
      "Epoch 11/25\n",
      "1719/1719 [==============================] - 8s 4ms/step - loss: 0.2573 - accuracy: 0.9084 - val_loss: 0.3379 - val_accuracy: 0.8796\n",
      "Epoch 12/25\n",
      "1719/1719 [==============================] - 7s 4ms/step - loss: 0.2514 - accuracy: 0.9111 - val_loss: 0.3347 - val_accuracy: 0.8834\n",
      "Epoch 13/25\n",
      "1719/1719 [==============================] - 8s 4ms/step - loss: 0.2462 - accuracy: 0.9135 - val_loss: 0.3267 - val_accuracy: 0.8852\n",
      "Epoch 14/25\n",
      "1719/1719 [==============================] - 9s 5ms/step - loss: 0.2410 - accuracy: 0.9153 - val_loss: 0.3292 - val_accuracy: 0.8864\n",
      "Epoch 15/25\n",
      "1719/1719 [==============================] - 8s 5ms/step - loss: 0.2369 - accuracy: 0.9163 - val_loss: 0.3252 - val_accuracy: 0.8872\n",
      "Epoch 16/25\n",
      "1719/1719 [==============================] - 8s 5ms/step - loss: 0.2326 - accuracy: 0.9184 - val_loss: 0.3266 - val_accuracy: 0.8862\n",
      "Epoch 17/25\n",
      "1719/1719 [==============================] - 8s 5ms/step - loss: 0.2288 - accuracy: 0.9200 - val_loss: 0.3229 - val_accuracy: 0.8904\n",
      "Epoch 18/25\n",
      "1719/1719 [==============================] - 8s 4ms/step - loss: 0.2253 - accuracy: 0.9212 - val_loss: 0.3290 - val_accuracy: 0.8860\n",
      "Epoch 19/25\n",
      "1719/1719 [==============================] - 7s 4ms/step - loss: 0.2221 - accuracy: 0.9222 - val_loss: 0.3286 - val_accuracy: 0.8842\n",
      "Epoch 20/25\n",
      "1719/1719 [==============================] - 7s 4ms/step - loss: 0.2190 - accuracy: 0.9236 - val_loss: 0.3254 - val_accuracy: 0.8888\n",
      "Epoch 21/25\n",
      "1719/1719 [==============================] - 8s 5ms/step - loss: 0.2157 - accuracy: 0.9254 - val_loss: 0.3215 - val_accuracy: 0.8906\n",
      "Epoch 22/25\n",
      "1719/1719 [==============================] - 8s 5ms/step - loss: 0.2131 - accuracy: 0.9258 - val_loss: 0.3227 - val_accuracy: 0.8906\n",
      "Epoch 23/25\n",
      "1719/1719 [==============================] - 7s 4ms/step - loss: 0.2103 - accuracy: 0.9268 - val_loss: 0.3250 - val_accuracy: 0.8906\n",
      "Epoch 24/25\n",
      "1719/1719 [==============================] - 7s 4ms/step - loss: 0.2076 - accuracy: 0.9291 - val_loss: 0.3241 - val_accuracy: 0.8890\n",
      "Epoch 25/25\n",
      "1719/1719 [==============================] - 7s 4ms/step - loss: 0.2054 - accuracy: 0.9294 - val_loss: 0.3239 - val_accuracy: 0.8902\n"
     ]
    }
   ],
   "source": [
    "n_epochs = 25\n",
    "history = model.fit(X_train_scaled, y_train, epochs=n_epochs,\n",
    "                    validation_data=(X_valid_scaled, y_valid))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "eab9dc66-dd6f-4c67-a398-c0b2e3b034ba",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import math\n",
    "\n",
    "learning_rate = 0.01\n",
    "decay = 1e-4\n",
    "batch_size = 32\n",
    "n_steps_per_epoch = math.ceil(len(X_train) / batch_size)\n",
    "epochs = np.arange(n_epochs)\n",
    "lrs = learning_rate / (1 + decay * epochs * n_steps_per_epoch)\n",
    "\n",
    "plt.plot(epochs, lrs, \"o-\")\n",
    "plt.axis([0, n_epochs - 1, 0, 0.01])\n",
    "plt.xlabel(\"Epoch\")\n",
    "plt.ylabel(\"Learning Rate\")\n",
    "plt.title(\"Power Scheduling\", fontsize=14)\n",
    "plt.grid(True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e4f03237-4eb6-4c7c-8891-925947bcbcfc",
   "metadata": {},
   "source": [
    "### Exponential Scheduling"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ee4d3ba-da9b-440a-b98f-da2b7774265f",
   "metadata": {},
   "source": [
    "```lr = lr0 * 0.1**(epoch / s)```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "949d0158-797c-4675-bddf-03bfc799d5c6",
   "metadata": {},
   "outputs": [],
   "source": [
    "def exponential_decay_fn(epoch):\n",
    "    return 0.01 * 0.1**(epoch / 20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "4b7c1811-29e4-4bab-81ec-aca7201f4972",
   "metadata": {},
   "outputs": [],
   "source": [
    "def exponential_decay(lr0, s):\n",
    "    def exponential_decay_fn(epoch):\n",
    "        return lr0 * 0.1**(epoch / s)\n",
    "    return exponential_decay_fn\n",
    "\n",
    "expoential_decay_fn = exponential_decay(lr0=0.01, s=20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "ae2014fc-3695-4513-a900-d4951fbe6069",
   "metadata": {},
   "outputs": [],
   "source": [
    "model = keras.models.Sequential([\n",
    "    keras.layers.Flatten(input_shape=[28, 28]),\n",
    "    keras.layers.Dense(300, activation=\"selu\", kernel_initializer=\"lecun_normal\"),\n",
    "    keras.layers.Dense(100, activation=\"selu\", kernel_initializer=\"lecun_normal\"),\n",
    "    keras.layers.Dense(10, activation=\"softmax\")\n",
    "])\n",
    "model.compile(loss=\"sparse_categorical_crossentropy\", optimizer=\"nadam\", metrics=[\"accuracy\"])\n",
    "n_epochs = 25"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "c071df94-daae-4db5-bbad-75675273ae9d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/25\n",
      "1719/1719 [==============================] - 10s 6ms/step - loss: 0.8345 - accuracy: 0.7606 - val_loss: 1.1310 - val_accuracy: 0.7140 - lr: 0.0100\n",
      "Epoch 2/25\n",
      "1719/1719 [==============================] - 9s 5ms/step - loss: 0.6926 - accuracy: 0.7911 - val_loss: 0.6808 - val_accuracy: 0.8114 - lr: 0.0089\n",
      "Epoch 3/25\n",
      "1719/1719 [==============================] - 11s 6ms/step - loss: 0.6216 - accuracy: 0.8101 - val_loss: 0.6746 - val_accuracy: 0.8350 - lr: 0.0079\n",
      "Epoch 4/25\n",
      "1719/1719 [==============================] - 11s 6ms/step - loss: 0.5510 - accuracy: 0.8287 - val_loss: 0.5346 - val_accuracy: 0.8332 - lr: 0.0071\n",
      "Epoch 5/25\n",
      "1719/1719 [==============================] - 12s 7ms/step - loss: 0.5050 - accuracy: 0.8417 - val_loss: 0.5653 - val_accuracy: 0.8232 - lr: 0.0063\n",
      "Epoch 6/25\n",
      "1719/1719 [==============================] - 11s 6ms/step - loss: 0.4538 - accuracy: 0.8572 - val_loss: 0.5474 - val_accuracy: 0.8244 - lr: 0.0056\n",
      "Epoch 7/25\n",
      "1719/1719 [==============================] - 19s 11ms/step - loss: 0.4208 - accuracy: 0.8649 - val_loss: 0.5082 - val_accuracy: 0.8582 - lr: 0.0050\n",
      "Epoch 8/25\n",
      "1719/1719 [==============================] - 12s 7ms/step - loss: 0.3890 - accuracy: 0.8736 - val_loss: 0.4549 - val_accuracy: 0.8640 - lr: 0.0045\n",
      "Epoch 9/25\n",
      "1719/1719 [==============================] - 10s 6ms/step - loss: 0.3599 - accuracy: 0.8810 - val_loss: 0.4431 - val_accuracy: 0.8706 - lr: 0.0040\n",
      "Epoch 10/25\n",
      "1719/1719 [==============================] - 9s 5ms/step - loss: 0.3371 - accuracy: 0.8865 - val_loss: 0.4417 - val_accuracy: 0.8738 - lr: 0.0035\n",
      "Epoch 11/25\n",
      "1719/1719 [==============================] - 9s 5ms/step - loss: 0.3129 - accuracy: 0.8926 - val_loss: 0.5086 - val_accuracy: 0.8668 - lr: 0.0032\n",
      "Epoch 12/25\n",
      "1719/1719 [==============================] - 9s 5ms/step - loss: 0.2922 - accuracy: 0.8999 - val_loss: 0.4466 - val_accuracy: 0.8748 - lr: 0.0028\n",
      "Epoch 13/25\n",
      "1719/1719 [==============================] - 9s 5ms/step - loss: 0.2739 - accuracy: 0.9051 - val_loss: 0.4240 - val_accuracy: 0.8700 - lr: 0.0025\n",
      "Epoch 14/25\n",
      "1719/1719 [==============================] - 13s 7ms/step - loss: 0.2521 - accuracy: 0.9101 - val_loss: 0.4777 - val_accuracy: 0.8824 - lr: 0.0022\n",
      "Epoch 15/25\n",
      "1719/1719 [==============================] - 11s 6ms/step - loss: 0.2400 - accuracy: 0.9164 - val_loss: 0.4739 - val_accuracy: 0.8730 - lr: 0.0020\n",
      "Epoch 16/25\n",
      "1719/1719 [==============================] - 10s 6ms/step - loss: 0.2206 - accuracy: 0.9221 - val_loss: 0.4777 - val_accuracy: 0.8822 - lr: 0.0018\n",
      "Epoch 17/25\n",
      "1719/1719 [==============================] - 9s 6ms/step - loss: 0.2079 - accuracy: 0.9258 - val_loss: 0.4955 - val_accuracy: 0.8786 - lr: 0.0016\n",
      "Epoch 18/25\n",
      "1719/1719 [==============================] - 9s 5ms/step - loss: 0.1929 - accuracy: 0.9311 - val_loss: 0.5357 - val_accuracy: 0.8816 - lr: 0.0014\n",
      "Epoch 19/25\n",
      "1719/1719 [==============================] - 9s 5ms/step - loss: 0.1808 - accuracy: 0.9360 - val_loss: 0.4907 - val_accuracy: 0.8742 - lr: 0.0013\n",
      "Epoch 20/25\n",
      "1719/1719 [==============================] - 12s 7ms/step - loss: 0.1708 - accuracy: 0.9382 - val_loss: 0.5062 - val_accuracy: 0.8780 - lr: 0.0011\n",
      "Epoch 21/25\n",
      "1719/1719 [==============================] - 11s 6ms/step - loss: 0.1599 - accuracy: 0.9437 - val_loss: 0.5251 - val_accuracy: 0.8838 - lr: 0.0010\n",
      "Epoch 22/25\n",
      "1719/1719 [==============================] - 10s 6ms/step - loss: 0.1502 - accuracy: 0.9488 - val_loss: 0.5458 - val_accuracy: 0.8864 - lr: 8.9125e-04\n",
      "Epoch 23/25\n",
      "1719/1719 [==============================] - 10s 6ms/step - loss: 0.1419 - accuracy: 0.9513 - val_loss: 0.5376 - val_accuracy: 0.8872 - lr: 7.9433e-04\n",
      "Epoch 24/25\n",
      "1719/1719 [==============================] - 10s 6ms/step - loss: 0.1342 - accuracy: 0.9544 - val_loss: 0.5400 - val_accuracy: 0.8866 - lr: 7.0795e-04\n",
      "Epoch 25/25\n",
      "1719/1719 [==============================] - 10s 6ms/step - loss: 0.1280 - accuracy: 0.9570 - val_loss: 0.5637 - val_accuracy: 0.8842 - lr: 6.3096e-04\n"
     ]
    }
   ],
   "source": [
    "lr_scheduler = keras.callbacks.LearningRateScheduler(exponential_decay_fn)\n",
    "history = model.fit(X_train_scaled, y_train, epochs=n_epochs,\n",
    "                    validation_data=(X_valid_scaled, y_valid),\n",
    "                    callbacks=[lr_scheduler])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "id": "992137bc-2395-4a78-b5bb-1a8666ee5004",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(history.epoch, history.history[\"lr\"], \"o-\")\n",
    "plt.axis([0, n_epochs - 1, 0, 0.011])\n",
    "plt.xlabel(\"Epoch\")\n",
    "plt.ylabel(\"Learning Rate\")\n",
    "plt.title(\"Exponential Scheduling\", fontsize=14)\n",
    "plt.grid(True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f2f97fec-c88a-47d1-b55b-470ae5b2c890",
   "metadata": {},
   "source": [
    "The schedule function can take the current learning rate as a second argument:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "c3da2cdf-6792-4c49-8811-f73bda2547a5",
   "metadata": {},
   "outputs": [],
   "source": [
    "def exponential_decay_fn(epoch, lr):\n",
    "    return lr * 0.1**(1 / 20)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "96c34673-9821-4786-8b40-152b450065ed",
   "metadata": {},
   "source": [
    "If you want to update the learning rate at each iteration rather than at each epoch, you must write your own callback class:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "f3e3fe6b-00b1-4b11-8e4b-ec48b8c7b427",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/25\n",
      "1719/1719 [==============================] - 14s 8ms/step - loss: 0.7991 - accuracy: 0.7671 - val_loss: 2.1832 - val_accuracy: 0.7044 - lr: 0.0089\n",
      "Epoch 2/25\n",
      "1719/1719 [==============================] - 12s 7ms/step - loss: 0.6248 - accuracy: 0.8055 - val_loss: 0.5534 - val_accuracy: 0.8264 - lr: 0.0079\n",
      "Epoch 3/25\n",
      "1719/1719 [==============================] - 12s 7ms/step - loss: 0.5460 - accuracy: 0.8287 - val_loss: 0.5193 - val_accuracy: 0.8434 - lr: 0.0071\n",
      "Epoch 4/25\n",
      "1719/1719 [==============================] - 11s 6ms/step - loss: 0.4944 - accuracy: 0.8438 - val_loss: 0.5258 - val_accuracy: 0.8558 - lr: 0.0063\n",
      "Epoch 5/25\n",
      "1719/1719 [==============================] - 11s 6ms/step - loss: 0.4507 - accuracy: 0.8547 - val_loss: 0.4741 - val_accuracy: 0.8454 - lr: 0.0056\n",
      "Epoch 6/25\n",
      "1719/1719 [==============================] - 13s 8ms/step - loss: 0.4107 - accuracy: 0.8667 - val_loss: 0.4703 - val_accuracy: 0.8664 - lr: 0.0050\n",
      "Epoch 7/25\n",
      "1719/1719 [==============================] - 11s 6ms/step - loss: 0.3922 - accuracy: 0.8717 - val_loss: 0.4471 - val_accuracy: 0.8700 - lr: 0.0045\n",
      "Epoch 8/25\n",
      "1719/1719 [==============================] - 11s 6ms/step - loss: 0.3557 - accuracy: 0.8833 - val_loss: 0.4596 - val_accuracy: 0.8714 - lr: 0.0040\n",
      "Epoch 9/25\n",
      "1719/1719 [==============================] - 11s 6ms/step - loss: 0.3248 - accuracy: 0.8917 - val_loss: 0.4574 - val_accuracy: 0.8674 - lr: 0.0035\n",
      "Epoch 10/25\n",
      "1719/1719 [==============================] - 10s 6ms/step - loss: 0.3050 - accuracy: 0.8978 - val_loss: 0.4151 - val_accuracy: 0.8746 - lr: 0.0032\n",
      "Epoch 11/25\n",
      "1719/1719 [==============================] - 21s 12ms/step - loss: 0.2769 - accuracy: 0.9044 - val_loss: 0.4791 - val_accuracy: 0.8664 - lr: 0.0028\n",
      "Epoch 12/25\n",
      "1719/1719 [==============================] - 12s 7ms/step - loss: 0.2588 - accuracy: 0.9119 - val_loss: 0.4217 - val_accuracy: 0.8834 - lr: 0.0025\n",
      "Epoch 13/25\n",
      "1719/1719 [==============================] - 11s 7ms/step - loss: 0.2389 - accuracy: 0.9187 - val_loss: 0.4173 - val_accuracy: 0.8844 - lr: 0.0022\n",
      "Epoch 14/25\n",
      "1719/1719 [==============================] - 11s 7ms/step - loss: 0.2258 - accuracy: 0.9236 - val_loss: 0.4614 - val_accuracy: 0.8864 - lr: 0.0020\n",
      "Epoch 15/25\n",
      "1719/1719 [==============================] - 13s 7ms/step - loss: 0.2085 - accuracy: 0.9284 - val_loss: 0.4201 - val_accuracy: 0.8790 - lr: 0.0018\n",
      "Epoch 16/25\n",
      "1719/1719 [==============================] - 14s 8ms/step - loss: 0.1923 - accuracy: 0.9343 - val_loss: 0.4625 - val_accuracy: 0.8860 - lr: 0.0016\n",
      "Epoch 17/25\n",
      "1719/1719 [==============================] - 13s 7ms/step - loss: 0.1797 - accuracy: 0.9386 - val_loss: 0.4830 - val_accuracy: 0.8858 - lr: 0.0014\n",
      "Epoch 18/25\n",
      "1719/1719 [==============================] - 11s 7ms/step - loss: 0.1666 - accuracy: 0.9430 - val_loss: 0.4690 - val_accuracy: 0.8862 - lr: 0.0013\n",
      "Epoch 19/25\n",
      "1719/1719 [==============================] - 12s 7ms/step - loss: 0.1539 - accuracy: 0.9485 - val_loss: 0.5016 - val_accuracy: 0.8856 - lr: 0.0011\n",
      "Epoch 20/25\n",
      "1719/1719 [==============================] - 15s 8ms/step - loss: 0.1439 - accuracy: 0.9516 - val_loss: 0.5004 - val_accuracy: 0.8850 - lr: 9.9967e-04\n",
      "Epoch 21/25\n",
      "1719/1719 [==============================] - 14s 8ms/step - loss: 0.1369 - accuracy: 0.9541 - val_loss: 0.5639 - val_accuracy: 0.8860 - lr: 8.9094e-04\n",
      "Epoch 22/25\n",
      "1719/1719 [==============================] - 12s 7ms/step - loss: 0.1256 - accuracy: 0.9588 - val_loss: 0.5653 - val_accuracy: 0.8888 - lr: 7.9404e-04\n",
      "Epoch 23/25\n",
      "1719/1719 [==============================] - 11s 7ms/step - loss: 0.1182 - accuracy: 0.9608 - val_loss: 0.5748 - val_accuracy: 0.8904 - lr: 7.0767e-04\n",
      "Epoch 24/25\n",
      "1719/1719 [==============================] - 11s 6ms/step - loss: 0.1096 - accuracy: 0.9630 - val_loss: 0.6151 - val_accuracy: 0.8892 - lr: 6.3071e-04\n",
      "Epoch 25/25\n",
      "1719/1719 [==============================] - 12s 7ms/step - loss: 0.1046 - accuracy: 0.9655 - val_loss: 0.6239 - val_accuracy: 0.8896 - lr: 5.6211e-04\n"
     ]
    }
   ],
   "source": [
    "K = keras.backend\n",
    "\n",
    "class ExponentialDecay(keras.callbacks.Callback):\n",
    "    def __init__(self, s=40000):\n",
    "        super().__init__()\n",
    "        self.s = s\n",
    "        \n",
    "    def on_batch_begin(self, batch, logs=None):\n",
    "        # the 'batch' argument in reset at ech epoch\n",
    "        lr = K.get_value(self.model.optimizer.learning_rate)\n",
    "        K.set_value(self.model.optimizer.learning_rate, lr * 0.1**(1 / self.s))\n",
    "        \n",
    "    def on_epoch_end(self, epoch, logs=None):\n",
    "        logs = logs or {}\n",
    "        logs['lr'] = K.get_value(self.model.optimizer.learning_rate)\n",
    "        \n",
    "model = keras.models.Sequential([\n",
    "    keras.layers.Flatten(input_shape=[28, 28]),\n",
    "    keras.layers.Dense(300, activation=\"selu\", kernel_initializer=\"lecun_normal\"),\n",
    "    keras.layers.Dense(100, activation=\"selu\", kernel_initializer=\"lecun_normal\"),\n",
    "    keras.layers.Dense(10, activation=\"softmax\")\n",
    "])\n",
    "lr0 = 0.01\n",
    "optimizer = keras.optimizers.Nadam(learning_rate=lr0)\n",
    "model.compile(loss=\"sparse_categorical_crossentropy\", optimizer=optimizer, metrics=[\"accuracy\"])\n",
    "n_epochs = 25\n",
    "\n",
    "s = 20 * len(X_train) // 32 # number of steps in 20 epochs (batch size = 32)\n",
    "exp_decay = ExponentialDecay(s)\n",
    "history = model.fit(X_train_scaled, y_train, epochs=n_epochs,\n",
    "                    validation_data=(X_valid_scaled, y_valid),\n",
    "                    callbacks=[exp_decay])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "63969127-9032-4308-b584-019adc552112",
   "metadata": {},
   "outputs": [],
   "source": [
    "n_steps = n_epochs * len(X_train) // 32\n",
    "steps = np.arange(n_steps)\n",
    "lrs = lr0 * 0.1**(steps / s)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "id": "5241aceb-32a3-4435-96d9-b7b8574f10ee",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(steps, lrs, \"-\", linewidth=2)\n",
    "plt.axis([0, n_steps - 1, 0, lr0 * 1.1])\n",
    "plt.xlabel(\"Batch\")\n",
    "plt.ylabel(\"Learning Rate\")\n",
    "plt.title(\"Exponential Scheduling (per batch)\", fontsize=14)\n",
    "plt.grid(True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7d5a8a61-6950-49e3-8177-6fa782e764f5",
   "metadata": {},
   "source": [
    "### Piecewise Constant Scheduling"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "id": "94370f4f-2bc1-4ae8-a73c-08cd2247fcb7",
   "metadata": {},
   "outputs": [],
   "source": [
    "def piecewise_constatn_fn(epoch):\n",
    "    if epoch < 5:\n",
    "        return 0.01\n",
    "    elif epoch < 15:\n",
    "        return 0.005\n",
    "    else:\n",
    "        return 0.001"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "id": "0d7e5ebe-1822-4c53-8e11-17995fc0bd2f",
   "metadata": {},
   "outputs": [],
   "source": [
    "def piecewise_constant(boundaries, values):\n",
    "    boundaries = np.array([0] + boundaries)\n",
    "    values = np.array(values)\n",
    "    def piecewise_constant_fn(epoch):\n",
    "        return values[np.argmax(boundaries > epoch) - 1]\n",
    "    return piecewise_constant_fn\n",
    "\n",
    "piecewise_constant_fn = piecewise_constant([5, 15], [0.01, 0.005, 0.001])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "id": "3bd0589b-e40d-4300-8c0d-e824893d206a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/25\n",
      "1719/1719 [==============================] - 11s 6ms/step - loss: 0.8134 - accuracy: 0.7655 - val_loss: 0.7665 - val_accuracy: 0.8010 - lr: 0.0100\n",
      "Epoch 2/25\n",
      "1719/1719 [==============================] - 10s 6ms/step - loss: 0.7499 - accuracy: 0.7835 - val_loss: 0.7829 - val_accuracy: 0.7670 - lr: 0.0100\n",
      "Epoch 3/25\n",
      "1719/1719 [==============================] - 9s 5ms/step - loss: 0.9123 - accuracy: 0.7265 - val_loss: 0.8858 - val_accuracy: 0.6720 - lr: 0.0100\n",
      "Epoch 4/25\n",
      "1719/1719 [==============================] - 9s 5ms/step - loss: 0.9650 - accuracy: 0.6942 - val_loss: 0.8569 - val_accuracy: 0.7258 - lr: 0.0100\n",
      "Epoch 5/25\n",
      "1719/1719 [==============================] - 9s 5ms/step - loss: 0.9521 - accuracy: 0.7001 - val_loss: 0.8670 - val_accuracy: 0.7076 - lr: 0.0100\n",
      "Epoch 6/25\n",
      "1719/1719 [==============================] - 11s 6ms/step - loss: 0.6769 - accuracy: 0.7501 - val_loss: 0.7254 - val_accuracy: 0.7544 - lr: 0.0050\n",
      "Epoch 7/25\n",
      "1719/1719 [==============================] - 10s 6ms/step - loss: 0.6613 - accuracy: 0.7561 - val_loss: 0.6865 - val_accuracy: 0.7486 - lr: 0.0050\n",
      "Epoch 8/25\n",
      "1719/1719 [==============================] - 10s 6ms/step - loss: 0.6062 - accuracy: 0.7697 - val_loss: 0.7177 - val_accuracy: 0.7684 - lr: 0.0050\n",
      "Epoch 9/25\n",
      "1719/1719 [==============================] - 9s 5ms/step - loss: 0.6126 - accuracy: 0.7745 - val_loss: 0.7211 - val_accuracy: 0.7676 - lr: 0.0050\n",
      "Epoch 10/25\n",
      "1719/1719 [==============================] - 10s 6ms/step - loss: 0.6022 - accuracy: 0.7764 - val_loss: 0.7093 - val_accuracy: 0.7784 - lr: 0.0050\n",
      "Epoch 11/25\n",
      "1719/1719 [==============================] - 9s 5ms/step - loss: 0.6088 - accuracy: 0.7813 - val_loss: 0.6691 - val_accuracy: 0.7908 - lr: 0.0050\n",
      "Epoch 12/25\n",
      "1719/1719 [==============================] - 11s 6ms/step - loss: 0.5534 - accuracy: 0.8223 - val_loss: 0.6143 - val_accuracy: 0.7956 - lr: 0.0050\n",
      "Epoch 13/25\n",
      "1719/1719 [==============================] - 10s 6ms/step - loss: 0.4871 - accuracy: 0.8588 - val_loss: 0.6088 - val_accuracy: 0.8600 - lr: 0.0050\n",
      "Epoch 14/25\n",
      "1719/1719 [==============================] - 10s 6ms/step - loss: 0.4668 - accuracy: 0.8650 - val_loss: 0.5496 - val_accuracy: 0.8596 - lr: 0.0050\n",
      "Epoch 15/25\n",
      "1719/1719 [==============================] - 19s 11ms/step - loss: 0.4818 - accuracy: 0.8635 - val_loss: 0.5844 - val_accuracy: 0.8440 - lr: 0.0050\n",
      "Epoch 16/25\n",
      "1719/1719 [==============================] - 9s 5ms/step - loss: 0.3431 - accuracy: 0.8900 - val_loss: 0.4824 - val_accuracy: 0.8674 - lr: 0.0010\n",
      "Epoch 17/25\n",
      "1719/1719 [==============================] - 12s 7ms/step - loss: 0.3199 - accuracy: 0.8976 - val_loss: 0.4738 - val_accuracy: 0.8704 - lr: 0.0010\n",
      "Epoch 18/25\n",
      "1719/1719 [==============================] - 10s 6ms/step - loss: 0.3070 - accuracy: 0.9016 - val_loss: 0.4857 - val_accuracy: 0.8702 - lr: 0.0010\n",
      "Epoch 19/25\n",
      "1719/1719 [==============================] - 9s 6ms/step - loss: 0.2959 - accuracy: 0.9045 - val_loss: 0.4725 - val_accuracy: 0.8698 - lr: 0.0010\n",
      "Epoch 20/25\n",
      "1719/1719 [==============================] - 9s 5ms/step - loss: 0.2879 - accuracy: 0.9072 - val_loss: 0.4708 - val_accuracy: 0.8708 - lr: 0.0010\n",
      "Epoch 21/25\n",
      "1719/1719 [==============================] - 9s 5ms/step - loss: 0.2799 - accuracy: 0.9101 - val_loss: 0.4834 - val_accuracy: 0.8690 - lr: 0.0010\n",
      "Epoch 22/25\n",
      "1719/1719 [==============================] - 9s 6ms/step - loss: 0.2721 - accuracy: 0.9125 - val_loss: 0.4886 - val_accuracy: 0.8736 - lr: 0.0010\n",
      "Epoch 23/25\n",
      "1719/1719 [==============================] - 11s 6ms/step - loss: 0.2650 - accuracy: 0.9151 - val_loss: 0.5141 - val_accuracy: 0.8686 - lr: 0.0010\n",
      "Epoch 24/25\n",
      "1719/1719 [==============================] - 10s 6ms/step - loss: 0.2578 - accuracy: 0.9174 - val_loss: 0.5180 - val_accuracy: 0.8754 - lr: 0.0010\n",
      "Epoch 25/25\n",
      "1719/1719 [==============================] - 10s 6ms/step - loss: 0.2522 - accuracy: 0.9199 - val_loss: 0.5305 - val_accuracy: 0.8708 - lr: 0.0010\n"
     ]
    }
   ],
   "source": [
    "lr_scheduler = keras.callbacks.LearningRateScheduler(piecewise_constant_fn)\n",
    "\n",
    "model = keras.models.Sequential([\n",
    "    keras.layers.Flatten(input_shape=[28, 28]),\n",
    "    keras.layers.Dense(300, activation=\"selu\", kernel_initializer=\"lecun_normal\"),\n",
    "    keras.layers.Dense(100, activation=\"selu\", kernel_initializer=\"lecun_normal\"),\n",
    "    keras.layers.Dense(10, activation=\"softmax\")\n",
    "])\n",
    "model.compile(loss=\"sparse_categorical_crossentropy\", optimizer=\"nadam\", metrics=[\"accuracy\"])\n",
    "n_epochs = 25\n",
    "history = model.fit(X_train_scaled, y_train, epochs=n_epochs,\n",
    "                    validation_data=(X_valid_scaled, y_valid),\n",
    "                    callbacks=[lr_scheduler])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "id": "0c2c87e6-aeda-4008-8820-3dda6cc575ea",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(history.epoch, [piecewise_constant_fn(epoch) for epoch in history.epoch], \"o-\")\n",
    "plt.axis([0, n_epochs - 1, 0, 0.011])\n",
    "plt.xlabel(\"Epoch\")\n",
    "plt.ylabel(\"Learning Rate\")\n",
    "plt.title(\"Piecewise Constant Scheduling\", fontsize=14)\n",
    "plt.grid(True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "423ee31a-19a3-4307-a686-f4ad9eb0830f",
   "metadata": {},
   "source": [
    "### Performance Scheduling"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "id": "0a7b8654-a7b3-4cc2-a14f-73cd57ea22fb",
   "metadata": {},
   "outputs": [],
   "source": [
    "tf.random.set_seed(100)\n",
    "np.random.seed(100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "id": "4f357bdc-b5df-43c6-b6f9-b218c7184aad",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/25\n",
      "1719/1719 [==============================] - 9s 5ms/step - loss: 0.5956 - accuracy: 0.8062 - val_loss: 0.5144 - val_accuracy: 0.8256 - lr: 0.0200\n",
      "Epoch 2/25\n",
      "1719/1719 [==============================] - 7s 4ms/step - loss: 0.5157 - accuracy: 0.8348 - val_loss: 0.5131 - val_accuracy: 0.8312 - lr: 0.0200\n",
      "Epoch 3/25\n",
      "1719/1719 [==============================] - 7s 4ms/step - loss: 0.5111 - accuracy: 0.8435 - val_loss: 0.5595 - val_accuracy: 0.8516 - lr: 0.0200\n",
      "Epoch 4/25\n",
      "1719/1719 [==============================] - 7s 4ms/step - loss: 0.5064 - accuracy: 0.8497 - val_loss: 0.5779 - val_accuracy: 0.8338 - lr: 0.0200\n",
      "Epoch 5/25\n",
      "1719/1719 [==============================] - 9s 5ms/step - loss: 0.5374 - accuracy: 0.8456 - val_loss: 0.6514 - val_accuracy: 0.8374 - lr: 0.0200\n",
      "Epoch 6/25\n",
      "1719/1719 [==============================] - 7s 4ms/step - loss: 0.5407 - accuracy: 0.8512 - val_loss: 0.7131 - val_accuracy: 0.8498 - lr: 0.0200\n",
      "Epoch 7/25\n",
      "1719/1719 [==============================] - 7s 4ms/step - loss: 0.5116 - accuracy: 0.8546 - val_loss: 0.6291 - val_accuracy: 0.8436 - lr: 0.0200\n",
      "Epoch 8/25\n",
      "1719/1719 [==============================] - 7s 4ms/step - loss: 0.3002 - accuracy: 0.8951 - val_loss: 0.3895 - val_accuracy: 0.8774 - lr: 0.0100\n",
      "Epoch 9/25\n",
      "1719/1719 [==============================] - 7s 4ms/step - loss: 0.2509 - accuracy: 0.9092 - val_loss: 0.3844 - val_accuracy: 0.8836 - lr: 0.0100\n",
      "Epoch 10/25\n",
      "1719/1719 [==============================] - 7s 4ms/step - loss: 0.2278 - accuracy: 0.9159 - val_loss: 0.4067 - val_accuracy: 0.8808 - lr: 0.0100\n",
      "Epoch 11/25\n",
      "1719/1719 [==============================] - 7s 4ms/step - loss: 0.2151 - accuracy: 0.9193 - val_loss: 0.4130 - val_accuracy: 0.8840 - lr: 0.0100\n",
      "Epoch 12/25\n",
      "1719/1719 [==============================] - 8s 4ms/step - loss: 0.2009 - accuracy: 0.9245 - val_loss: 0.4460 - val_accuracy: 0.8850 - lr: 0.0100\n",
      "Epoch 13/25\n",
      "1719/1719 [==============================] - 9s 5ms/step - loss: 0.1970 - accuracy: 0.9282 - val_loss: 0.4283 - val_accuracy: 0.8856 - lr: 0.0100\n",
      "Epoch 14/25\n",
      "1719/1719 [==============================] - 8s 5ms/step - loss: 0.1797 - accuracy: 0.9326 - val_loss: 0.4976 - val_accuracy: 0.8808 - lr: 0.0100\n",
      "Epoch 15/25\n",
      "1719/1719 [==============================] - 8s 5ms/step - loss: 0.1264 - accuracy: 0.9511 - val_loss: 0.4364 - val_accuracy: 0.8942 - lr: 0.0050\n",
      "Epoch 16/25\n",
      "1719/1719 [==============================] - 8s 4ms/step - loss: 0.1111 - accuracy: 0.9561 - val_loss: 0.4707 - val_accuracy: 0.8892 - lr: 0.0050\n",
      "Epoch 17/25\n",
      "1719/1719 [==============================] - 8s 4ms/step - loss: 0.1032 - accuracy: 0.9599 - val_loss: 0.4781 - val_accuracy: 0.8896 - lr: 0.0050\n",
      "Epoch 18/25\n",
      "1719/1719 [==============================] - 8s 4ms/step - loss: 0.0990 - accuracy: 0.9615 - val_loss: 0.4733 - val_accuracy: 0.8894 - lr: 0.0050\n",
      "Epoch 19/25\n",
      "1719/1719 [==============================] - 7s 4ms/step - loss: 0.0913 - accuracy: 0.9662 - val_loss: 0.4909 - val_accuracy: 0.8920 - lr: 0.0050\n",
      "Epoch 20/25\n",
      "1719/1719 [==============================] - 7s 4ms/step - loss: 0.0707 - accuracy: 0.9733 - val_loss: 0.4951 - val_accuracy: 0.8930 - lr: 0.0025\n",
      "Epoch 21/25\n",
      "1719/1719 [==============================] - 8s 5ms/step - loss: 0.0647 - accuracy: 0.9765 - val_loss: 0.5160 - val_accuracy: 0.8924 - lr: 0.0025\n",
      "Epoch 22/25\n",
      "1719/1719 [==============================] - 8s 4ms/step - loss: 0.0612 - accuracy: 0.9774 - val_loss: 0.5400 - val_accuracy: 0.8908 - lr: 0.0025\n",
      "Epoch 23/25\n",
      "1719/1719 [==============================] - 7s 4ms/step - loss: 0.0584 - accuracy: 0.9789 - val_loss: 0.5458 - val_accuracy: 0.8906 - lr: 0.0025\n",
      "Epoch 24/25\n",
      "1719/1719 [==============================] - 16s 10ms/step - loss: 0.0547 - accuracy: 0.9806 - val_loss: 0.5530 - val_accuracy: 0.8898 - lr: 0.0025\n",
      "Epoch 25/25\n",
      "1719/1719 [==============================] - 8s 5ms/step - loss: 0.0469 - accuracy: 0.9844 - val_loss: 0.5610 - val_accuracy: 0.8918 - lr: 0.0012\n"
     ]
    }
   ],
   "source": [
    "lr_scheduler = keras.callbacks.ReduceLROnPlateau(factor=0.5, patience=5)\n",
    "\n",
    "model = keras.models.Sequential([\n",
    "    keras.layers.Flatten(input_shape=[28, 28]),\n",
    "    keras.layers.Dense(300, activation=\"selu\", kernel_initializer=\"lecun_normal\"),\n",
    "    keras.layers.Dense(100, activation=\"selu\", kernel_initializer=\"lecun_normal\"),\n",
    "    keras.layers.Dense(10, activation=\"softmax\")\n",
    "])\n",
    "optimizer = keras.optimizers.SGD(learning_rate=0.02, momentum=0.9)\n",
    "model.compile(loss=\"sparse_categorical_crossentropy\", optimizer=optimizer, metrics=[\"accuracy\"])\n",
    "n_epochs = 25\n",
    "history = model.fit(X_train_scaled, y_train, epochs=n_epochs,\n",
    "                    validation_data=(X_valid_scaled, y_valid),\n",
    "                    callbacks=[lr_scheduler])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "id": "0b9cd509-2d5c-4645-af56-60f9322dc0e6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(history.epoch, history.history[\"lr\"], \"bo-\")\n",
    "plt.xlabel(\"Epoch\")\n",
    "plt.ylabel(\"Learning Rate\", color='b')\n",
    "plt.tick_params('y', colors='b')\n",
    "plt.gca().set_xlim(0, n_epochs - 1)\n",
    "plt.grid(True)\n",
    "\n",
    "ax2 = plt.gca().twinx()\n",
    "ax2.plot(history.epoch, history.history[\"val_loss\"], \"r^-\")\n",
    "ax2.set_ylabel('Validation Loss', color='r')\n",
    "ax2.tick_params('y', colors='r')\n",
    "\n",
    "plt.title(\"Reduce LR on Plateau\", fontsize=14);"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8b47a748-7bb8-4f67-8a7b-12cd2ba2ac62",
   "metadata": {},
   "source": [
    "### tf.keras schedulers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "id": "48265648-5c6e-43e2-a52c-8135b7237566",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/25\n",
      "1719/1719 [==============================] - 8s 4ms/step - loss: 0.4895 - accuracy: 0.8289 - val_loss: 0.3950 - val_accuracy: 0.8630\n",
      "Epoch 2/25\n",
      "1719/1719 [==============================] - 10s 6ms/step - loss: 0.3781 - accuracy: 0.8666 - val_loss: 0.3726 - val_accuracy: 0.8734\n",
      "Epoch 3/25\n",
      "1719/1719 [==============================] - 8s 5ms/step - loss: 0.3449 - accuracy: 0.8777 - val_loss: 0.3620 - val_accuracy: 0.8750\n",
      "Epoch 4/25\n",
      "1719/1719 [==============================] - 7s 4ms/step - loss: 0.3220 - accuracy: 0.8852 - val_loss: 0.3563 - val_accuracy: 0.8776\n",
      "Epoch 5/25\n",
      "1719/1719 [==============================] - 7s 4ms/step - loss: 0.3059 - accuracy: 0.8916 - val_loss: 0.3474 - val_accuracy: 0.8782\n",
      "Epoch 6/25\n",
      "1719/1719 [==============================] - 7s 4ms/step - loss: 0.2922 - accuracy: 0.8963 - val_loss: 0.3443 - val_accuracy: 0.8802\n",
      "Epoch 7/25\n",
      "1719/1719 [==============================] - 7s 4ms/step - loss: 0.2814 - accuracy: 0.8998 - val_loss: 0.3346 - val_accuracy: 0.8838\n",
      "Epoch 8/25\n",
      "1719/1719 [==============================] - 7s 4ms/step - loss: 0.2724 - accuracy: 0.9014 - val_loss: 0.3334 - val_accuracy: 0.8848\n",
      "Epoch 9/25\n",
      "1719/1719 [==============================] - 7s 4ms/step - loss: 0.2649 - accuracy: 0.9051 - val_loss: 0.3347 - val_accuracy: 0.8844\n",
      "Epoch 10/25\n",
      "1719/1719 [==============================] - 8s 4ms/step - loss: 0.2575 - accuracy: 0.9077 - val_loss: 0.3332 - val_accuracy: 0.8852\n",
      "Epoch 11/25\n",
      "1719/1719 [==============================] - 7s 4ms/step - loss: 0.2518 - accuracy: 0.9095 - val_loss: 0.3339 - val_accuracy: 0.8862\n",
      "Epoch 12/25\n",
      "1719/1719 [==============================] - 7s 4ms/step - loss: 0.2467 - accuracy: 0.9134 - val_loss: 0.3312 - val_accuracy: 0.8870\n",
      "Epoch 13/25\n",
      "1719/1719 [==============================] - 7s 4ms/step - loss: 0.2422 - accuracy: 0.9131 - val_loss: 0.3253 - val_accuracy: 0.8880\n",
      "Epoch 14/25\n",
      "1719/1719 [==============================] - 7s 4ms/step - loss: 0.2380 - accuracy: 0.9159 - val_loss: 0.3274 - val_accuracy: 0.8886\n",
      "Epoch 15/25\n",
      "1719/1719 [==============================] - 6s 4ms/step - loss: 0.2345 - accuracy: 0.9163 - val_loss: 0.3252 - val_accuracy: 0.8884\n",
      "Epoch 16/25\n",
      "1719/1719 [==============================] - 7s 4ms/step - loss: 0.2314 - accuracy: 0.9181 - val_loss: 0.3252 - val_accuracy: 0.8882\n",
      "Epoch 17/25\n",
      "1719/1719 [==============================] - 7s 4ms/step - loss: 0.2286 - accuracy: 0.9194 - val_loss: 0.3229 - val_accuracy: 0.8884\n",
      "Epoch 18/25\n",
      "1719/1719 [==============================] - 6s 4ms/step - loss: 0.2262 - accuracy: 0.9196 - val_loss: 0.3266 - val_accuracy: 0.8896\n",
      "Epoch 19/25\n",
      "1719/1719 [==============================] - 8s 4ms/step - loss: 0.2240 - accuracy: 0.9202 - val_loss: 0.3257 - val_accuracy: 0.8890\n",
      "Epoch 20/25\n",
      "1719/1719 [==============================] - 7s 4ms/step - loss: 0.2221 - accuracy: 0.9219 - val_loss: 0.3233 - val_accuracy: 0.8900\n",
      "Epoch 21/25\n",
      "1719/1719 [==============================] - 7s 4ms/step - loss: 0.2202 - accuracy: 0.9223 - val_loss: 0.3224 - val_accuracy: 0.8926\n",
      "Epoch 22/25\n",
      "1719/1719 [==============================] - 7s 4ms/step - loss: 0.2187 - accuracy: 0.9233 - val_loss: 0.3242 - val_accuracy: 0.8906\n",
      "Epoch 23/25\n",
      "1719/1719 [==============================] - 7s 4ms/step - loss: 0.2174 - accuracy: 0.9232 - val_loss: 0.3245 - val_accuracy: 0.8914\n",
      "Epoch 24/25\n",
      "1719/1719 [==============================] - 7s 4ms/step - loss: 0.2161 - accuracy: 0.9243 - val_loss: 0.3223 - val_accuracy: 0.8904\n",
      "Epoch 25/25\n",
      "1719/1719 [==============================] - 7s 4ms/step - loss: 0.2150 - accuracy: 0.9246 - val_loss: 0.3232 - val_accuracy: 0.8910\n"
     ]
    }
   ],
   "source": [
    "model = keras.models.Sequential([\n",
    "    keras.layers.Flatten(input_shape=[28, 28]),\n",
    "    keras.layers.Dense(300, activation=\"selu\", kernel_initializer=\"lecun_normal\"),\n",
    "    keras.layers.Dense(100, activation=\"selu\", kernel_initializer=\"lecun_normal\"),\n",
    "    keras.layers.Dense(10, activation=\"softmax\")\n",
    "])\n",
    "s = 20 * len(X_train) // 32\n",
    "learning_rate = keras.optimizers.schedules.ExponentialDecay(0.01, s, 0.1)\n",
    "optimizer = keras.optimizers.SGD(learning_rate)\n",
    "model.compile(loss=\"sparse_categorical_crossentropy\", optimizer=optimizer, metrics=[\"accuracy\"])\n",
    "n_epochs = 25\n",
    "history = model.fit(X_train_scaled, y_train, epochs=n_epochs,\n",
    "                    validation_data=(X_valid_scaled, y_valid))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c4aa04b5-bd95-4ca8-a052-a5bcff0fb07a",
   "metadata": {},
   "source": [
    "For piecewise constant scheduling, try this:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "id": "ff60dfdd-2e68-4f0e-8b6a-4988687b9825",
   "metadata": {},
   "outputs": [],
   "source": [
    "learning_rate = keras.optimizers.schedules.PiecewiseConstantDecay(\n",
    "    boundaries=[5. * n_steps_per_epoch, 15. * n_steps_per_epoch],\n",
    "    values=[0.01, 0.005, 0.001])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "070f7db2-8dcb-4a29-908c-8ba1f025f994",
   "metadata": {},
   "source": [
    "### 1Cycle scheduling"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "id": "8b1c3cd2-506e-413b-aae6-007ff7cd37fc",
   "metadata": {},
   "outputs": [],
   "source": [
    "K = keras.backend\n",
    "\n",
    "class ExponentialLearningRate(keras.callbacks.Callback):\n",
    "    def __init__(self, factor):\n",
    "        self.factor = factor\n",
    "        self.rates = []\n",
    "        self.losses = []\n",
    "    def on_batch_end(self, batch, logs):\n",
    "        self.rates.append(K.get_value(self.model.optimizer.learning_rate))\n",
    "        self.losses.append(logs[\"loss\"])\n",
    "        K.set_value(self.model.optimizer.learning_rate, self.model.optimizer.learning_rate * self.factor)\n",
    "\n",
    "def find_learning_rate(model, X, y, epochs=1, batch_size=32, min_rate=10**-5, max_rate=10):\n",
    "    init_weights = model.get_weights()\n",
    "    iterations = math.ceil(len(X) / batch_size) * epochs\n",
    "    factor = np.exp(np.log(max_rate / min_rate) / iterations)\n",
    "    init_lr = K.get_value(model.optimizer.learning_rate)\n",
    "    K.set_value(model.optimizer.learning_rate, min_rate)\n",
    "    exp_lr = ExponentialLearningRate(factor)\n",
    "    history = model.fit(X, y, epochs=epochs, batch_size=batch_size,\n",
    "                        callbacks=[exp_lr])\n",
    "    K.set_value(model.optimizer.learning_rate, init_lr)\n",
    "    model.set_weights(init_weights)\n",
    "    return exp_lr.rates, exp_lr.losses\n",
    "\n",
    "def plot_lr_vs_loss(rates, losses):\n",
    "    plt.plot(rates, losses)\n",
    "    plt.gca().set_xscale('log')\n",
    "    plt.hlines(min(losses), min(rates), max(rates))\n",
    "    plt.axis([min(rates), max(rates), min(losses), (losses[0] + min(losses)) / 2])\n",
    "    plt.xlabel(\"Learning rate\")\n",
    "    plt.ylabel(\"Loss\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dad84520-650b-4dfd-b947-2bab532f1912",
   "metadata": {},
   "source": [
    "**Warning**: In the `on_batch_end()` method, `logs[\"loss\"]` used to contain the batch loss, but in TensorFlow 2.2.0 it was replaced with the mean loss (since the start of the epoch). This explains why the graph below is much smoother than in the book (if you are using TF 2.2 or above). It also means that there is a lag between the moment the batch loss starts exploding and the moment the explosion becomes clear in the graph. So you should choose a slightly smaller learning rate than you would have chosen with the \"noisy\" graph. Alternatively, you can tweak the `ExponentialLearningRate` callback above so it computes the batch loss (based on the current mean loss and the previous mean loss):\n",
    "\n",
    "```python\n",
    "class ExponentialLearningRate(keras.callbacks.Callback):\n",
    "    def __init__(self, factor):\n",
    "        self.factor = factor\n",
    "        self.rates = []\n",
    "        self.losses = []\n",
    "    def on_epoch_begin(self, epoch, logs=None):\n",
    "        self.prev_loss = 0\n",
    "    def on_batch_end(self, batch, logs=None):\n",
    "        batch_loss = logs[\"loss\"] * (batch + 1) - self.prev_loss * batch\n",
    "        self.prev_loss = logs[\"loss\"]\n",
    "        self.rates.append(K.get_value(self.model.optimizer.learning_rate))\n",
    "        self.losses.append(batch_loss)\n",
    "        K.set_value(self.model.optimizer.learning_rate, self.model.optimizer.learning_rate * self.factor)\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "id": "fd5408d2-5d0d-46c9-a78e-dd79812585ed",
   "metadata": {},
   "outputs": [],
   "source": [
    "tf.random.set_seed(100)\n",
    "np.random.seed(100)\n",
    "\n",
    "model = keras.models.Sequential([\n",
    "    keras.layers.Flatten(input_shape=[28, 28]),\n",
    "    keras.layers.Dense(300, activation=\"selu\", kernel_initializer=\"lecun_normal\"),\n",
    "    keras.layers.Dense(100, activation=\"selu\", kernel_initializer=\"lecun_normal\"),\n",
    "    keras.layers.Dense(10, activation=\"softmax\")\n",
    "])\n",
    "model.compile(loss=\"sparse_categorical_crossentropy\",\n",
    "              optimizer=keras.optimizers.SGD(learning_rate=1e-3),\n",
    "              metrics=[\"accuracy\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "id": "58199658-3c29-4323-b41f-d66e04e818d1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "430/430 [==============================] - 3s 7ms/step - loss: nan - accuracy: 0.3750\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "batch_size = 128\n",
    "rates, losses = find_learning_rate(model, X_train_scaled, y_train, epochs=1, batch_size=batch_size)\n",
    "plot_lr_vs_loss(rates, losses)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "id": "cdfcb5e9-5fdf-4374-a9d5-e2fe604d40bb",
   "metadata": {},
   "outputs": [],
   "source": [
    "class OneCycleScheduler(keras.callbacks.Callback):\n",
    "    def __init__(self, iterations, max_rate, start_rate=None,\n",
    "                 last_iterations=None, last_rate=None):\n",
    "        self.iterations = iterations\n",
    "        self.max_rate = max_rate\n",
    "        self.start_rate = start_rate or max_rate / 10\n",
    "        self.last_iterations = last_iterations or iterations // 10 + 1\n",
    "        self.half_iteration = (iterations - self.last_iterations) // 2\n",
    "        self.last_rate = last_rate or self.start_rate / 1000\n",
    "        self.iteration = 0\n",
    "    def _interpolate(self, iter1, iter2, rate1, rate2):\n",
    "        return ((rate2 - rate1) * (self.iteration - iter1)\n",
    "                / (iter2 - iter1) + rate1)\n",
    "    def on_batch_begin(self, batch, logs):\n",
    "        if self.iteration < self.half_iteration:\n",
    "            rate = self._interpolate(0, self.half_iteration, self.start_rate, self.max_rate)\n",
    "        elif self.iteration < 2 * self.half_iteration:\n",
    "            rate = self._interpolate(self.half_iteration, 2 * self.half_iteration,\n",
    "                                     self.max_rate, self.start_rate)\n",
    "        else:\n",
    "            rate = self._interpolate(2 * self.half_iteration, self.iterations,\n",
    "                                     self.start_rate, self.last_rate)\n",
    "        self.iteration += 1\n",
    "        K.set_value(self.model.optimizer.learning_rate, rate)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "id": "76d8106d-b8db-4a75-b403-7a382f33b2c0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/25\n",
      "430/430 [==============================] - 3s 7ms/step - loss: 0.6569 - accuracy: 0.7738 - val_loss: 0.4886 - val_accuracy: 0.8344\n",
      "Epoch 2/25\n",
      "430/430 [==============================] - 3s 7ms/step - loss: 0.4629 - accuracy: 0.8375 - val_loss: 0.4345 - val_accuracy: 0.8522\n",
      "Epoch 3/25\n",
      "430/430 [==============================] - 4s 8ms/step - loss: 0.4170 - accuracy: 0.8546 - val_loss: 0.4212 - val_accuracy: 0.8464\n",
      "Epoch 4/25\n",
      "430/430 [==============================] - 3s 8ms/step - loss: 0.3881 - accuracy: 0.8634 - val_loss: 0.3902 - val_accuracy: 0.8652\n",
      "Epoch 5/25\n",
      "430/430 [==============================] - 3s 7ms/step - loss: 0.3660 - accuracy: 0.8695 - val_loss: 0.3870 - val_accuracy: 0.8636\n",
      "Epoch 6/25\n",
      "430/430 [==============================] - 3s 7ms/step - loss: 0.3464 - accuracy: 0.8769 - val_loss: 0.3699 - val_accuracy: 0.8710\n",
      "Epoch 7/25\n",
      "430/430 [==============================] - 3s 8ms/step - loss: 0.3306 - accuracy: 0.8825 - val_loss: 0.3513 - val_accuracy: 0.8762\n",
      "Epoch 8/25\n",
      "430/430 [==============================] - 3s 7ms/step - loss: 0.3166 - accuracy: 0.8857 - val_loss: 0.3470 - val_accuracy: 0.8770\n",
      "Epoch 9/25\n",
      "430/430 [==============================] - 3s 8ms/step - loss: 0.3054 - accuracy: 0.8888 - val_loss: 0.3597 - val_accuracy: 0.8712\n",
      "Epoch 10/25\n",
      "430/430 [==============================] - 3s 7ms/step - loss: 0.2901 - accuracy: 0.8941 - val_loss: 0.3430 - val_accuracy: 0.8772\n",
      "Epoch 11/25\n",
      "430/430 [==============================] - 3s 7ms/step - loss: 0.2804 - accuracy: 0.8973 - val_loss: 0.3760 - val_accuracy: 0.8672\n",
      "Epoch 12/25\n",
      "430/430 [==============================] - 3s 7ms/step - loss: 0.2678 - accuracy: 0.9025 - val_loss: 0.3571 - val_accuracy: 0.8732\n",
      "Epoch 13/25\n",
      "430/430 [==============================] - 3s 7ms/step - loss: 0.2523 - accuracy: 0.9095 - val_loss: 0.3301 - val_accuracy: 0.8834\n",
      "Epoch 14/25\n",
      "430/430 [==============================] - 3s 7ms/step - loss: 0.2365 - accuracy: 0.9144 - val_loss: 0.3349 - val_accuracy: 0.8824\n",
      "Epoch 15/25\n",
      "430/430 [==============================] - 3s 7ms/step - loss: 0.2236 - accuracy: 0.9197 - val_loss: 0.3278 - val_accuracy: 0.8852\n",
      "Epoch 16/25\n",
      "430/430 [==============================] - 3s 7ms/step - loss: 0.2128 - accuracy: 0.9238 - val_loss: 0.3145 - val_accuracy: 0.8884\n",
      "Epoch 17/25\n",
      "430/430 [==============================] - 3s 7ms/step - loss: 0.2029 - accuracy: 0.9277 - val_loss: 0.3163 - val_accuracy: 0.8884\n",
      "Epoch 18/25\n",
      "430/430 [==============================] - 3s 7ms/step - loss: 0.1946 - accuracy: 0.9308 - val_loss: 0.3203 - val_accuracy: 0.8866\n",
      "Epoch 19/25\n",
      "430/430 [==============================] - 3s 7ms/step - loss: 0.1860 - accuracy: 0.9351 - val_loss: 0.3188 - val_accuracy: 0.8862\n",
      "Epoch 20/25\n",
      "430/430 [==============================] - 3s 6ms/step - loss: 0.1791 - accuracy: 0.9371 - val_loss: 0.3136 - val_accuracy: 0.8902\n",
      "Epoch 21/25\n",
      "430/430 [==============================] - 3s 7ms/step - loss: 0.1723 - accuracy: 0.9401 - val_loss: 0.3076 - val_accuracy: 0.8938\n",
      "Epoch 22/25\n",
      "430/430 [==============================] - 3s 7ms/step - loss: 0.1668 - accuracy: 0.9434 - val_loss: 0.3098 - val_accuracy: 0.8946\n",
      "Epoch 23/25\n",
      "430/430 [==============================] - 3s 8ms/step - loss: 0.1623 - accuracy: 0.9448 - val_loss: 0.3096 - val_accuracy: 0.8926\n",
      "Epoch 24/25\n",
      "430/430 [==============================] - 3s 7ms/step - loss: 0.1595 - accuracy: 0.9463 - val_loss: 0.3072 - val_accuracy: 0.8934\n",
      "Epoch 25/25\n",
      "430/430 [==============================] - 3s 7ms/step - loss: 0.1575 - accuracy: 0.9472 - val_loss: 0.3074 - val_accuracy: 0.8930\n"
     ]
    }
   ],
   "source": [
    "n_epochs = 25\n",
    "onecycle = OneCycleScheduler(math.ceil(len(X_train) / batch_size) * n_epochs, max_rate=0.05)\n",
    "history = model.fit(X_train_scaled, y_train, epochs=n_epochs, batch_size=batch_size,\n",
    "                    validation_data=(X_valid_scaled, y_valid),\n",
    "                    callbacks=[onecycle])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2bee4c05-ebc7-48c3-832b-062883b0f505",
   "metadata": {},
   "source": [
    "# Avoiding Overfitting Through Regularization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e84a1a6e-9026-4232-a4fc-2560625d2244",
   "metadata": {},
   "source": [
    "## $\\ell_1$ and $\\ell_2$ regularization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "id": "68ce798f-2d82-4993-9baf-35a7119e7d44",
   "metadata": {},
   "outputs": [],
   "source": [
    "layer = keras.layers.Dense(100, activation=\"elu\",\n",
    "                           kernel_initializer=\"he_normal\",\n",
    "                           kernel_regularizer=keras.regularizers.l2(0.01))\n",
    "# or l1(0.1) for ℓ1 regularization with a factor of 0.1\n",
    "# or l1_l2(0.1, 0.01) for both ℓ1 and ℓ2 regularization, with factors 0.1 and 0.01 respectively"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "id": "830b65ba-835b-48b7-9cc3-60505621bda2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/2\n",
      "1719/1719 [==============================] - 12s 6ms/step - loss: 1.6128 - accuracy: 0.8132 - val_loss: 0.7131 - val_accuracy: 0.8284\n",
      "Epoch 2/2\n",
      "1719/1719 [==============================] - 9s 5ms/step - loss: 0.7169 - accuracy: 0.8287 - val_loss: 0.6829 - val_accuracy: 0.8402\n"
     ]
    }
   ],
   "source": [
    "model = keras.models.Sequential([\n",
    "    keras.layers.Flatten(input_shape=[28, 28]),\n",
    "    keras.layers.Dense(300, activation=\"elu\",\n",
    "                       kernel_initializer=\"he_normal\",\n",
    "                       kernel_regularizer=keras.regularizers.l2(0.01)),\n",
    "    keras.layers.Dense(100, activation=\"elu\",\n",
    "                       kernel_initializer=\"he_normal\",\n",
    "                       kernel_regularizer=keras.regularizers.l2(0.01)),\n",
    "    keras.layers.Dense(10, activation=\"softmax\",\n",
    "                       kernel_regularizer=keras.regularizers.l2(0.01)),\n",
    "])\n",
    "model.compile(loss=\"sparse_categorical_crossentropy\", optimizer=\"nadam\", metrics=[\"accuracy\"])\n",
    "n_epochs = 2\n",
    "history = model.fit(X_train_scaled, y_train, epochs=n_epochs,\n",
    "                    validation_data=(X_valid_scaled, y_valid))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "id": "324e1868-095b-46cb-a2de-9b0913fd63ac",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/2\n",
      "1719/1719 [==============================] - 11s 6ms/step - loss: 1.6861 - accuracy: 0.8120 - val_loss: 0.7166 - val_accuracy: 0.8290\n",
      "Epoch 2/2\n",
      "1719/1719 [==============================] - 10s 6ms/step - loss: 0.7192 - accuracy: 0.8271 - val_loss: 0.6847 - val_accuracy: 0.8398\n"
     ]
    }
   ],
   "source": [
    "from functools import partial\n",
    "\n",
    "RegularizedDense = partial(keras.layers.Dense,\n",
    "                           activation=\"elu\",\n",
    "                           kernel_initializer=\"he_normal\",\n",
    "                           kernel_regularizer=keras.regularizers.l2(0.01))\n",
    "\n",
    "model = keras.models.Sequential([\n",
    "    keras.layers.Flatten(input_shape=[28, 28]),\n",
    "    RegularizedDense(300),\n",
    "    RegularizedDense(100),\n",
    "    RegularizedDense(10, activation=\"softmax\")\n",
    "])\n",
    "model.compile(loss=\"sparse_categorical_crossentropy\", optimizer=\"nadam\", metrics=[\"accuracy\"])\n",
    "n_epochs = 2\n",
    "history = model.fit(X_train_scaled, y_train, epochs=n_epochs,\n",
    "                    validation_data=(X_valid_scaled, y_valid))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e7be93de-38a7-4626-8f60-8ce2b7cb1564",
   "metadata": {},
   "source": [
    "## Dropout"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "id": "c4cc63c9-2be4-45c5-98ef-3f4431f64287",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/2\n",
      "1719/1719 [==============================] - 19s 10ms/step - loss: 0.5744 - accuracy: 0.8030 - val_loss: 0.3486 - val_accuracy: 0.8726\n",
      "Epoch 2/2\n",
      "1719/1719 [==============================] - 13s 8ms/step - loss: 0.4197 - accuracy: 0.8452 - val_loss: 0.3430 - val_accuracy: 0.8686\n"
     ]
    }
   ],
   "source": [
    "model = keras.models.Sequential([\n",
    "    keras.layers.Flatten(input_shape=[28, 28]),\n",
    "    keras.layers.Dropout(rate=0.2),\n",
    "    keras.layers.Dense(300, activation=\"elu\", kernel_initializer=\"he_normal\"),\n",
    "    keras.layers.Dropout(rate=0.2),\n",
    "    keras.layers.Dense(100, activation=\"elu\", kernel_initializer=\"he_normal\"),\n",
    "    keras.layers.Dropout(rate=0.2),\n",
    "    keras.layers.Dense(10, activation=\"softmax\")\n",
    "])\n",
    "model.compile(loss=\"sparse_categorical_crossentropy\", optimizer=\"nadam\", metrics=[\"accuracy\"])\n",
    "n_epochs = 2\n",
    "history = model.fit(X_train_scaled, y_train, epochs=n_epochs,\n",
    "                    validation_data=(X_valid_scaled, y_valid))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "05fc4ae4-782b-4a83-af64-e4c2df3dbb29",
   "metadata": {},
   "source": [
    "## Alpha Dropout"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "id": "29d82150-bba2-4011-92bf-5d3647ecc214",
   "metadata": {},
   "outputs": [],
   "source": [
    "tf.random.set_seed(100)\n",
    "np.random.seed(100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "id": "90c3c84b-f32e-4f3f-8c54-94613867100f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/20\n",
      "1719/1719 [==============================] - 10s 6ms/step - loss: 0.6691 - accuracy: 0.7577 - val_loss: 0.5387 - val_accuracy: 0.8476\n",
      "Epoch 2/20\n",
      "1719/1719 [==============================] - 10s 6ms/step - loss: 0.5571 - accuracy: 0.7927 - val_loss: 0.5189 - val_accuracy: 0.8442\n",
      "Epoch 3/20\n",
      "1719/1719 [==============================] - 11s 7ms/step - loss: 0.5269 - accuracy: 0.8049 - val_loss: 0.5574 - val_accuracy: 0.8456\n",
      "Epoch 4/20\n",
      "1719/1719 [==============================] - 11s 6ms/step - loss: 0.5125 - accuracy: 0.8113 - val_loss: 0.5221 - val_accuracy: 0.8466\n",
      "Epoch 5/20\n",
      "1719/1719 [==============================] - 11s 6ms/step - loss: 0.4960 - accuracy: 0.8166 - val_loss: 0.4617 - val_accuracy: 0.8526\n",
      "Epoch 6/20\n",
      "1719/1719 [==============================] - 10s 6ms/step - loss: 0.4802 - accuracy: 0.8213 - val_loss: 0.4964 - val_accuracy: 0.8516\n",
      "Epoch 7/20\n",
      "1719/1719 [==============================] - 10s 6ms/step - loss: 0.4709 - accuracy: 0.8263 - val_loss: 0.4434 - val_accuracy: 0.8698\n",
      "Epoch 8/20\n",
      "1719/1719 [==============================] - 10s 6ms/step - loss: 0.4699 - accuracy: 0.8275 - val_loss: 0.4144 - val_accuracy: 0.8702\n",
      "Epoch 9/20\n",
      "1719/1719 [==============================] - 12s 7ms/step - loss: 0.4580 - accuracy: 0.8313 - val_loss: 0.4254 - val_accuracy: 0.8712\n",
      "Epoch 10/20\n",
      "1719/1719 [==============================] - 11s 6ms/step - loss: 0.4531 - accuracy: 0.8321 - val_loss: 0.4770 - val_accuracy: 0.8668\n",
      "Epoch 11/20\n",
      "1719/1719 [==============================] - 11s 6ms/step - loss: 0.4493 - accuracy: 0.8334 - val_loss: 0.4298 - val_accuracy: 0.8710\n",
      "Epoch 12/20\n",
      "1719/1719 [==============================] - 10s 6ms/step - loss: 0.4443 - accuracy: 0.8345 - val_loss: 0.4305 - val_accuracy: 0.8722\n",
      "Epoch 13/20\n",
      "1719/1719 [==============================] - 10s 6ms/step - loss: 0.4384 - accuracy: 0.8372 - val_loss: 0.4309 - val_accuracy: 0.8654\n",
      "Epoch 14/20\n",
      "1719/1719 [==============================] - 10s 6ms/step - loss: 0.4353 - accuracy: 0.8369 - val_loss: 0.4470 - val_accuracy: 0.8682\n",
      "Epoch 15/20\n",
      "1719/1719 [==============================] - 20s 11ms/step - loss: 0.4315 - accuracy: 0.8400 - val_loss: 0.4984 - val_accuracy: 0.8686\n",
      "Epoch 16/20\n",
      "1719/1719 [==============================] - 9s 5ms/step - loss: 0.4274 - accuracy: 0.8413 - val_loss: 0.4117 - val_accuracy: 0.8738\n",
      "Epoch 17/20\n",
      "1719/1719 [==============================] - 10s 6ms/step - loss: 0.4256 - accuracy: 0.8413 - val_loss: 0.3844 - val_accuracy: 0.8792\n",
      "Epoch 18/20\n",
      "1719/1719 [==============================] - 9s 5ms/step - loss: 0.4246 - accuracy: 0.8426 - val_loss: 0.4468 - val_accuracy: 0.8700\n",
      "Epoch 19/20\n",
      "1719/1719 [==============================] - 9s 5ms/step - loss: 0.4220 - accuracy: 0.8439 - val_loss: 0.4513 - val_accuracy: 0.8648\n",
      "Epoch 20/20\n",
      "1719/1719 [==============================] - 10s 6ms/step - loss: 0.4217 - accuracy: 0.8444 - val_loss: 0.4126 - val_accuracy: 0.8780\n"
     ]
    }
   ],
   "source": [
    "model = keras.models.Sequential([\n",
    "    keras.layers.Flatten(input_shape=[28, 28]),\n",
    "    keras.layers.AlphaDropout(rate=0.2),\n",
    "    keras.layers.Dense(300, activation=\"selu\", kernel_initializer=\"lecun_normal\"),\n",
    "    keras.layers.AlphaDropout(rate=0.2),\n",
    "    keras.layers.Dense(100, activation=\"selu\", kernel_initializer=\"lecun_normal\"),\n",
    "    keras.layers.AlphaDropout(rate=0.2),\n",
    "    keras.layers.Dense(10, activation=\"softmax\")\n",
    "])\n",
    "optimizer = keras.optimizers.SGD(learning_rate=0.01, momentum=0.9, nesterov=True)\n",
    "model.compile(loss=\"sparse_categorical_crossentropy\", optimizer=optimizer, metrics=[\"accuracy\"])\n",
    "n_epochs = 20\n",
    "history = model.fit(X_train_scaled, y_train, epochs=n_epochs,\n",
    "                 validation_data=(X_valid_scaled, y_valid))   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "id": "10fe840a-0265-4aaf-951a-da8e0ba5d88a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "313/313 [==============================] - 1s 3ms/step - loss: 0.4474 - accuracy: 0.8686\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[0.44743984937667847, 0.8686000108718872]"
      ]
     },
     "execution_count": 107,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.evaluate(X_test_scaled, y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "id": "6a88d7d1-fb8e-4fca-aff2-a37157b29e32",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1719/1719 [==============================] - 7s 4ms/step - loss: 0.3329 - accuracy: 0.8885\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[0.3329462707042694, 0.8885454535484314]"
      ]
     },
     "execution_count": 108,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.evaluate(X_train_scaled, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "id": "5e969306-f5c6-492a-b896-0f08eb797482",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1719/1719 [==============================] - 10s 6ms/step - loss: 0.4189 - accuracy: 0.8457\n"
     ]
    }
   ],
   "source": [
    "history = model.fit(X_train_scaled, y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a079a33e-ad8b-4b3c-9eb9-f2a75142c3b2",
   "metadata": {},
   "source": [
    "## MC Dropout"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "id": "bd608804-8ffc-494b-aa25-662a93053fb5",
   "metadata": {},
   "outputs": [],
   "source": [
    "tf.random.set_seed(100)\n",
    "np.random.seed(100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "id": "28f2ce3b-ab0d-497c-8e74-61b2fe4f5d2a",
   "metadata": {},
   "outputs": [],
   "source": [
    "y_probas = np.stack([model(X_test_scaled, training=True)\n",
    "                     for sample in range(100)])\n",
    "y_proba = y_probas.mean(axis=0)\n",
    "y_std = y_probas.std(axis=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "id": "8c5c44d2-cb7c-4170-87ac-bc4ac8339c7d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1/1 [==============================] - 0s 210ms/step\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([[0., 0., 0., 0., 0., 0., 0., 0., 0., 1.]], dtype=float32)"
      ]
     },
     "execution_count": 112,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.round(model.predict(X_test_scaled[:1]), 2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "id": "fcdebfe4-c71b-4b63-8ec9-f448870af948",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[[0.  , 0.  , 0.  , 0.  , 0.  , 0.03, 0.  , 0.51, 0.  , 0.46]],\n",
       "\n",
       "       [[0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.01, 0.  , 0.99]],\n",
       "\n",
       "       [[0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.02, 0.  , 0.98]],\n",
       "\n",
       "       [[0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.01, 0.  , 0.99]],\n",
       "\n",
       "       [[0.  , 0.  , 0.  , 0.  , 0.  , 0.01, 0.  , 0.26, 0.  , 0.74]],\n",
       "\n",
       "       [[0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 1.  ]],\n",
       "\n",
       "       [[0.  , 0.  , 0.  , 0.  , 0.  , 0.11, 0.  , 0.64, 0.  , 0.25]],\n",
       "\n",
       "       [[0.  , 0.  , 0.  , 0.  , 0.  , 0.48, 0.  , 0.05, 0.  , 0.47]],\n",
       "\n",
       "       [[0.  , 0.  , 0.  , 0.  , 0.  , 0.34, 0.  , 0.08, 0.  , 0.58]],\n",
       "\n",
       "       [[0.  , 0.  , 0.  , 0.  , 0.  , 0.01, 0.  , 0.  , 0.  , 0.99]],\n",
       "\n",
       "       [[0.  , 0.  , 0.  , 0.  , 0.  , 0.25, 0.  , 0.03, 0.  , 0.72]],\n",
       "\n",
       "       [[0.  , 0.  , 0.  , 0.  , 0.  , 0.02, 0.  , 0.02, 0.  , 0.96]],\n",
       "\n",
       "       [[0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.01, 0.  , 0.99]],\n",
       "\n",
       "       [[0.  , 0.  , 0.  , 0.  , 0.  , 0.06, 0.  , 0.13, 0.  , 0.81]],\n",
       "\n",
       "       [[0.  , 0.  , 0.  , 0.  , 0.  , 0.18, 0.  , 0.  , 0.  , 0.81]],\n",
       "\n",
       "       [[0.  , 0.  , 0.  , 0.  , 0.  , 0.03, 0.  , 0.  , 0.  , 0.97]],\n",
       "\n",
       "       [[0.  , 0.  , 0.  , 0.  , 0.  , 0.1 , 0.  , 0.67, 0.  , 0.22]],\n",
       "\n",
       "       [[0.  , 0.  , 0.  , 0.  , 0.  , 0.04, 0.  , 0.08, 0.  , 0.88]],\n",
       "\n",
       "       [[0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.04, 0.  , 0.96]],\n",
       "\n",
       "       [[0.  , 0.  , 0.  , 0.  , 0.  , 0.06, 0.  , 0.42, 0.  , 0.51]],\n",
       "\n",
       "       [[0.  , 0.  , 0.  , 0.  , 0.  , 0.13, 0.  , 0.17, 0.  , 0.7 ]],\n",
       "\n",
       "       [[0.  , 0.  , 0.  , 0.  , 0.  , 0.12, 0.  , 0.03, 0.  , 0.86]],\n",
       "\n",
       "       [[0.  , 0.  , 0.  , 0.  , 0.  , 0.3 , 0.  , 0.41, 0.  , 0.29]],\n",
       "\n",
       "       [[0.  , 0.  , 0.  , 0.  , 0.  , 0.01, 0.  , 0.15, 0.  , 0.84]],\n",
       "\n",
       "       [[0.  , 0.  , 0.  , 0.  , 0.  , 0.01, 0.  , 0.06, 0.  , 0.93]],\n",
       "\n",
       "       [[0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.62, 0.  , 0.38]],\n",
       "\n",
       "       [[0.  , 0.  , 0.  , 0.  , 0.  , 0.03, 0.  , 0.01, 0.  , 0.95]],\n",
       "\n",
       "       [[0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.02, 0.  , 0.97]],\n",
       "\n",
       "       [[0.  , 0.  , 0.  , 0.  , 0.  , 0.69, 0.  , 0.09, 0.  , 0.22]],\n",
       "\n",
       "       [[0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.16, 0.  , 0.84]],\n",
       "\n",
       "       [[0.  , 0.  , 0.  , 0.  , 0.  , 0.11, 0.  , 0.17, 0.  , 0.72]],\n",
       "\n",
       "       [[0.  , 0.  , 0.  , 0.  , 0.  , 0.01, 0.  , 0.37, 0.  , 0.62]],\n",
       "\n",
       "       [[0.  , 0.  , 0.  , 0.  , 0.  , 0.15, 0.  , 0.03, 0.  , 0.83]],\n",
       "\n",
       "       [[0.  , 0.  , 0.  , 0.  , 0.  , 0.02, 0.  , 0.12, 0.  , 0.86]],\n",
       "\n",
       "       [[0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.01, 0.  , 0.99]],\n",
       "\n",
       "       [[0.  , 0.  , 0.  , 0.  , 0.  , 0.01, 0.  , 0.06, 0.  , 0.93]],\n",
       "\n",
       "       [[0.  , 0.  , 0.  , 0.  , 0.  , 0.03, 0.  , 0.15, 0.  , 0.82]],\n",
       "\n",
       "       [[0.  , 0.  , 0.  , 0.  , 0.  , 0.02, 0.  , 0.  , 0.  , 0.97]],\n",
       "\n",
       "       [[0.  , 0.  , 0.  , 0.  , 0.  , 0.01, 0.  , 0.03, 0.  , 0.96]],\n",
       "\n",
       "       [[0.  , 0.  , 0.  , 0.  , 0.  , 0.6 , 0.  , 0.1 , 0.  , 0.31]],\n",
       "\n",
       "       [[0.  , 0.  , 0.  , 0.  , 0.  , 0.04, 0.  , 0.02, 0.  , 0.94]],\n",
       "\n",
       "       [[0.  , 0.  , 0.  , 0.  , 0.  , 0.01, 0.  , 0.14, 0.  , 0.85]],\n",
       "\n",
       "       [[0.  , 0.  , 0.  , 0.  , 0.  , 0.12, 0.  , 0.18, 0.  , 0.7 ]],\n",
       "\n",
       "       [[0.  , 0.  , 0.  , 0.  , 0.  , 0.03, 0.  , 0.  , 0.  , 0.96]],\n",
       "\n",
       "       [[0.  , 0.  , 0.  , 0.  , 0.  , 0.66, 0.  , 0.33, 0.  , 0.01]],\n",
       "\n",
       "       [[0.  , 0.  , 0.  , 0.  , 0.  , 0.04, 0.  , 0.38, 0.  , 0.58]],\n",
       "\n",
       "       [[0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 1.  ]],\n",
       "\n",
       "       [[0.  , 0.  , 0.  , 0.  , 0.  , 0.01, 0.  , 0.59, 0.  , 0.41]],\n",
       "\n",
       "       [[0.  , 0.  , 0.  , 0.  , 0.  , 0.01, 0.  , 0.07, 0.  , 0.92]],\n",
       "\n",
       "       [[0.  , 0.  , 0.  , 0.  , 0.  , 0.05, 0.  , 0.9 , 0.  , 0.05]],\n",
       "\n",
       "       [[0.  , 0.  , 0.  , 0.  , 0.  , 0.01, 0.  , 0.03, 0.  , 0.96]],\n",
       "\n",
       "       [[0.  , 0.  , 0.  , 0.  , 0.  , 0.06, 0.  , 0.16, 0.  , 0.77]],\n",
       "\n",
       "       [[0.  , 0.  , 0.  , 0.  , 0.  , 0.12, 0.  , 0.02, 0.  , 0.86]],\n",
       "\n",
       "       [[0.  , 0.  , 0.  , 0.  , 0.  , 0.21, 0.  , 0.1 , 0.  , 0.69]],\n",
       "\n",
       "       [[0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.02, 0.  , 0.98]],\n",
       "\n",
       "       [[0.  , 0.  , 0.  , 0.  , 0.  , 0.01, 0.  , 0.01, 0.  , 0.97]],\n",
       "\n",
       "       [[0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.01, 0.  , 0.99]],\n",
       "\n",
       "       [[0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 1.  ]],\n",
       "\n",
       "       [[0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.01, 0.  , 0.99]],\n",
       "\n",
       "       [[0.  , 0.  , 0.  , 0.  , 0.  , 0.06, 0.  , 0.  , 0.  , 0.94]],\n",
       "\n",
       "       [[0.  , 0.  , 0.  , 0.  , 0.  , 0.06, 0.  , 0.46, 0.  , 0.47]],\n",
       "\n",
       "       [[0.  , 0.  , 0.  , 0.  , 0.  , 0.21, 0.  , 0.49, 0.  , 0.3 ]],\n",
       "\n",
       "       [[0.  , 0.  , 0.  , 0.  , 0.  , 0.01, 0.  , 0.17, 0.  , 0.82]],\n",
       "\n",
       "       [[0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.07, 0.  , 0.92]],\n",
       "\n",
       "       [[0.  , 0.  , 0.  , 0.  , 0.  , 0.01, 0.  , 0.02, 0.  , 0.97]],\n",
       "\n",
       "       [[0.  , 0.  , 0.  , 0.  , 0.  , 0.01, 0.  , 0.54, 0.  , 0.44]],\n",
       "\n",
       "       [[0.  , 0.  , 0.  , 0.  , 0.  , 0.01, 0.  , 0.12, 0.  , 0.87]],\n",
       "\n",
       "       [[0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.12, 0.  , 0.88]],\n",
       "\n",
       "       [[0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 1.  ]],\n",
       "\n",
       "       [[0.  , 0.  , 0.  , 0.  , 0.  , 0.03, 0.  , 0.02, 0.  , 0.95]],\n",
       "\n",
       "       [[0.  , 0.  , 0.  , 0.  , 0.  , 0.05, 0.  , 0.01, 0.  , 0.94]],\n",
       "\n",
       "       [[0.  , 0.  , 0.  , 0.  , 0.  , 0.11, 0.  , 0.1 , 0.  , 0.8 ]],\n",
       "\n",
       "       [[0.  , 0.  , 0.  , 0.  , 0.  , 0.01, 0.  , 0.03, 0.  , 0.95]],\n",
       "\n",
       "       [[0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.04, 0.  , 0.95]],\n",
       "\n",
       "       [[0.  , 0.  , 0.  , 0.  , 0.  , 0.14, 0.  , 0.39, 0.  , 0.46]],\n",
       "\n",
       "       [[0.  , 0.  , 0.  , 0.  , 0.  , 0.03, 0.  , 0.12, 0.  , 0.85]],\n",
       "\n",
       "       [[0.  , 0.  , 0.  , 0.  , 0.  , 0.17, 0.  , 0.03, 0.  , 0.8 ]],\n",
       "\n",
       "       [[0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.6 , 0.  , 0.4 ]],\n",
       "\n",
       "       [[0.  , 0.  , 0.  , 0.  , 0.  , 0.02, 0.  , 0.01, 0.  , 0.98]],\n",
       "\n",
       "       [[0.  , 0.  , 0.  , 0.  , 0.  , 0.02, 0.  , 0.04, 0.  , 0.94]],\n",
       "\n",
       "       [[0.  , 0.  , 0.  , 0.  , 0.  , 0.08, 0.  , 0.48, 0.  , 0.44]],\n",
       "\n",
       "       [[0.  , 0.  , 0.  , 0.  , 0.  , 0.47, 0.  , 0.15, 0.  , 0.38]],\n",
       "\n",
       "       [[0.  , 0.  , 0.  , 0.  , 0.  , 0.05, 0.  , 0.  , 0.  , 0.95]],\n",
       "\n",
       "       [[0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.62, 0.  , 0.38]],\n",
       "\n",
       "       [[0.  , 0.  , 0.  , 0.  , 0.  , 0.21, 0.  , 0.59, 0.  , 0.19]],\n",
       "\n",
       "       [[0.  , 0.  , 0.  , 0.  , 0.  , 0.01, 0.  , 0.03, 0.  , 0.96]],\n",
       "\n",
       "       [[0.  , 0.  , 0.  , 0.  , 0.  , 0.08, 0.  , 0.43, 0.  , 0.48]],\n",
       "\n",
       "       [[0.  , 0.  , 0.  , 0.  , 0.  , 0.59, 0.  , 0.2 , 0.  , 0.22]],\n",
       "\n",
       "       [[0.  , 0.  , 0.  , 0.  , 0.  , 0.14, 0.  , 0.01, 0.  , 0.85]],\n",
       "\n",
       "       [[0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.01, 0.  , 0.99]],\n",
       "\n",
       "       [[0.  , 0.  , 0.  , 0.  , 0.  , 0.14, 0.  , 0.05, 0.  , 0.82]],\n",
       "\n",
       "       [[0.  , 0.  , 0.  , 0.  , 0.  , 0.01, 0.  , 0.2 , 0.  , 0.79]],\n",
       "\n",
       "       [[0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.99]],\n",
       "\n",
       "       [[0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 1.  ]],\n",
       "\n",
       "       [[0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 1.  ]],\n",
       "\n",
       "       [[0.  , 0.  , 0.  , 0.  , 0.  , 0.01, 0.  , 0.17, 0.  , 0.81]],\n",
       "\n",
       "       [[0.  , 0.  , 0.  , 0.  , 0.  , 0.39, 0.  , 0.04, 0.  , 0.58]],\n",
       "\n",
       "       [[0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.47, 0.  , 0.53]],\n",
       "\n",
       "       [[0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.06, 0.  , 0.93]],\n",
       "\n",
       "       [[0.  , 0.  , 0.  , 0.  , 0.  , 0.01, 0.  , 0.01, 0.  , 0.98]]],\n",
       "      dtype=float32)"
      ]
     },
     "execution_count": 113,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.round(y_probas[:, :1], 2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "id": "28fb7371-e4a0-448c-866c-9ab4cb51e605",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.  , 0.  , 0.  , 0.  , 0.  , 0.09, 0.  , 0.16, 0.  , 0.76]],\n",
       "      dtype=float32)"
      ]
     },
     "execution_count": 114,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.round(y_proba[:1], 2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "id": "5d32f6d0-52e2-4a46-9cae-f9962169fc60",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.  , 0.  , 0.  , 0.  , 0.  , 0.15, 0.  , 0.2 , 0.  , 0.26]],\n",
       "      dtype=float32)"
      ]
     },
     "execution_count": 115,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_std = y_probas.std(axis=0)\n",
    "np.round(y_std[:1], 2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "id": "c82b07e3-8bfe-430b-a5fd-665cd2eb6e93",
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred = np.argmax(y_proba, axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "id": "d891c7b1-bab3-43c1-95a3-c239da1104b2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8711"
      ]
     },
     "execution_count": 117,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "accuracy = np.sum(y_pred == y_test) / len(y_test)\n",
    "accuracy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "id": "49493911-9aa6-4417-9b83-0e2bebb0cdc2",
   "metadata": {},
   "outputs": [],
   "source": [
    "class MCDropout(keras.layers.Dropout):\n",
    "    def call(self, inputs):\n",
    "        return super().call(inputs, training=True)\n",
    "\n",
    "class MCAlphaDropout(keras.layers.AlphaDropout):\n",
    "    def call(self, inputs):\n",
    "        return super().call(inputs, training=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "id": "81cf26f8-a0e1-407b-96cb-0145499a85a9",
   "metadata": {},
   "outputs": [],
   "source": [
    "tf.random.set_seed(100)\n",
    "np.random.seed(100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "id": "b78e780b-0fa3-496a-b973-1b10c6c6bfaa",
   "metadata": {},
   "outputs": [],
   "source": [
    "mc_model = keras.models.Sequential([\n",
    "    MCAlphaDropout(layer.rate) if isinstance(layer, keras.layers.AlphaDropout) else layer\n",
    "    for layer in model.layers\n",
    "])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "id": "cd702d75-b29f-4f7d-9ed3-127e6f7fe9d0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential_21\"\n",
      "_________________________________________________________________\n",
      " Layer (type)                Output Shape              Param #   \n",
      "=================================================================\n",
      " flatten_18 (Flatten)        (None, 784)               0         \n",
      "                                                                 \n",
      " mc_alpha_dropout (MCAlphaDr  (None, 784)              0         \n",
      " opout)                                                          \n",
      "                                                                 \n",
      " dense_263 (Dense)           (None, 300)               235500    \n",
      "                                                                 \n",
      " mc_alpha_dropout_1 (MCAlpha  (None, 300)              0         \n",
      " Dropout)                                                        \n",
      "                                                                 \n",
      " dense_264 (Dense)           (None, 100)               30100     \n",
      "                                                                 \n",
      " mc_alpha_dropout_2 (MCAlpha  (None, 100)              0         \n",
      " Dropout)                                                        \n",
      "                                                                 \n",
      " dense_265 (Dense)           (None, 10)                1010      \n",
      "                                                                 \n",
      "=================================================================\n",
      "Total params: 266,610\n",
      "Trainable params: 266,610\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "mc_model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "id": "25909eca-ea42-4b62-a1e4-43ca7228297b",
   "metadata": {},
   "outputs": [],
   "source": [
    "optimizer = keras.optimizers.SGD(learning_rate=0.01, momentum=0.9, nesterov=True)\n",
    "mc_model.compile(loss=\"sparse_categorical_crossentropy\", optimizer=optimizer, metrics=[\"accuracy\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "id": "46175131-e58a-49ae-8084-323ae813afea",
   "metadata": {},
   "outputs": [],
   "source": [
    "mc_model.set_weights(model.get_weights())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "68985548-e75a-47fc-8660-ad367ba335ef",
   "metadata": {},
   "source": [
    "Now we can use the model with MC Dropout:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "id": "94300513-3c16-4e0f-95b5-666487c36eda",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1/1 [==============================] - 0s 170ms/step\n",
      "1/1 [==============================] - 0s 28ms/step\n",
      "1/1 [==============================] - 0s 29ms/step\n",
      "1/1 [==============================] - 0s 24ms/step\n",
      "1/1 [==============================] - 0s 26ms/step\n",
      "1/1 [==============================] - 0s 27ms/step\n",
      "1/1 [==============================] - 0s 27ms/step\n",
      "1/1 [==============================] - 0s 25ms/step\n",
      "1/1 [==============================] - 0s 26ms/step\n",
      "1/1 [==============================] - 0s 31ms/step\n",
      "1/1 [==============================] - 0s 27ms/step\n",
      "1/1 [==============================] - 0s 32ms/step\n",
      "1/1 [==============================] - 0s 25ms/step\n",
      "1/1 [==============================] - 0s 25ms/step\n",
      "1/1 [==============================] - 0s 23ms/step\n",
      "1/1 [==============================] - 0s 23ms/step\n",
      "1/1 [==============================] - 0s 26ms/step\n",
      "1/1 [==============================] - 0s 34ms/step\n",
      "1/1 [==============================] - 0s 32ms/step\n",
      "1/1 [==============================] - 0s 38ms/step\n",
      "1/1 [==============================] - 0s 30ms/step\n",
      "1/1 [==============================] - 0s 25ms/step\n",
      "1/1 [==============================] - 0s 25ms/step\n",
      "1/1 [==============================] - 0s 25ms/step\n",
      "1/1 [==============================] - 0s 35ms/step\n",
      "1/1 [==============================] - 0s 33ms/step\n",
      "1/1 [==============================] - 0s 26ms/step\n",
      "1/1 [==============================] - 0s 25ms/step\n",
      "1/1 [==============================] - 0s 28ms/step\n",
      "1/1 [==============================] - 0s 36ms/step\n",
      "1/1 [==============================] - 0s 28ms/step\n",
      "1/1 [==============================] - 0s 31ms/step\n",
      "1/1 [==============================] - 0s 28ms/step\n",
      "1/1 [==============================] - 0s 24ms/step\n",
      "1/1 [==============================] - 0s 27ms/step\n",
      "1/1 [==============================] - 0s 25ms/step\n",
      "1/1 [==============================] - 0s 28ms/step\n",
      "1/1 [==============================] - 0s 28ms/step\n",
      "1/1 [==============================] - 0s 37ms/step\n",
      "1/1 [==============================] - 0s 35ms/step\n",
      "1/1 [==============================] - 0s 34ms/step\n",
      "1/1 [==============================] - 0s 34ms/step\n",
      "1/1 [==============================] - 0s 37ms/step\n",
      "1/1 [==============================] - 0s 27ms/step\n",
      "1/1 [==============================] - 0s 25ms/step\n",
      "1/1 [==============================] - 0s 25ms/step\n",
      "1/1 [==============================] - 0s 25ms/step\n",
      "1/1 [==============================] - 0s 28ms/step\n",
      "1/1 [==============================] - 0s 32ms/step\n",
      "1/1 [==============================] - 0s 36ms/step\n",
      "1/1 [==============================] - 0s 30ms/step\n",
      "1/1 [==============================] - 0s 35ms/step\n",
      "1/1 [==============================] - 0s 35ms/step\n",
      "1/1 [==============================] - 0s 25ms/step\n",
      "1/1 [==============================] - 0s 34ms/step\n",
      "1/1 [==============================] - 0s 32ms/step\n",
      "1/1 [==============================] - 0s 30ms/step\n",
      "1/1 [==============================] - 0s 28ms/step\n",
      "1/1 [==============================] - 0s 27ms/step\n",
      "1/1 [==============================] - 0s 24ms/step\n",
      "1/1 [==============================] - 0s 29ms/step\n",
      "1/1 [==============================] - 0s 29ms/step\n",
      "1/1 [==============================] - 0s 24ms/step\n",
      "1/1 [==============================] - 0s 25ms/step\n",
      "1/1 [==============================] - 0s 27ms/step\n",
      "1/1 [==============================] - 0s 30ms/step\n",
      "1/1 [==============================] - 0s 26ms/step\n",
      "1/1 [==============================] - 0s 37ms/step\n",
      "1/1 [==============================] - 0s 35ms/step\n",
      "1/1 [==============================] - 0s 35ms/step\n",
      "1/1 [==============================] - 0s 35ms/step\n",
      "1/1 [==============================] - 0s 26ms/step\n",
      "1/1 [==============================] - 0s 27ms/step\n",
      "1/1 [==============================] - 0s 25ms/step\n",
      "1/1 [==============================] - 0s 27ms/step\n",
      "1/1 [==============================] - 0s 33ms/step\n",
      "1/1 [==============================] - 0s 29ms/step\n",
      "1/1 [==============================] - 0s 28ms/step\n",
      "1/1 [==============================] - 0s 25ms/step\n",
      "1/1 [==============================] - 0s 26ms/step\n",
      "1/1 [==============================] - 0s 33ms/step\n",
      "1/1 [==============================] - 0s 35ms/step\n",
      "1/1 [==============================] - 0s 28ms/step\n",
      "1/1 [==============================] - 0s 24ms/step\n",
      "1/1 [==============================] - 0s 27ms/step\n",
      "1/1 [==============================] - 0s 28ms/step\n",
      "1/1 [==============================] - 0s 29ms/step\n",
      "1/1 [==============================] - 0s 25ms/step\n",
      "1/1 [==============================] - 0s 33ms/step\n",
      "1/1 [==============================] - 0s 33ms/step\n",
      "1/1 [==============================] - 0s 26ms/step\n",
      "1/1 [==============================] - 0s 30ms/step\n",
      "1/1 [==============================] - 0s 35ms/step\n",
      "1/1 [==============================] - 0s 27ms/step\n",
      "1/1 [==============================] - 0s 28ms/step\n",
      "1/1 [==============================] - 0s 29ms/step\n",
      "1/1 [==============================] - 0s 28ms/step\n",
      "1/1 [==============================] - 0s 24ms/step\n",
      "1/1 [==============================] - 0s 27ms/step\n",
      "1/1 [==============================] - 0s 25ms/step\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([[0.  , 0.  , 0.  , 0.  , 0.  , 0.08, 0.  , 0.14, 0.  , 0.78]],\n",
       "      dtype=float32)"
      ]
     },
     "execution_count": 124,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.round(np.mean([mc_model.predict(X_test_scaled[:1]) for sample in range(100)], axis=0), 2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "94ee4750-ce57-4ce8-a2bd-d30dce04501c",
   "metadata": {},
   "source": [
    "## Max norm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "id": "8a1ca84d-e18c-4974-b81d-704f0b34f250",
   "metadata": {},
   "outputs": [],
   "source": [
    "layer = keras.layers.Dense(100, activation=\"selu\", kernel_initializer=\"lecun_normal\",\n",
    "                           kernel_constraint=keras.constraints.max_norm(1.))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "id": "01c52c02-66f2-4698-a75e-4aa892bceebe",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/2\n",
      "1719/1719 [==============================] - 12s 6ms/step - loss: 0.4734 - accuracy: 0.8341 - val_loss: 0.3580 - val_accuracy: 0.8716\n",
      "Epoch 2/2\n",
      "1719/1719 [==============================] - 12s 7ms/step - loss: 0.3538 - accuracy: 0.8709 - val_loss: 0.3497 - val_accuracy: 0.8718\n"
     ]
    }
   ],
   "source": [
    "MaxNormDense = partial(keras.layers.Dense,\n",
    "                       activation=\"selu\", kernel_initializer=\"lecun_normal\",\n",
    "                       kernel_constraint=keras.constraints.max_norm(1.))\n",
    "\n",
    "model = keras.models.Sequential([\n",
    "    keras.layers.Flatten(input_shape=[28, 28]),\n",
    "    MaxNormDense(300),\n",
    "    MaxNormDense(100),\n",
    "    keras.layers.Dense(10, activation=\"softmax\")\n",
    "])\n",
    "model.compile(loss=\"sparse_categorical_crossentropy\", optimizer=\"nadam\", metrics=[\"accuracy\"])\n",
    "n_epochs = 2\n",
    "history = model.fit(X_train_scaled, y_train, epochs=n_epochs,\n",
    "                    validation_data=(X_valid_scaled, y_valid))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
