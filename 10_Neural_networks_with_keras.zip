{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "08fbc3f7-d77d-4e17-b502-00fd606af73f",
   "metadata": {},
   "source": [
    "# Setup"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "288c2101-b7be-47d7-bad2-3dd3b5c5e1bd",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-09-16 05:00:08.992759: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 FMA\n",
      "To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.\n",
      "2024-09-16 05:00:09.248564: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libcudart.so.11.0'; dlerror: libcudart.so.11.0: cannot open shared object file: No such file or directory\n",
      "2024-09-16 05:00:09.248633: I tensorflow/stream_executor/cuda/cudart_stub.cc:29] Ignore above cudart dlerror if you do not have a GPU set up on your machine.\n",
      "2024-09-16 05:00:09.333632: E tensorflow/stream_executor/cuda/cuda_blas.cc:2981] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n",
      "2024-09-16 05:00:10.712454: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libnvinfer.so.7'; dlerror: libnvinfer.so.7: cannot open shared object file: No such file or directory\n",
      "2024-09-16 05:00:10.712628: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libnvinfer_plugin.so.7'; dlerror: libnvinfer_plugin.so.7: cannot open shared object file: No such file or directory\n",
      "2024-09-16 05:00:10.712654: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:38] TF-TRT Warning: Cannot dlopen some TensorRT libraries. If you would like to use Nvidia GPU with TensorRT, please make sure the missing libraries mentioned above are installed properly.\n"
     ]
    }
   ],
   "source": [
    "import sys\n",
    "assert sys.version_info >= (3, 5)\n",
    "\n",
    "import sklearn\n",
    "assert sklearn.__version__ >= \"0.20\"\n",
    "\n",
    "try:\n",
    "    %tensorflow_version 2.x\n",
    "except Exception:\n",
    "    pass\n",
    "\n",
    "import tensorflow as tf\n",
    "assert tf.__version__ > \"2.0\"\n",
    "\n",
    "import numpy as np\n",
    "import os\n",
    "\n",
    "np.random.seed(100)\n",
    "\n",
    "%matplotlib inline\n",
    "import matplotlib as mpl\n",
    "import matplotlib.pyplot as plt\n",
    "mpl.rc('axes', labelsize=14)\n",
    "mpl.rc('xtick', labelsize=12)\n",
    "mpl.rc('ytick', labelsize=12)\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")\n",
    "\n",
    "PROJECT_ROOT_DIR = \".\"\n",
    "CHAPTER_ID = \"ann\"\n",
    "IMAGES_PATH = os.path.join(PROJECT_ROOT_DIR, \"images\", CHAPTER_ID)\n",
    "os.makedirs(IMAGES_PATH, exist_ok=True)\n",
    "\n",
    "def save_fig(fig_id, tight_layout=True, fig_extension=\"png\", resolution=300):\n",
    "    path = os.path.join(IMAGES_PATH, fig_id + \".\" + fig_extension)\n",
    "    print(\"Saving figure\", fig_id)\n",
    "    if tight_layout:\n",
    "        plt.tight_layout()\n",
    "    plt.savefig(path, format=fig_extension, dpi=resolution)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6acf8f35-806a-45ab-8d64-2352a19941e3",
   "metadata": {},
   "source": [
    "# Perceptrons"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "82727c92-2519-4be6-9857-3b8ab41abb00",
   "metadata": {},
   "source": [
    "**Note**: we set `max_iter` and `tol` explicitly to avoid warnings about the fact that their default value will change in future versions of Scikit-Learn."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "091dc5c9-6a54-4620-94eb-75b7cb2acd9a",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from sklearn.datasets import load_iris\n",
    "from sklearn.linear_model import Perceptron\n",
    "\n",
    "iris = load_iris()\n",
    "X = iris.data[:, (2, 3)]\n",
    "y = (iris.target == 0).astype(np.int32)\n",
    "\n",
    "per_clf = Perceptron(max_iter=1000, tol=1e-3, random_state=100)\n",
    "per_clf.fit(X, y)\n",
    "\n",
    "y_pred = per_clf.predict([[2, 0.5]])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "5f6ce18a-ca4f-4dbd-978d-002235d9b7ff",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1], dtype=int32)"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_pred"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "996af44e-f67d-4c13-9fcf-17579f466f92",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Saving figure perceptron_iris_plot\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1000x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "a = -per_clf.coef_[0][0] / per_clf.coef_[0][1]\n",
    "b = -per_clf.intercept_ / per_clf.coef_[0][1]\n",
    "\n",
    "axes = [0, 5, 0, 2]\n",
    "\n",
    "x0, x1 = np.meshgrid(\n",
    "    np.linspace(axes[0], axes[1], 500).reshape(-1, 1),\n",
    "    np.linspace(axes[2], axes[3], 200).reshape(-1, 1),\n",
    ")\n",
    "X_new = np.c_[x0.ravel(), x1.ravel()]\n",
    "y_predict = per_clf.predict(X_new)\n",
    "zz = y_predict.reshape(x0.shape)\n",
    "\n",
    "plt.figure(figsize=(10, 4))\n",
    "plt.plot(X[y==0, 0], X[y==0, 1], \"bs\", label=\"Not Iris-Setosa\")\n",
    "plt.plot(X[y==1, 0], X[y==1, 1], \"yo\", label=\"Iris-Setosa\")\n",
    "\n",
    "plt.plot([axes[0], axes[1]], [a*axes[0] + b, a*axes[1] + b], \"k-\", linewidth=3)\n",
    "from matplotlib.colors import ListedColormap\n",
    "custom_cmap = ListedColormap(['#9898ff', '#fafab0'])\n",
    "\n",
    "plt.contourf(x0, x1, zz, cmap=custom_cmap)\n",
    "plt.xlabel(\"Petal length\", fontsize=14)\n",
    "plt.ylabel(\"Petal width\", fontsize=14)\n",
    "plt.legend(loc=\"lower right\", fontsize=14)\n",
    "plt.axis(axes)\n",
    "\n",
    "save_fig(\"perceptron_iris_plot\")    "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4f406847-6dc6-4560-ab3e-e478a4fdf48e",
   "metadata": {},
   "source": [
    "# Activation functions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "d18fb285-0301-4afc-bb3b-188d30da463d",
   "metadata": {},
   "outputs": [],
   "source": [
    "def sigmoid(z):\n",
    "    return 1 / (1 + np.exp(-z))\n",
    "\n",
    "def relu(z):\n",
    "    return np.maximum(0, z)\n",
    "\n",
    "def derivative(f, z, eps = 1e-6):\n",
    "    return (f(z + eps) - f(z - eps))/(2 * eps)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "ee427358-30f6-4feb-86a1-93b8679244cb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Saving figure activation_functions_plot\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1100x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "z = np.linspace(-5, 5, 200)\n",
    "\n",
    "plt.figure(figsize=(11, 4))\n",
    "\n",
    "plt.subplot(121)\n",
    "plt.plot(z, np.sign(z), \"r-\", linewidth=1, label=\"Step\")\n",
    "plt.plot(z, sigmoid(z), \"g--\", linewidth=2, label=\"Sigmoid\")\n",
    "plt.plot(z, np.tanh(z), \"b--\", linewidth=2, label=\"Tanh\")\n",
    "plt.plot(z, relu(z), \"m--\", linewidth=2, label=\"ReLU\")\n",
    "plt.grid(True)\n",
    "plt.legend(loc=\"center right\", fontsize=14)\n",
    "plt.title(\"Activation functions\", fontsize=14)\n",
    "plt.axis([-5, 5, -1.2, 1.2])\n",
    "\n",
    "plt.subplot(122)\n",
    "plt.plot(z, derivative(np.sign, z), \"r-\", linewidth=1, label=\"Step\")\n",
    "plt.plot(0, 0, \"ro\", markersize=5)\n",
    "plt.plot(0, 0, \"rx\", markersize=10)\n",
    "plt.plot(z, derivative(sigmoid, z), \"g--\", linewidth=2, label=\"Sigmoid\")\n",
    "plt.plot(z, derivative(np.tanh, z), \"b--\", linewidth=2, label=\"Tanh\")\n",
    "plt.plot(z, derivative(relu, z), \"m--\", linewidth=2, label=\"ReLU\")\n",
    "plt.grid(True)\n",
    "plt.legend(loc=\"center right\", fontsize=14)\n",
    "plt.title(\"Derivatives\", fontsize=14)\n",
    "plt.axis([-5, 5, -0.2, 1.2])\n",
    "\n",
    "save_fig(\"activation_functions_plot\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "60128825-6853-4c7e-bd5a-06a191c67578",
   "metadata": {},
   "outputs": [],
   "source": [
    "def heaviside(z):\n",
    "    return (z >= 0).astype(z.dtype)\n",
    "\n",
    "def mlp_xor(x1, x2, activation=heaviside):\n",
    "    return activation(-activation(x1 + x2 - 1.5) + activation(x1 + x2 - 0.5) -0.5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "6b5348b6-5d9d-4347-a275-a56ccbdcf3ec",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1000x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "x1s = np.linspace(-0.2, 1.2, 100)\n",
    "x2s = np.linspace(-0.2, 1.2, 100)\n",
    "x1, x2 = np.meshgrid(x1s, x2s)\n",
    "\n",
    "z1 = mlp_xor(x1, x2, activation=heaviside)\n",
    "z2 = mlp_xor(x1, x2, activation=sigmoid)\n",
    "\n",
    "plt.figure(figsize=(10, 4))\n",
    "\n",
    "plt.subplot(121)\n",
    "plt.contourf(x1, x2, z1)\n",
    "plt.plot([0, 1], [0, 1], \"gs\", markersize=20)\n",
    "plt.plot([0, 1], [1, 0], \"y^\", markersize=20)\n",
    "plt.title(\"Acitvation function: heaviside\", fontsize=14)\n",
    "plt.grid(True)\n",
    "\n",
    "plt.subplot(122)\n",
    "plt.contourf(x1, x2, z2)\n",
    "plt.plot([0, 1], [0, 1], \"gs\", markersize=20)\n",
    "plt.plot([0, 1], [1, 0], \"y^\", markersize=20)\n",
    "plt.title(\"Acitvation function: sigmoid\", fontsize=14)\n",
    "plt.grid(True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "26d89a87-7edf-46de-8106-6cfa5c5301df",
   "metadata": {},
   "source": [
    "# Building an Image Classifier"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4e519bc3-3a87-40c8-942a-9153af9d950f",
   "metadata": {},
   "source": [
    "First let's import TensorFlow and Keras."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cf7a8c76-314e-439a-8280-3e6b9026818e",
   "metadata": {},
   "outputs": [],
   "source": [
    "import tensorflow as tf\n",
    "from tensorflow import keras"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "22e43219-9a2b-4f5c-aa50-ff2d79b6b4fc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'2.10.0'"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tf.__version__"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "1e768eff-744f-4cb8-a602-eeeccd160283",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'2.10.0'"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "keras.__version__"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4f2b9457-e08c-49d9-808f-2d1c1e9b3748",
   "metadata": {},
   "source": [
    "Let's start by loading the fashion MNIST dataset. Keras has a number of functions to load popular datasets in `keras.datasets`. The dataset is already split for you between a training set and a test set, but it can be useful to split the training set further to have a validation set:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "537fa4de-4183-409b-9e46-05b62e00d904",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/train-labels-idx1-ubyte.gz\n",
      "29515/29515 [==============================] - 0s 0us/step\n",
      "Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/train-images-idx3-ubyte.gz\n",
      "26421880/26421880 [==============================] - 1s 0us/step\n",
      "Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/t10k-labels-idx1-ubyte.gz\n",
      "5148/5148 [==============================] - 0s 0us/step\n",
      "Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/t10k-images-idx3-ubyte.gz\n",
      "4422102/4422102 [==============================] - 0s 0us/step\n"
     ]
    }
   ],
   "source": [
    "fashion_mnist = keras.datasets.fashion_mnist\n",
    "(X_train_full, y_train_full), (X_test, y_test) = fashion_mnist.load_data()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "32208a93-49af-45a6-ab03-29779569e6bc",
   "metadata": {},
   "source": [
    "The training set contains 60,000 grayscale images, each 28x28 pixels:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "66e21d95-11aa-420f-a0cd-9dea9c347d67",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(60000, 28, 28)"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train_full.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aaa5ba01-b893-4c61-b730-2b8017fe5daf",
   "metadata": {},
   "source": [
    "Each pixel intensity is represented as a byte (0 to 255):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "dfefd397-bdea-4512-a3db-50ec76a3fc0e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dtype('uint8')"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train_full.dtype"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "566faf94-e118-430f-9499-327f6c1098d1",
   "metadata": {},
   "source": [
    "Let's split the full training set into a validation set and a (smaller) training set. We also scale the pixel intensities down to the 0-1 range and convert them to floats, by dividing by 255."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "7dca56ca-8244-43f0-ad06-32c60a38aae8",
   "metadata": {},
   "outputs": [],
   "source": [
    "X_valid, X_train = X_train_full[:5000] / 255., X_train_full[5000:] / 255.\n",
    "y_valid, y_train = y_train_full[:5000], y_train_full[5000:]\n",
    "X_test = X_test / 255."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1a2741f1-5587-4044-bfe9-3ed7b01b7291",
   "metadata": {},
   "source": [
    "You can plot an image using Matplotlib's `imshow()` function, with a `'binary'`\n",
    " color map:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "c5282095-c0ed-49dc-9170-31c531a9dc0d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(-0.5, 27.5, 27.5, -0.5)"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.imshow(X_train[0], cmap='binary')\n",
    "plt.axis('off')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dd5bb28c-8aec-492c-812a-e8b02a5f2dba",
   "metadata": {},
   "source": [
    "The labels are the class IDs (represented as uint8), from 0 to 9:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "98373fde-5420-4ad4-9be2-fccc2af47311",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([4, 0, 7, ..., 3, 0, 5], dtype=uint8)"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_train"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fda350b2-cc62-46fe-a9ab-defd5be2f476",
   "metadata": {},
   "source": [
    "Here are the corresponding class names:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "3ffff1ac-3899-4777-9a06-d1a4136eac82",
   "metadata": {},
   "outputs": [],
   "source": [
    "class_names = [\"T-shirt/top\", \"Trouser\", \"Pullover\", \"Dress\", \"Coat\",\n",
    "               \"Sandal\", \"Shirt\", \"Sneaker\", \"Bag\", \"Ankle boot\"]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0bd861e9-4ee7-4eca-af9c-6af396d8d853",
   "metadata": {},
   "source": [
    "So the first image in the training set is a coat:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "bb6a2f1c-006c-4e83-8de2-a0ddcabeae21",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Coat'"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "class_names[y_train[0]]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c22d9220-7f8a-4224-98c1-2d3da95ab663",
   "metadata": {},
   "source": [
    "The validation set contains 5,000 images, and the test set contains 10,000 images:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "fa6d45ec-1921-4157-8bd8-b8a70ea03cd6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(5000, 28, 28)"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_valid.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "098eb399-c6c4-4841-815b-308cc3f90d0d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(10000, 28, 28)"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_test.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a053c4ed-b429-4264-a2a3-33b6a290d877",
   "metadata": {},
   "source": [
    "Let's take a look at a sample of the images in the dataset:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "def5e6d3-7275-4de8-b804-482f27d98d22",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Saving figure fashion_mnist_plot\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x480 with 40 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "n_rows = 4\n",
    "n_cols = 10\n",
    "plt.figure(figsize=(n_cols*1.2, n_rows*1.2))\n",
    "for row in range(n_rows):\n",
    "    for col in range(n_cols):\n",
    "        index = n_cols * row + col\n",
    "        plt.subplot(n_rows, n_cols, index + 1)\n",
    "        plt.imshow(X_train[index], cmap='binary', interpolation=\"nearest\")\n",
    "        plt.axis('off')\n",
    "        plt.title(class_names[y_train[index]], fontsize=12)\n",
    "plt.subplots_adjust(wspace=0.2, hspace=0.5)\n",
    "save_fig('fashion_mnist_plot', tight_layout=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "35600b89-ec7e-404d-83d2-42d4711ae80f",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-09-16 05:00:24.731869: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libcuda.so.1'; dlerror: libcuda.so.1: cannot open shared object file: No such file or directory\n",
      "2024-09-16 05:00:24.731941: W tensorflow/stream_executor/cuda/cuda_driver.cc:263] failed call to cuInit: UNKNOWN ERROR (303)\n",
      "2024-09-16 05:00:24.731983: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:156] kernel driver does not appear to be running on this host (jupyter_machrafal): /proc/driver/nvidia/version does not exist\n",
      "2024-09-16 05:00:24.732558: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 FMA\n",
      "To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.\n"
     ]
    }
   ],
   "source": [
    "model = keras.models.Sequential()\n",
    "model.add(keras.layers.Flatten(input_shape=[28, 28]))\n",
    "model.add(keras.layers.Dense(300, activation=\"relu\"))\n",
    "model.add(keras.layers.Dense(100, activation=\"relu\"))\n",
    "model.add(keras.layers.Dense(10, activation=\"softmax\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "1599e6af-2164-4445-9bb0-06524337abec",
   "metadata": {},
   "outputs": [],
   "source": [
    "keras.backend.clear_session()\n",
    "np.random.seed(100)\n",
    "tf.random.set_seed(100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "4b37911a-e4ee-46ce-aa00-84f92ba5fb17",
   "metadata": {},
   "outputs": [],
   "source": [
    "model = keras.models.Sequential([\n",
    "    keras.layers.Flatten(input_shape=[28, 28]),\n",
    "    keras.layers.Dense(300, activation=\"relu\"),\n",
    "    keras.layers.Dense(100, activation=\"relu\"),\n",
    "    keras.layers.Dense(10, activation=\"softmax\")\n",
    "])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "9f41a48b-49a7-4926-a13f-3773897cfa07",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<keras.layers.reshaping.flatten.Flatten at 0x7fc51a00e440>,\n",
       " <keras.layers.core.dense.Dense at 0x7fc51a00f040>,\n",
       " <keras.layers.core.dense.Dense at 0x7fc51a00fc10>,\n",
       " <keras.layers.core.dense.Dense at 0x7fc51a00f130>]"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.layers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "36437557-c08d-45b2-ba71-e0b8b607ec1f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential\"\n",
      "_________________________________________________________________\n",
      " Layer (type)                Output Shape              Param #   \n",
      "=================================================================\n",
      " flatten (Flatten)           (None, 784)               0         \n",
      "                                                                 \n",
      " dense (Dense)               (None, 300)               235500    \n",
      "                                                                 \n",
      " dense_1 (Dense)             (None, 100)               30100     \n",
      "                                                                 \n",
      " dense_2 (Dense)             (None, 10)                1010      \n",
      "                                                                 \n",
      "=================================================================\n",
      "Total params: 266,610\n",
      "Trainable params: 266,610\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "b353f31f-403c-4877-8b63-fb40b4a8da8e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "You must install pydot (`pip install pydot`) and install graphviz (see instructions at https://graphviz.gitlab.io/download/) for plot_model to work.\n"
     ]
    }
   ],
   "source": [
    "keras.utils.plot_model(model, \"my_fashion_mnist_model.png\", show_shapes=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "09943ad8-423c-49f0-9560-2887458d7859",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'dense'"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hidden1 = model.layers[1]\n",
    "hidden1.name"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "490b3012-8e6b-4acf-9c5b-fbe06c7db2ae",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.get_layer(hidden1.name) is hidden1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "3cbb0e8c-e80a-4950-8a18-641c49bea993",
   "metadata": {},
   "outputs": [],
   "source": [
    "weights, biases = hidden1.get_weights()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "c5ebd25c-4145-4fdf-9742-6b699efa719d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[-0.00011588,  0.06623408, -0.01534752, ...,  0.0514368 ,\n",
       "        -0.06927764, -0.04507863],\n",
       "       [ 0.0322504 ,  0.00961931, -0.01259579, ..., -0.05496464,\n",
       "        -0.06018544,  0.03255313],\n",
       "       [ 0.06632304, -0.03645129, -0.03031592, ..., -0.0437807 ,\n",
       "        -0.04960774, -0.04774487],\n",
       "       ...,\n",
       "       [ 0.05658266, -0.05912623, -0.05275124, ..., -0.03531405,\n",
       "        -0.01362134, -0.06488989],\n",
       "       [ 0.02234583, -0.01357066, -0.06026094, ...,  0.01145062,\n",
       "        -0.01328537, -0.02336063],\n",
       "       [ 0.02776954,  0.02596905, -0.04659374, ..., -0.01160087,\n",
       "         0.02202777,  0.04848538]], dtype=float32)"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "weights"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "09c87417-711e-4760-ba99-0579e7d9a6c1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(784, 300)"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "weights.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "fd5860d4-a9f7-427b-b302-4881cd5de2f4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
       "       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
       "       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
       "       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
       "       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
       "       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
       "       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
       "       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
       "       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
       "       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
       "       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
       "       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
       "       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
       "       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
       "       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
       "       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
       "       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
       "       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float32)"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "biases"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "846a531b-8d33-41cc-b40c-a3b69e2f35cc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(300,)"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "biases.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "d2b11384-04a1-4221-96e1-3c4c0108bc5e",
   "metadata": {},
   "outputs": [],
   "source": [
    "model.compile(loss=\"sparse_categorical_crossentropy\",\n",
    "              optimizer=\"sgd\",\n",
    "              metrics=[\"accuracy\"])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eac4606e-af3f-41e8-80ae-f4cd0ac7dcf7",
   "metadata": {},
   "source": [
    "This is equivalent to:"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e306255b-4a0b-40d5-8997-d17328e919bc",
   "metadata": {},
   "source": [
    "```python\n",
    "model.compile(loss=keras.losses.sparse_categorical_crossentropy,\n",
    "              optimizer=keras.optimizers.SGD(),\n",
    "              metrics=[keras.metrics.sparse_categorical_accuracy])\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "e6e356f3-4c41-40df-a470-47b6d79cf989",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/30\n",
      "1719/1719 [==============================] - 10s 6ms/step - loss: 0.7183 - accuracy: 0.7638 - val_loss: 0.5707 - val_accuracy: 0.8038\n",
      "Epoch 2/30\n",
      "1719/1719 [==============================] - 9s 5ms/step - loss: 0.4873 - accuracy: 0.8306 - val_loss: 0.4401 - val_accuracy: 0.8462\n",
      "Epoch 3/30\n",
      "1719/1719 [==============================] - 9s 5ms/step - loss: 0.4414 - accuracy: 0.8468 - val_loss: 0.4051 - val_accuracy: 0.8620\n",
      "Epoch 4/30\n",
      "1719/1719 [==============================] - 10s 6ms/step - loss: 0.4134 - accuracy: 0.8562 - val_loss: 0.3970 - val_accuracy: 0.8680\n",
      "Epoch 5/30\n",
      "1719/1719 [==============================] - 9s 5ms/step - loss: 0.3932 - accuracy: 0.8620 - val_loss: 0.4063 - val_accuracy: 0.8564\n",
      "Epoch 6/30\n",
      "1719/1719 [==============================] - 9s 5ms/step - loss: 0.3780 - accuracy: 0.8673 - val_loss: 0.3793 - val_accuracy: 0.8672\n",
      "Epoch 7/30\n",
      "1719/1719 [==============================] - 8s 5ms/step - loss: 0.3644 - accuracy: 0.8716 - val_loss: 0.3568 - val_accuracy: 0.8720\n",
      "Epoch 8/30\n",
      "1719/1719 [==============================] - 9s 5ms/step - loss: 0.3523 - accuracy: 0.8744 - val_loss: 0.3525 - val_accuracy: 0.8780\n",
      "Epoch 9/30\n",
      "1719/1719 [==============================] - 9s 5ms/step - loss: 0.3429 - accuracy: 0.8776 - val_loss: 0.3517 - val_accuracy: 0.8752\n",
      "Epoch 10/30\n",
      "1719/1719 [==============================] - 9s 5ms/step - loss: 0.3334 - accuracy: 0.8815 - val_loss: 0.3468 - val_accuracy: 0.8766\n",
      "Epoch 11/30\n",
      "1719/1719 [==============================] - 10s 6ms/step - loss: 0.3244 - accuracy: 0.8853 - val_loss: 0.3470 - val_accuracy: 0.8752\n",
      "Epoch 12/30\n",
      "1719/1719 [==============================] - 10s 6ms/step - loss: 0.3174 - accuracy: 0.8862 - val_loss: 0.3330 - val_accuracy: 0.8818\n",
      "Epoch 13/30\n",
      "1719/1719 [==============================] - 9s 5ms/step - loss: 0.3088 - accuracy: 0.8895 - val_loss: 0.3339 - val_accuracy: 0.8804\n",
      "Epoch 14/30\n",
      "1719/1719 [==============================] - 9s 5ms/step - loss: 0.3023 - accuracy: 0.8912 - val_loss: 0.3523 - val_accuracy: 0.8740\n",
      "Epoch 15/30\n",
      "1719/1719 [==============================] - 9s 5ms/step - loss: 0.2962 - accuracy: 0.8931 - val_loss: 0.3278 - val_accuracy: 0.8820\n",
      "Epoch 16/30\n",
      "1719/1719 [==============================] - 9s 5ms/step - loss: 0.2902 - accuracy: 0.8957 - val_loss: 0.3246 - val_accuracy: 0.8858\n",
      "Epoch 17/30\n",
      "1719/1719 [==============================] - 10s 6ms/step - loss: 0.2837 - accuracy: 0.8986 - val_loss: 0.3109 - val_accuracy: 0.8904\n",
      "Epoch 18/30\n",
      "1719/1719 [==============================] - 9s 5ms/step - loss: 0.2781 - accuracy: 0.8999 - val_loss: 0.3363 - val_accuracy: 0.8814\n",
      "Epoch 19/30\n",
      "1719/1719 [==============================] - 9s 5ms/step - loss: 0.2737 - accuracy: 0.9009 - val_loss: 0.3318 - val_accuracy: 0.8784\n",
      "Epoch 20/30\n",
      "1719/1719 [==============================] - 9s 5ms/step - loss: 0.2685 - accuracy: 0.9033 - val_loss: 0.3232 - val_accuracy: 0.8814\n",
      "Epoch 21/30\n",
      "1719/1719 [==============================] - 9s 5ms/step - loss: 0.2640 - accuracy: 0.9049 - val_loss: 0.3124 - val_accuracy: 0.8894\n",
      "Epoch 22/30\n",
      "1719/1719 [==============================] - 8s 5ms/step - loss: 0.2595 - accuracy: 0.9067 - val_loss: 0.3092 - val_accuracy: 0.8882\n",
      "Epoch 23/30\n",
      "1719/1719 [==============================] - 8s 5ms/step - loss: 0.2552 - accuracy: 0.9069 - val_loss: 0.3156 - val_accuracy: 0.8858\n",
      "Epoch 24/30\n",
      "1719/1719 [==============================] - 8s 5ms/step - loss: 0.2505 - accuracy: 0.9090 - val_loss: 0.3085 - val_accuracy: 0.8882\n",
      "Epoch 25/30\n",
      "1719/1719 [==============================] - 8s 5ms/step - loss: 0.2464 - accuracy: 0.9102 - val_loss: 0.3129 - val_accuracy: 0.8832\n",
      "Epoch 26/30\n",
      "1719/1719 [==============================] - 8s 5ms/step - loss: 0.2417 - accuracy: 0.9132 - val_loss: 0.2992 - val_accuracy: 0.8914\n",
      "Epoch 27/30\n",
      "1719/1719 [==============================] - 10s 6ms/step - loss: 0.2382 - accuracy: 0.9149 - val_loss: 0.3072 - val_accuracy: 0.8890\n",
      "Epoch 28/30\n",
      "1719/1719 [==============================] - 9s 5ms/step - loss: 0.2341 - accuracy: 0.9155 - val_loss: 0.3133 - val_accuracy: 0.8906\n",
      "Epoch 29/30\n",
      "1719/1719 [==============================] - 9s 5ms/step - loss: 0.2302 - accuracy: 0.9181 - val_loss: 0.2965 - val_accuracy: 0.8962\n",
      "Epoch 30/30\n",
      "1719/1719 [==============================] - 9s 5ms/step - loss: 0.2268 - accuracy: 0.9187 - val_loss: 0.2978 - val_accuracy: 0.8942\n"
     ]
    }
   ],
   "source": [
    "history = model.fit(X_train, y_train, epochs=30,\n",
    "                    validation_data=(X_valid, y_valid))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "309a4e9d-717d-4ca8-a165-7aa01e44104b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'verbose': 1, 'epochs': 30, 'steps': 1719}"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "history.params"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "2a25aa5d-e364-4f0a-83df-a80932495503",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]\n"
     ]
    }
   ],
   "source": [
    "print(history.epoch)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "e5a3725e-1975-49a0-9d68-2a22c11c9876",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dict_keys(['loss', 'accuracy', 'val_loss', 'val_accuracy'])"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "history.history.keys()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "7ba3622d-76e1-471a-89a0-35492dbb7d37",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Saving figure keras_learning_curves_plot\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAxQAAAHqCAYAAACdhAjRAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjguNCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8fJSN1AAAACXBIWXMAAA9hAAAPYQGoP6dpAACSTUlEQVR4nOzdd5xU5eEu8OdM79s7yy5soRfpoEEQCxAVUTAKitgw+amJMVhINGqiN0aMRmNMohEQI5pIxAYWehSRDkpZ6ja295nZ6TPn/nFmZnfYws6yned773zOmdPmnT3E33nmbYIoiiKIiIiIiIjaQdbdBSAiIiIiot6LgYKIiIiIiNqNgYKIiIiIiNqNgYKIiIiIiNqNgYKIiIiIiNqNgYKIiIiIiNqNgYKIiIiIiNqNgYKIiIiIiNqNgYKIiIiIiNqNgYKIiIiIiNot7EBhtVrx1FNPYebMmYiOjoYgCFi1alWbz6+trcWSJUsQFxcHvV6P6dOnY//+/eEWg4iIiIiIeoCwA0VlZSV+97vf4dixYxg1alRY5/p8Pvz4xz/GmjVr8MADD+CFF15AeXk5pk2bhpMnT4ZbFCIiIiIi6maKcE9ISkpCSUkJEhMTsXfvXowfP77N565duxbffvstPvjgA8ybNw8AcPPNNyM7OxtPPfUU1qxZE25xiIiIiIioG4VdQ6FWq5GYmNiuD1u7di0SEhJw4403BrfFxcXh5ptvxscffwyn09mu6xIRERERUffo0k7ZBw4cwJgxYyCThX7shAkTYLPZcOLEia4sDhERERERXaCwmzxdiJKSEkydOrXJ9qSkJABAcXExRowY0WS/0+kMqb3w+Xyorq5GTEwMBEHovAITEREREV2ERFGExWJBcnJyk8qAc3VpoLDb7VCr1U22azSa4P7m/OEPf8AzzzzTqWUjIiIiIqJQhYWF6NevX6vHdGmg0Gq1zfaTcDgcwf3NWbZsGR5++OHg+7q6OvTv3x+5ubkwGo2dU9jzcLvd2Lp1K6ZPnw6lUtktZaCOwXvZd/Be9h28l30D72PfwXvZd7T1XlosFgwYMKBNz9pdGigCI0SdK7AtOTm52fPUanWzNRvR0dEwmUwdW8g2crvd0Ol0iImJ4f+wejney76D97Lv4L3sG3gf+w7ey76jrfcysK8t3Qu6tFP26NGjsX//fvh8vpDtu3btgk6nQ3Z2dlcWh4iIiIiILlCnBYqSkhLk5OTA7XYHt82bNw9lZWX48MMPg9sqKyvxwQcf4Lrrrmu2FoKIiIiIiHqudjV5eu2111BbW4vi4mIAwKeffoqzZ88CAB588EFERERg2bJlePvtt5Gbm4v09HQAUqCYNGkS7rzzThw9ehSxsbF4/fXX4fV62emaiIiIiKgXalegePHFF5Gfnx98/+GHHwZrHW677TZEREQ0e55cLseGDRvwyCOP4NVXX4Xdbsf48eOxatUqDBo0qD1FISIiIiKibtSuQJGXl3feY1atWoVVq1Y12R4VFYV//vOf+Oc//9mejyYiIiIioh6kSztlExERERFR38JAQURERERE7cZAQURERERE7cZAQURERERE7cZAQURERERE7cZAQURERERE7cZAQURERERE7cZAQURERERE7cZAQURERERE7cZAQURERERE7cZAQURERERE7cZAQURERERE7cZAQURERERE7cZAQURERERE7cZAQURERERE7cZAQURERERE7cZAQURERERE7cZAQURERERE7cZAQURERERE7cZAQURERERE7cZAQURERERE7cZAQURERERE7cZAQURERERE7cZAQURERERE7cZAQURERERE7cZAQURERERE7abo7gIQEREREfVIXjfgsgKueunltIa+9zgA0Qv4vIDo8y/9730e/7qv0TGNj/Wcs+2cYxVq4IbXu/sv0CYMFERERETU/USx5Qfy4Hrj/W081uP0hwFLQxBwnRMMXFZ/WGi8vx7wOrvv76EyMFAQERERUS/l8wHuesBhBpwWCPXViDMfhnBSDoge6Zd5j0N6WD936bY3en/uMfbmz/G6pF/teyq5ClDpAZXRv/S/FBpAJgcEmX8pP2fZeLsivGMVqu7+1m3GQEFERETUV4ii9JDutPjDQOBlCYaDlred8x5i8LIKAFMA4HQ3fS9AesgOPHzLFA0P4I23C7JGD+7+bXIVoDY0DQPqxu8NjZaGRscYAKW+Vz3cdwcGCiIiIqILIYpSW3u3Tfp13m07Z92/dPnXPQ7pF3mvG/C5G9a97nZsD7x3SU193HbpmI4iyAGNCaLaBIvDC0NUHGQqndS+X6FpZqlpfrvy3O2Bda20lCtbCQlyQMZxhHoyBgoiIiLqfoGH8mAzGQfgdrT+3uNv3y76pPNFHwDxnHX/vuA62nac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dxeHiIiIiKhbMFC0k1GjQLJOWt+Xz1oKIiIiIro4MVBcgHSjCICBgoiIiIguXgwUF2AgAwURERERXeQYKC7AAH+gOFJcB4fb282lISIiIiLqegwUFyBaDcQb1XB7RXx/lsPHEhEREdHFh4HiAggCcElqBABgb351N5eGiIiIiKjrMVBcoLFpUQCA/exHQUREREQXIQaKCxSoodiXXwNRFLu5NEREREREXYuB4gINTTJBrZChxubGmcr67i4OEREREVGXYqC4QCqFDKP6RQLg8LFEREREdPFhoOgAY/z9KPblMVAQERER0cWFgaIDjAsEigIGCiIiIiK6uDBQdIBADcWpcitqba5uLg0RERERUddhoOgA0XoVBsbpAQD7WUtBRERERBcRBooOMra/v9kTO2YTERER0UWEgaKDBCa428uO2URERER0EWGg6CDj0qVAcehsLdxeXzeXhoiIiIioazBQdJCBsQZEaJVwuH04Wmzu7uIQEREREXUJBooOIpMJwWZP7EdBRERERBcLBooOxEBBRERERBcbBooOFOyYnV8NURS7uTRERERERJ2PgaIDjeoXCblMQJnZieI6R3cXh4iIiIio0zFQdCCtSo5hySYAwN686m4uDRERERFR52Og6GCBZk/72Y+CiIiIiC4CDBQdrKEfBQMFEREREfV9DBQdLBAojpWYUe/0dHNpiIiIiIg6FwNFB0uK0CIlUgufCBwqrO3u4hARERERdSoGik7AZk9EREREdLFgoOgEnOCOiIiIiC4WDBSdIDjSU0ENfD5OcEdEREREfRcDRScYnGiETiWHxeHByXJrdxeHiIiIiKjTMFB0AoVchtGpkQCAvfmc4I6IiIiI+i4Gik4yjv0oiIiIiOgiwEDRScZwxmwiIiIiuggwUHSSS/pHQRCAvCobKizO7i4OEREREVGnYKDoJBFaJbLjjQCk0Z6IiIiIiPoiBopONIb9KIiIiIioj2Og6ETsmE1EREREfR0DRScKTHD3w9k6ONzebi4NEREREVHHY6DoRGkxOsQaVHB5fThSXNfdxSEiIiIi6nAMFJ1IEASM6c9mT0RERETUdzFQdLJx6VKg2JvHQEFEREREfU/YgcLpdOKxxx5DcnIytFotJk6ciI0bN7b5/H//+9+YPHky9Ho9IiMjMWXKFGzZsiXcYvQagX4U+wtqIIpiN5eGiIiI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\n",
      "text/plain": [
       "<Figure size 800x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "pd.DataFrame(history.history).plot(figsize=(8,5))\n",
    "plt.grid(True)\n",
    "plt.gca().set_ylim(0, 1)\n",
    "save_fig(\"keras_learning_curves_plot\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "178c7ccb-a6d2-4fd0-8ee7-23382f0a89c0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "313/313 [==============================] - 1s 4ms/step - loss: 0.3240 - accuracy: 0.8845\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[0.3239862024784088, 0.8845000267028809]"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.evaluate(X_test, y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "2eff05a2-96de-4ff9-8d45-4b3959fb7e46",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1/1 [==============================] - 0s 171ms/step\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([[0.  , 0.  , 0.  , 0.  , 0.  , 0.01, 0.  , 0.01, 0.  , 0.98],\n",
       "       [0.  , 0.  , 1.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  ],\n",
       "       [0.  , 1.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  ]],\n",
       "      dtype=float32)"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_new = X_test[:3]\n",
    "y_proba = model.predict(X_new)\n",
    "y_proba.round(2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "610ae008-9711-40ee-8087-877533c26f8d",
   "metadata": {},
   "source": [
    "**Warning**: `model.predict_classes(X_new)` is deprecated. It is replaced with `np.argmax(model.predict(X_new), axis=-1)`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "130f9bb1-6d5c-4a9c-9a31-c0ff3ac33735",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1/1 [==============================] - 0s 53ms/step\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([9, 2, 1])"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_pred = np.argmax(model.predict(X_new), axis=-1)\n",
    "y_pred"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "54e2e064-fa8a-4762-ac44-81ee83e3e8b8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['Ankle boot', 'Pullover', 'Trouser'], dtype='<U11')"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.array(class_names)[y_pred]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "49b168a7-af79-4141-8784-e3bee5b25c51",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([9, 2, 1], dtype=uint8)"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_new = y_test[:3]\n",
    "y_new"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "434a1050-1c12-404d-8599-869fa3d01244",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Saving figure fashion_mnist_images_plot\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x240 with 3 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(7.2, 2.4))\n",
    "for index, image in enumerate(X_new):\n",
    "    plt.subplot(1, 3, index + 1)\n",
    "    plt.imshow(image, cmap=\"binary\", interpolation=\"nearest\")\n",
    "    plt.axis('off')\n",
    "    plt.title(class_names[y_test[index]], fontsize=12)\n",
    "plt.subplots_adjust(wspace=0.2, hspace=0.5)\n",
    "save_fig('fashion_mnist_images_plot', tight_layout=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bc57b8eb-b9d5-45fc-89d3-2352ee4f76ba",
   "metadata": {},
   "source": [
    "# Regression MLP"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e7a5eb1c-cca9-477b-aedf-e969c579f1b6",
   "metadata": {},
   "source": [
    "Let's load, split and scale the California housing dataset (the original one, not the modified one as in chapter 2):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "66758663-cd06-42c3-b9f6-7eaf7bb18ff0",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.datasets import fetch_california_housing\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "\n",
    "housing = fetch_california_housing()\n",
    "\n",
    "X_train_full, X_test, y_train_full, y_test = train_test_split(housing.data, housing.target, random_state=100)\n",
    "X_train, X_valid, y_train, y_valid = train_test_split(X_train_full, y_train_full, random_state=100)\n",
    "\n",
    "scaler = StandardScaler()\n",
    "X_train = scaler.fit_transform(X_train)\n",
    "X_valid = scaler.transform(X_valid)\n",
    "X_test = scaler.transform(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "1de99bb7-d9ca-4ee7-b28f-25c1516f7494",
   "metadata": {},
   "outputs": [],
   "source": [
    "np.random.seed(100)\n",
    "tf.random.set_seed(100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "e2b55057-3301-44c6-91aa-bcfc08469e35",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/20\n",
      "363/363 [==============================] - 2s 4ms/step - loss: 1.9886 - val_loss: 0.8891\n",
      "Epoch 2/20\n",
      "363/363 [==============================] - 1s 4ms/step - loss: 0.8109 - val_loss: 0.7338\n",
      "Epoch 3/20\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.7317 - val_loss: 0.6831\n",
      "Epoch 4/20\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.6886 - val_loss: 0.6440\n",
      "Epoch 5/20\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.6551 - val_loss: 0.6141\n",
      "Epoch 6/20\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.6282 - val_loss: 0.5919\n",
      "Epoch 7/20\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.6055 - val_loss: 0.5732\n",
      "Epoch 8/20\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.5866 - val_loss: 0.5554\n",
      "Epoch 9/20\n",
      "363/363 [==============================] - 1s 4ms/step - loss: 0.5704 - val_loss: 0.5415\n",
      "Epoch 10/20\n",
      "363/363 [==============================] - 1s 4ms/step - loss: 0.5566 - val_loss: 0.5314\n",
      "Epoch 11/20\n",
      "363/363 [==============================] - 1s 4ms/step - loss: 0.5447 - val_loss: 0.5247\n",
      "Epoch 12/20\n",
      "363/363 [==============================] - 1s 4ms/step - loss: 0.5347 - val_loss: 0.5171\n",
      "Epoch 13/20\n",
      "363/363 [==============================] - 1s 4ms/step - loss: 0.5261 - val_loss: 0.5067\n",
      "Epoch 14/20\n",
      "363/363 [==============================] - 1s 4ms/step - loss: 0.5190 - val_loss: 0.4991\n",
      "Epoch 15/20\n",
      "363/363 [==============================] - 1s 4ms/step - loss: 0.5125 - val_loss: 0.4929\n",
      "Epoch 16/20\n",
      "363/363 [==============================] - 1s 4ms/step - loss: 0.5070 - val_loss: 0.4889\n",
      "Epoch 17/20\n",
      "363/363 [==============================] - 1s 4ms/step - loss: 0.5023 - val_loss: 0.4848\n",
      "Epoch 18/20\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.4979 - val_loss: 0.4803\n",
      "Epoch 19/20\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.4942 - val_loss: 0.4767\n",
      "Epoch 20/20\n",
      "363/363 [==============================] - 1s 2ms/step - loss: 0.4907 - val_loss: 0.4759\n",
      "162/162 [==============================] - 0s 2ms/step - loss: 0.4556\n",
      "1/1 [==============================] - 0s 91ms/step\n"
     ]
    }
   ],
   "source": [
    "model = keras.models.Sequential([\n",
    "    keras.layers.Dense(30, activation=\"relu\", input_shape=X_train.shape[1:]),\n",
    "    keras.layers.Dense(1)\n",
    "])\n",
    "model.compile(loss=\"mean_squared_error\", optimizer=keras.optimizers.SGD(learning_rate=1e-3))\n",
    "history = model.fit(X_train, y_train, epochs=20, validation_data=(X_valid, y_valid))\n",
    "mse_test = model.evaluate(X_test, y_test)\n",
    "X_new = X_test[:3]\n",
    "y_pred = model.predict(X_new)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "4bb415b5-02dc-481e-ae4c-2b384546dcb7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.0, 1.0)"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(pd.DataFrame(history.history))\n",
    "plt.grid(True)\n",
    "plt.gca().set_ylim(0, 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "8d1729d7-dec7-4b6a-9f7c-8f533177d598",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[2.0074267],\n",
       "       [1.4404006],\n",
       "       [2.0884461]], dtype=float32)"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_pred"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "203275d7-87e9-4d35-986a-f81ce457e793",
   "metadata": {},
   "source": [
    "# Functional API"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "42ee1bf9-3a61-454b-874c-e647043ed755",
   "metadata": {},
   "source": [
    "Not all neural network models are simply sequential. Some may have complex topologies. Some may have multiple inputs and/or multiple outputs. For example, a Wide & Deep neural network (see [paper](https://ai.google/research/pubs/pub45413)) connects all or part of the inputs directly to the output layer."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "a0070361-0297-42c6-beb0-8041dca668af",
   "metadata": {},
   "outputs": [],
   "source": [
    "np.random.seed(100)\n",
    "tf.random.set_seed(100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "27f6b971-30d5-4125-83ec-4c545373c12f",
   "metadata": {},
   "outputs": [],
   "source": [
    "input_ = keras.layers.Input(shape=X_train.shape[1:])\n",
    "hidden1 = keras.layers.Dense(30, activation=\"relu\")(input_)\n",
    "hidden2 = keras.layers.Dense(30, activation=\"relu\")(hidden1)\n",
    "concat = keras.layers.concatenate([input_, hidden2])\n",
    "output = keras.layers.Dense(1)(concat)\n",
    "model = keras.models.Model(inputs=[input_], outputs=[output])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "c6b5b6f6-112b-47bd-a9fb-c587f19dedd7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model\"\n",
      "__________________________________________________________________________________________________\n",
      " Layer (type)                   Output Shape         Param #     Connected to                     \n",
      "==================================================================================================\n",
      " input_1 (InputLayer)           [(None, 8)]          0           []                               \n",
      "                                                                                                  \n",
      " dense_5 (Dense)                (None, 30)           270         ['input_1[0][0]']                \n",
      "                                                                                                  \n",
      " dense_6 (Dense)                (None, 30)           930         ['dense_5[0][0]']                \n",
      "                                                                                                  \n",
      " concatenate (Concatenate)      (None, 38)           0           ['input_1[0][0]',                \n",
      "                                                                  'dense_6[0][0]']                \n",
      "                                                                                                  \n",
      " dense_7 (Dense)                (None, 1)            39          ['concatenate[0][0]']            \n",
      "                                                                                                  \n",
      "==================================================================================================\n",
      "Total params: 1,239\n",
      "Trainable params: 1,239\n",
      "Non-trainable params: 0\n",
      "__________________________________________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "d4a3c141-3ad7-44f9-864a-6d7fa2022276",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/20\n",
      "363/363 [==============================] - 2s 4ms/step - loss: 2.0881 - val_loss: 0.7857\n",
      "Epoch 2/20\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.7330 - val_loss: 0.6488\n",
      "Epoch 3/20\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.6448 - val_loss: 0.6117\n",
      "Epoch 4/20\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.6127 - val_loss: 0.5806\n",
      "Epoch 5/20\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.5883 - val_loss: 0.5601\n",
      "Epoch 6/20\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.5686 - val_loss: 0.5447\n",
      "Epoch 7/20\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.5523 - val_loss: 0.5314\n",
      "Epoch 8/20\n",
      "363/363 [==============================] - 1s 4ms/step - loss: 0.5393 - val_loss: 0.5189\n",
      "Epoch 9/20\n",
      "363/363 [==============================] - 1s 4ms/step - loss: 0.5281 - val_loss: 0.5078\n",
      "Epoch 10/20\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.5189 - val_loss: 0.4995\n",
      "Epoch 11/20\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.5109 - val_loss: 0.4989\n",
      "Epoch 12/20\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.5047 - val_loss: 0.4905\n",
      "Epoch 13/20\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.4989 - val_loss: 0.4816\n",
      "Epoch 14/20\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.4946 - val_loss: 0.4755\n",
      "Epoch 15/20\n",
      "363/363 [==============================] - 1s 4ms/step - loss: 0.4899 - val_loss: 0.4700\n",
      "Epoch 16/20\n",
      "363/363 [==============================] - 1s 4ms/step - loss: 0.4862 - val_loss: 0.4681\n",
      "Epoch 17/20\n",
      "363/363 [==============================] - 3s 9ms/step - loss: 0.4830 - val_loss: 0.4632\n",
      "Epoch 18/20\n",
      "363/363 [==============================] - 7s 20ms/step - loss: 0.4796 - val_loss: 0.4597\n",
      "Epoch 19/20\n",
      "363/363 [==============================] - 2s 5ms/step - loss: 0.4771 - val_loss: 0.4578\n",
      "Epoch 20/20\n",
      "363/363 [==============================] - 1s 4ms/step - loss: 0.4740 - val_loss: 0.4565\n",
      "162/162 [==============================] - 0s 2ms/step - loss: 0.4449\n",
      "1/1 [==============================] - 0s 82ms/step\n"
     ]
    }
   ],
   "source": [
    "model.compile(loss=\"mean_squared_error\", optimizer=keras.optimizers.SGD(learning_rate=1e-3))\n",
    "history = model.fit(X_train, y_train, epochs=20,\n",
    "                    validation_data=(X_valid, y_valid))\n",
    "mse_test = model.evaluate(X_test, y_test)\n",
    "y_pred = model.predict(X_new)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5e6c80fd-2f8c-4e6f-bf9e-5127a5a89bee",
   "metadata": {},
   "source": [
    "What if you want to send different subsets of input features through the wide or deep paths? We will send 5 features (features 0 to 4), and 6 through the deep path (features 2 to 7). Note that 3 features will go through both (features 2, 3 and 4)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "03d29f54-8e87-4ea8-88fb-986e8b2555dc",
   "metadata": {},
   "outputs": [],
   "source": [
    "np.random.seed(100)\n",
    "tf.random.set_seed(100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "8d787303-07aa-43ef-bd8c-6c15969337ec",
   "metadata": {},
   "outputs": [],
   "source": [
    "input_A = keras.layers.Input(shape=[5], name=\"wide_input\")\n",
    "input_B = keras.layers.Input(shape=[6], name=\"deep_input\")\n",
    "hidden1 = keras.layers.Dense(30, activation=\"relu\")(input_B)\n",
    "hidden2 = keras.layers.Dense(30, activation=\"relu\")(hidden1)\n",
    "concat = keras.layers.concatenate([input_A, hidden2])\n",
    "output = keras.layers.Dense(1, name=\"output\")(concat)\n",
    "model = keras.models.Model(inputs=[input_A, input_B], outputs=[output])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "f7df8b76-b593-4002-b1bf-534f17298b7b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/20\n",
      "363/363 [==============================] - 2s 3ms/step - loss: 2.0308 - val_loss: 1.0854\n",
      "Epoch 2/20\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.9369 - val_loss: 0.7720\n",
      "Epoch 3/20\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.7580 - val_loss: 0.6749\n",
      "Epoch 4/20\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.6803 - val_loss: 0.6198\n",
      "Epoch 5/20\n",
      "363/363 [==============================] - 1s 2ms/step - loss: 0.6339 - val_loss: 0.5821\n",
      "Epoch 6/20\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.6016 - val_loss: 0.5552\n",
      "Epoch 7/20\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.5776 - val_loss: 0.5368\n",
      "Epoch 8/20\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.5596 - val_loss: 0.5211\n",
      "Epoch 9/20\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.5456 - val_loss: 0.5095\n",
      "Epoch 10/20\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.5347 - val_loss: 0.5026\n",
      "Epoch 11/20\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.5260 - val_loss: 0.4982\n",
      "Epoch 12/20\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.5192 - val_loss: 0.4928\n",
      "Epoch 13/20\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.5137 - val_loss: 0.4864\n",
      "Epoch 14/20\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.5093 - val_loss: 0.4801\n",
      "Epoch 15/20\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.5053 - val_loss: 0.4763\n",
      "Epoch 16/20\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.5019 - val_loss: 0.4734\n",
      "Epoch 17/20\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.4990 - val_loss: 0.4692\n",
      "Epoch 18/20\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.4963 - val_loss: 0.4669\n",
      "Epoch 19/20\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.4940 - val_loss: 0.4660\n",
      "Epoch 20/20\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.4916 - val_loss: 0.4638\n",
      "162/162 [==============================] - 0s 2ms/step - loss: 0.4528\n",
      "1/1 [==============================] - 0s 97ms/step\n"
     ]
    }
   ],
   "source": [
    "model.compile(loss=\"mse\", optimizer=keras.optimizers.SGD(learning_rate=1e-3))\n",
    "\n",
    "X_train_A, X_train_B = X_train[:, :5], X_train[:, 2:]\n",
    "X_valid_A, X_valid_B = X_valid[:, :5], X_valid[:, 2:]\n",
    "X_test_A, X_test_B = X_test[:, :5], X_test[:, 2:]\n",
    "X_new_A, X_new_B = X_test_A[:3], X_test_B[:3]\n",
    "\n",
    "history = model.fit((X_train_A, X_train_B), y_train, epochs=20,\n",
    "                    validation_data = ((X_valid_A, X_valid_B), y_valid))\n",
    "mse_test = model.evaluate((X_test_A, X_test_B), y_test)\n",
    "y_pred = model.predict((X_new_A, X_new_B))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4dffe357-33f2-4dcb-87b9-3b29bc9348db",
   "metadata": {},
   "source": [
    "Adding an auxiliary output for regularization:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "4a24f251-8c17-4bde-8eb9-d5fbe9af1e04",
   "metadata": {},
   "outputs": [],
   "source": [
    "np.random.seed(100)\n",
    "tf.random.set_seed(100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "46c9fd37-6601-45e4-aba4-0b2fd8bf2c9c",
   "metadata": {},
   "outputs": [],
   "source": [
    "input_A = keras.layers.Input(shape=[5], name=\"wide_input\")\n",
    "input_B = keras.layers.Input(shape=[6], name=\"deep_input\")\n",
    "hidden1 = keras.layers.Dense(30, activation=\"relu\")(input_B)\n",
    "hidden2 = keras.layers.Dense(30, activation=\"relu\")(hidden1)\n",
    "concat = keras.layers.concatenate([input_A, hidden2])\n",
    "output = keras.layers.Dense(1, name=\"main_output\")(concat)\n",
    "aux_output = keras.layers.Dense(1, name=\"aux_output\")(hidden2)\n",
    "model = keras.models.Model(inputs=[input_A, input_B],\n",
    "                           outputs=[output, aux_output])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "db451497-464e-40a7-8c12-4838dbe6800d",
   "metadata": {},
   "outputs": [],
   "source": [
    "model.compile(loss=[\"mse\", \"mse\"], loss_weights=[0.9, 0.1], optimizer=keras.optimizers.SGD(learning_rate=1e-3))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "acfff55c-dcc4-4a72-b30a-afdedff9ab63",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/20\n",
      "363/363 [==============================] - 2s 4ms/step - loss: 2.5787 - main_output_loss: 2.2692 - aux_output_loss: 5.3637 - val_loss: 1.2933 - val_main_output_loss: 0.9278 - val_aux_output_loss: 4.5832\n",
      "Epoch 2/20\n",
      "363/363 [==============================] - 1s 4ms/step - loss: 1.1211 - main_output_loss: 0.8088 - aux_output_loss: 3.9320 - val_loss: 0.9681 - val_main_output_loss: 0.7049 - val_aux_output_loss: 3.3367\n",
      "Epoch 3/20\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.9314 - main_output_loss: 0.7039 - aux_output_loss: 2.9793 - val_loss: 0.8421 - val_main_output_loss: 0.6425 - val_aux_output_loss: 2.6381\n",
      "Epoch 4/20\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.8358 - main_output_loss: 0.6579 - aux_output_loss: 2.4376 - val_loss: 0.7693 - val_main_output_loss: 0.6057 - val_aux_output_loss: 2.2418\n",
      "Epoch 5/20\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.7753 - main_output_loss: 0.6265 - aux_output_loss: 2.1151 - val_loss: 0.7211 - val_main_output_loss: 0.5791 - val_aux_output_loss: 1.9990\n",
      "Epoch 6/20\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.7326 - main_output_loss: 0.6019 - aux_output_loss: 1.9093 - val_loss: 0.6865 - val_main_output_loss: 0.5583 - val_aux_output_loss: 1.8404\n",
      "Epoch 7/20\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.7003 - main_output_loss: 0.5814 - aux_output_loss: 1.7704 - val_loss: 0.6605 - val_main_output_loss: 0.5417 - val_aux_output_loss: 1.7291\n",
      "Epoch 8/20\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.6752 - main_output_loss: 0.5647 - aux_output_loss: 1.6699 - val_loss: 0.6396 - val_main_output_loss: 0.5276 - val_aux_output_loss: 1.6476\n",
      "Epoch 9/20\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.6555 - main_output_loss: 0.5512 - aux_output_loss: 1.5946 - val_loss: 0.6224 - val_main_output_loss: 0.5155 - val_aux_output_loss: 1.5846\n",
      "Epoch 10/20\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.6401 - main_output_loss: 0.5405 - aux_output_loss: 1.5361 - val_loss: 0.6107 - val_main_output_loss: 0.5081 - val_aux_output_loss: 1.5337\n",
      "Epoch 11/20\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.6276 - main_output_loss: 0.5319 - aux_output_loss: 1.4893 - val_loss: 0.6009 - val_main_output_loss: 0.5019 - val_aux_output_loss: 1.4916\n",
      "Epoch 12/20\n",
      "363/363 [==============================] - 1s 4ms/step - loss: 0.6176 - main_output_loss: 0.5251 - aux_output_loss: 1.4505 - val_loss: 0.5920 - val_main_output_loss: 0.4961 - val_aux_output_loss: 1.4549\n",
      "Epoch 13/20\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.6093 - main_output_loss: 0.5197 - aux_output_loss: 1.4163 - val_loss: 0.5841 - val_main_output_loss: 0.4909 - val_aux_output_loss: 1.4227\n",
      "Epoch 14/20\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.6022 - main_output_loss: 0.5150 - aux_output_loss: 1.3872 - val_loss: 0.5764 - val_main_output_loss: 0.4857 - val_aux_output_loss: 1.3933\n",
      "Epoch 15/20\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.5959 - main_output_loss: 0.5109 - aux_output_loss: 1.3602 - val_loss: 0.5696 - val_main_output_loss: 0.4810 - val_aux_output_loss: 1.3669\n",
      "Epoch 16/20\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.5902 - main_output_loss: 0.5074 - aux_output_loss: 1.3350 - val_loss: 0.5641 - val_main_output_loss: 0.4776 - val_aux_output_loss: 1.3421\n",
      "Epoch 17/20\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.5852 - main_output_loss: 0.5043 - aux_output_loss: 1.3132 - val_loss: 0.5577 - val_main_output_loss: 0.4732 - val_aux_output_loss: 1.3176\n",
      "Epoch 18/20\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.5805 - main_output_loss: 0.5015 - aux_output_loss: 1.2911 - val_loss: 0.5533 - val_main_output_loss: 0.4710 - val_aux_output_loss: 1.2943\n",
      "Epoch 19/20\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.5762 - main_output_loss: 0.4992 - aux_output_loss: 1.2695 - val_loss: 0.5492 - val_main_output_loss: 0.4688 - val_aux_output_loss: 1.2729\n",
      "Epoch 20/20\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.5720 - main_output_loss: 0.4967 - aux_output_loss: 1.2496 - val_loss: 0.5452 - val_main_output_loss: 0.4666 - val_aux_output_loss: 1.2518\n"
     ]
    }
   ],
   "source": [
    "history = model.fit([X_train_A, X_train_B], [y_train, y_train], epochs=20,\n",
    "                    validation_data=([X_valid_A, X_valid_B], [y_valid, y_valid]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "55b3aba7-93a2-4b12-ae59-94f4f0723c65",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "162/162 [==============================] - 0s 2ms/step - loss: 0.5340 - main_output_loss: 0.4574 - aux_output_loss: 1.2233\n",
      "WARNING:tensorflow:5 out of the last 6 calls to <function Model.make_predict_function.<locals>.predict_function at 0x7fc50fc4c8b0> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has reduce_retracing=True option that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for  more details.\n",
      "1/1 [==============================] - 0s 102ms/step\n"
     ]
    }
   ],
   "source": [
    "total_loss, main_loss, aux_loss = model.evaluate(\n",
    "    [X_test_A, X_test_B], [y_test, y_test])\n",
    "y_pred_main, y_pred_aux = model.predict([X_new_A, X_new_B])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "32167fe1-8f6e-4702-8625-772ca6586b43",
   "metadata": {},
   "source": [
    "# The subclassing API"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "800ed21e-1596-4b1d-8704-dcad7a39a717",
   "metadata": {},
   "outputs": [],
   "source": [
    "class WideAndDeepModel(keras.models.Model):\n",
    "    def __init__(self, units=30, activation=\"relu\", **kwargs):\n",
    "        super().__init__(**kwargs)\n",
    "        self.hidden1 = keras.layers.Dense(units, activation=activation)\n",
    "        self.hidden2 = keras.layers.Dense(units, activation=activation)\n",
    "        self.main_output = keras.layers.Dense(1)\n",
    "        self.aux_output = keras.layers.Dense(1)\n",
    "        \n",
    "    def call(self, inputs):\n",
    "        input_A, input_B = inputs\n",
    "        hidden1 = self.hidden1(input_B)\n",
    "        hidden2 = self.hidden2(hidden1)\n",
    "        concat = keras.layers.concatenate([input_A, hidden2])\n",
    "        main_output = self.main_output(concat)\n",
    "        aux_output = self.aux_output(hidden2)\n",
    "        return main_output, aux_output\n",
    "    \n",
    "model = WideAndDeepModel(30, activation=\"relu\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "636ad98c-1cd3-4323-8380-4abb6843ba5f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/10\n",
      "363/363 [==============================] - 2s 4ms/step - loss: 2.8649 - output_1_loss: 2.7778 - output_2_loss: 3.6494 - val_loss: 1.4931 - val_output_1_loss: 1.3276 - val_output_2_loss: 2.9830\n",
      "Epoch 2/10\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 1.1881 - output_1_loss: 1.0424 - output_2_loss: 2.4992 - val_loss: 0.9971 - val_output_1_loss: 0.8488 - val_output_2_loss: 2.3317\n",
      "Epoch 3/10\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.9208 - output_1_loss: 0.7996 - output_2_loss: 2.0118 - val_loss: 0.8522 - val_output_1_loss: 0.7244 - val_output_2_loss: 2.0023\n",
      "Epoch 4/10\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.8258 - output_1_loss: 0.7192 - output_2_loss: 1.7849 - val_loss: 0.7837 - val_output_1_loss: 0.6689 - val_output_2_loss: 1.8168\n",
      "Epoch 5/10\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.7762 - output_1_loss: 0.6775 - output_2_loss: 1.6645 - val_loss: 0.7435 - val_output_1_loss: 0.6374 - val_output_2_loss: 1.6987\n",
      "Epoch 6/10\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.7435 - output_1_loss: 0.6498 - output_2_loss: 1.5873 - val_loss: 0.7163 - val_output_1_loss: 0.6162 - val_output_2_loss: 1.6181\n",
      "Epoch 7/10\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.7192 - output_1_loss: 0.6286 - output_2_loss: 1.5346 - val_loss: 0.6918 - val_output_1_loss: 0.5961 - val_output_2_loss: 1.5531\n",
      "Epoch 8/10\n",
      "363/363 [==============================] - 1s 4ms/step - loss: 0.6994 - output_1_loss: 0.6113 - output_2_loss: 1.4924 - val_loss: 0.6754 - val_output_1_loss: 0.5834 - val_output_2_loss: 1.5031\n",
      "Epoch 9/10\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.6827 - output_1_loss: 0.5967 - output_2_loss: 1.4564 - val_loss: 0.6588 - val_output_1_loss: 0.5695 - val_output_2_loss: 1.4628\n",
      "Epoch 10/10\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.6683 - output_1_loss: 0.5840 - output_2_loss: 1.4270 - val_loss: 0.6451 - val_output_1_loss: 0.5581 - val_output_2_loss: 1.4274\n",
      "162/162 [==============================] - 0s 3ms/step - loss: 0.6258 - output_1_loss: 0.5413 - output_2_loss: 1.3862\n",
      "WARNING:tensorflow:6 out of the last 7 calls to <function Model.make_predict_function.<locals>.predict_function at 0x7fc5185ad750> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has reduce_retracing=True option that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for  more details.\n",
      "1/1 [==============================] - 0s 112ms/step\n"
     ]
    }
   ],
   "source": [
    "model.compile(loss=\"mse\", loss_weights=[0.9, 0.1], optimizer=keras.optimizers.SGD(learning_rate=1e-3))\n",
    "history = model.fit((X_train_A, X_train_B), (y_train, y_train), epochs=10,\n",
    "                    validation_data=((X_valid_A, X_valid_B), (y_valid, y_valid)))\n",
    "total_loss, main_loss, aux_loss = model.evaluate((X_test_A, X_test_B), (y_test, y_test))\n",
    "y_pred_main, y_pred_aux = model.predict((X_new_A, X_new_B))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "73862d0d-bf0b-4f78-aab6-8103b0b6973a",
   "metadata": {},
   "source": [
    "# Saving and Restoring"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "d32a8185-44e1-4cbb-bc58-2e61eb173bd1",
   "metadata": {},
   "outputs": [],
   "source": [
    "np.random.seed(100)\n",
    "tf.random.set_seed(100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "2a83ee39-df6f-4a51-8017-a629006191d8",
   "metadata": {},
   "outputs": [],
   "source": [
    "model = keras.models.Sequential([\n",
    "    keras.layers.Dense(30, activation=\"relu\", input_shape=[8]),\n",
    "    keras.layers.Dense(30, activation=\"relu\"),\n",
    "    keras.layers.Dense(1)\n",
    "])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "572a0adb-0e6c-4ac0-9f27-f390b916dbac",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/10\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 2.6652 - val_loss: 1.4177\n",
      "Epoch 2/10\n",
      "363/363 [==============================] - 1s 2ms/step - loss: 0.9270 - val_loss: 0.6925\n",
      "Epoch 3/10\n",
      "363/363 [==============================] - 1s 2ms/step - loss: 0.6786 - val_loss: 0.6127\n",
      "Epoch 4/10\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.6329 - val_loss: 0.5841\n",
      "Epoch 5/10\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.6068 - val_loss: 0.5643\n",
      "Epoch 6/10\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.5851 - val_loss: 0.5488\n",
      "Epoch 7/10\n",
      "363/363 [==============================] - 1s 2ms/step - loss: 0.5674 - val_loss: 0.5362\n",
      "Epoch 8/10\n",
      "363/363 [==============================] - 1s 2ms/step - loss: 0.5526 - val_loss: 0.5243\n",
      "Epoch 9/10\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.5401 - val_loss: 0.5125\n",
      "Epoch 10/10\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.5297 - val_loss: 0.5058\n",
      "162/162 [==============================] - 0s 2ms/step - loss: 0.4879\n"
     ]
    }
   ],
   "source": [
    "model.compile(loss=\"mse\", optimizer=keras.optimizers.SGD(learning_rate=1e-3))\n",
    "history = model.fit(X_train, y_train, epochs=10, validation_data=(X_valid, y_valid))\n",
    "mse_test = model.evaluate(X_test, y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "92078e2a-291b-4439-ae46-3729f902b1ea",
   "metadata": {},
   "outputs": [],
   "source": [
    "model.save(\"my_keras_model.h5\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "3feb7938-df8e-40b3-970a-f6b9f589fe9e",
   "metadata": {},
   "outputs": [],
   "source": [
    "model = keras.models.load_model(\"my_keras_model.h5\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "ad0db003-c355-47b1-aca9-6b2541e64f16",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1/1 [==============================] - 0s 75ms/step\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([[2.0660973],\n",
       "       [1.3910415],\n",
       "       [1.7947924]], dtype=float32)"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.predict(X_new)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "4eec4f66-cf1c-4c76-8017-9c83bcc7130e",
   "metadata": {},
   "outputs": [],
   "source": [
    "model.save_weights(\"my_keras_weigths.ckpt\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f297a67e-7af2-4b63-8018-2f48b0ba51ec",
   "metadata": {},
   "source": [
    "# Using Callbacks during Training"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "9c02616b-732b-4968-9110-bd3551574b98",
   "metadata": {},
   "outputs": [],
   "source": [
    "keras.backend.clear_session()\n",
    "np.random.seed(100)\n",
    "tf.random.set_seed(100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "5d92bbfa-07ac-411f-8e09-87d68d61d08f",
   "metadata": {},
   "outputs": [],
   "source": [
    "model = keras.models.Sequential([\n",
    "    keras.layers.Dense(30, activation=\"relu\", input_shape=[8]),\n",
    "    keras.layers.Dense(30, activation=\"relu\"),\n",
    "    keras.layers.Dense(1)\n",
    "])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "4a7bf85d-5f4f-4013-9dcb-1a77ee3eb524",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/10\n",
      "363/363 [==============================] - 2s 3ms/step - loss: 2.3535 - val_loss: 1.1100\n",
      "Epoch 2/10\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.8564 - val_loss: 0.7071\n",
      "Epoch 3/10\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.7004 - val_loss: 0.6354\n",
      "Epoch 4/10\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.6494 - val_loss: 0.5933\n",
      "Epoch 5/10\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.6118 - val_loss: 0.5607\n",
      "Epoch 6/10\n",
      "363/363 [==============================] - 1s 2ms/step - loss: 0.5816 - val_loss: 0.5357\n",
      "Epoch 7/10\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.5564 - val_loss: 0.5146\n",
      "Epoch 8/10\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.5360 - val_loss: 0.4954\n",
      "Epoch 9/10\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.5187 - val_loss: 0.4810\n",
      "Epoch 10/10\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.5046 - val_loss: 0.4693\n",
      "162/162 [==============================] - 0s 2ms/step - loss: 0.4633\n"
     ]
    }
   ],
   "source": [
    "model.compile(loss=\"mse\", optimizer=keras.optimizers.SGD(learning_rate=1e-3))\n",
    "checkpoint_cb = keras.callbacks.ModelCheckpoint(\"my_keras_model.h5\", save_best_only=True)\n",
    "history = model.fit(X_train, y_train, epochs=10,\n",
    "                    validation_data=(X_valid, y_valid),\n",
    "                    callbacks=[checkpoint_cb])\n",
    "model = keras.models.load_model(\"my_keras_model.h5\") # rollback to best model\n",
    "mse_test = model.evaluate(X_test, y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "161f0d58-2c7f-48b0-aebd-6319b8b1710d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/100\n",
      "363/363 [==============================] - 2s 4ms/step - loss: 0.4931 - val_loss: 0.4596\n",
      "Epoch 2/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.4842 - val_loss: 0.4510\n",
      "Epoch 3/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.4768 - val_loss: 0.4450\n",
      "Epoch 4/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.4704 - val_loss: 0.4399\n",
      "Epoch 5/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.4655 - val_loss: 0.4351\n",
      "Epoch 6/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.4611 - val_loss: 0.4317\n",
      "Epoch 7/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.4573 - val_loss: 0.4292\n",
      "Epoch 8/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.4540 - val_loss: 0.4253\n",
      "Epoch 9/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.4508 - val_loss: 0.4227\n",
      "Epoch 10/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.4479 - val_loss: 0.4210\n",
      "Epoch 11/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.4455 - val_loss: 0.4198\n",
      "Epoch 12/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.4432 - val_loss: 0.4174\n",
      "Epoch 13/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.4412 - val_loss: 0.4155\n",
      "Epoch 14/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.4395 - val_loss: 0.4136\n",
      "Epoch 15/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.4376 - val_loss: 0.4115\n",
      "Epoch 16/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.4356 - val_loss: 0.4108\n",
      "Epoch 17/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.4343 - val_loss: 0.4086\n",
      "Epoch 18/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.4325 - val_loss: 0.4078\n",
      "Epoch 19/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.4313 - val_loss: 0.4068\n",
      "Epoch 20/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.4298 - val_loss: 0.4062\n",
      "Epoch 21/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.4283 - val_loss: 0.4054\n",
      "Epoch 22/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.4272 - val_loss: 0.4033\n",
      "Epoch 23/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.4257 - val_loss: 0.4031\n",
      "Epoch 24/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.4247 - val_loss: 0.4019\n",
      "Epoch 25/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.4235 - val_loss: 0.4012\n",
      "Epoch 26/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.4224 - val_loss: 0.3998\n",
      "Epoch 27/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.4213 - val_loss: 0.3985\n",
      "Epoch 28/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.4202 - val_loss: 0.3982\n",
      "Epoch 29/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.4192 - val_loss: 0.3976\n",
      "Epoch 30/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.4180 - val_loss: 0.3962\n",
      "Epoch 31/100\n",
      "363/363 [==============================] - 1s 4ms/step - loss: 0.4169 - val_loss: 0.3958\n",
      "Epoch 32/100\n",
      "363/363 [==============================] - 1s 4ms/step - loss: 0.4161 - val_loss: 0.3954\n",
      "Epoch 33/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.4150 - val_loss: 0.3946\n",
      "Epoch 34/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.4142 - val_loss: 0.3934\n",
      "Epoch 35/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.4132 - val_loss: 0.3925\n",
      "Epoch 36/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.4123 - val_loss: 0.3918\n",
      "Epoch 37/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.4111 - val_loss: 0.3917\n",
      "Epoch 38/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.4105 - val_loss: 0.3903\n",
      "Epoch 39/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.4097 - val_loss: 0.3895\n",
      "Epoch 40/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.4084 - val_loss: 0.3896\n",
      "Epoch 41/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.4077 - val_loss: 0.3892\n",
      "Epoch 42/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.4067 - val_loss: 0.3880\n",
      "Epoch 43/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.4059 - val_loss: 0.3869\n",
      "Epoch 44/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.4050 - val_loss: 0.3864\n",
      "Epoch 45/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.4045 - val_loss: 0.3860\n",
      "Epoch 46/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.4034 - val_loss: 0.3853\n",
      "Epoch 47/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.4028 - val_loss: 0.3844\n",
      "Epoch 48/100\n",
      "363/363 [==============================] - 1s 2ms/step - loss: 0.4019 - val_loss: 0.3837\n",
      "Epoch 49/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.4010 - val_loss: 0.3837\n",
      "Epoch 50/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.4001 - val_loss: 0.3827\n",
      "Epoch 51/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3996 - val_loss: 0.3821\n",
      "Epoch 52/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3984 - val_loss: 0.3816\n",
      "Epoch 53/100\n",
      "363/363 [==============================] - 1s 2ms/step - loss: 0.3975 - val_loss: 0.3812\n",
      "Epoch 54/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3972 - val_loss: 0.3803\n",
      "Epoch 55/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3963 - val_loss: 0.3800\n",
      "Epoch 56/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3957 - val_loss: 0.3797\n",
      "Epoch 57/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3948 - val_loss: 0.3793\n",
      "Epoch 58/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3941 - val_loss: 0.3784\n",
      "Epoch 59/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3932 - val_loss: 0.3772\n",
      "Epoch 60/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3924 - val_loss: 0.3765\n",
      "Epoch 61/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3918 - val_loss: 0.3764\n",
      "Epoch 62/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3910 - val_loss: 0.3761\n",
      "Epoch 63/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3901 - val_loss: 0.3754\n",
      "Epoch 64/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3894 - val_loss: 0.3762\n",
      "Epoch 65/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3889 - val_loss: 0.3752\n",
      "Epoch 66/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3882 - val_loss: 0.3738\n",
      "Epoch 67/100\n",
      "363/363 [==============================] - 1s 2ms/step - loss: 0.3875 - val_loss: 0.3728\n",
      "Epoch 68/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3868 - val_loss: 0.3722\n",
      "Epoch 69/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3861 - val_loss: 0.3721\n",
      "Epoch 70/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3854 - val_loss: 0.3715\n",
      "Epoch 71/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3846 - val_loss: 0.3718\n",
      "Epoch 72/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3841 - val_loss: 0.3700\n",
      "Epoch 73/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3836 - val_loss: 0.3705\n",
      "Epoch 74/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3828 - val_loss: 0.3692\n",
      "Epoch 75/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3822 - val_loss: 0.3687\n",
      "Epoch 76/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3815 - val_loss: 0.3683\n",
      "Epoch 77/100\n",
      "363/363 [==============================] - 1s 4ms/step - loss: 0.3808 - val_loss: 0.3687\n",
      "Epoch 78/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3803 - val_loss: 0.3673\n",
      "Epoch 79/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3796 - val_loss: 0.3669\n",
      "Epoch 80/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3791 - val_loss: 0.3655\n",
      "Epoch 81/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3783 - val_loss: 0.3654\n",
      "Epoch 82/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3778 - val_loss: 0.3652\n",
      "Epoch 83/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3770 - val_loss: 0.3648\n",
      "Epoch 84/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3766 - val_loss: 0.3638\n",
      "Epoch 85/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3756 - val_loss: 0.3633\n",
      "Epoch 86/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3752 - val_loss: 0.3630\n",
      "Epoch 87/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3745 - val_loss: 0.3631\n",
      "Epoch 88/100\n",
      "363/363 [==============================] - 2s 4ms/step - loss: 0.3740 - val_loss: 0.3627\n",
      "Epoch 89/100\n",
      "363/363 [==============================] - 2s 4ms/step - loss: 0.3735 - val_loss: 0.3625\n",
      "Epoch 90/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3729 - val_loss: 0.3614\n",
      "Epoch 91/100\n",
      "363/363 [==============================] - 1s 4ms/step - loss: 0.3724 - val_loss: 0.3607\n",
      "Epoch 92/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3717 - val_loss: 0.3602\n",
      "Epoch 93/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3711 - val_loss: 0.3601\n",
      "Epoch 94/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3706 - val_loss: 0.3605\n",
      "Epoch 95/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3700 - val_loss: 0.3592\n",
      "Epoch 96/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3696 - val_loss: 0.3580\n",
      "Epoch 97/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3688 - val_loss: 0.3579\n",
      "Epoch 98/100\n",
      "363/363 [==============================] - 1s 2ms/step - loss: 0.3682 - val_loss: 0.3592\n",
      "Epoch 99/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3679 - val_loss: 0.3573\n",
      "Epoch 100/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3671 - val_loss: 0.3569\n",
      "162/162 [==============================] - 0s 2ms/step - loss: 0.3463\n"
     ]
    }
   ],
   "source": [
    "model.compile(loss=\"mse\", optimizer=keras.optimizers.SGD(learning_rate=1e-3))\n",
    "early_stopping_cb = keras.callbacks.EarlyStopping(patience=10,\n",
    "                                                 restore_best_weights=True)\n",
    "history = model.fit(X_train, y_train, epochs=100,\n",
    "                    validation_data=(X_valid, y_valid),\n",
    "                    callbacks=[checkpoint_cb, early_stopping_cb])\n",
    "mse_test = model.evaluate(X_test, y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "454b8280-4bdb-429a-9a38-2cd2c0b44688",
   "metadata": {},
   "outputs": [],
   "source": [
    "class PrintValTrainRatioCallback(keras.callbacks.Callback):\n",
    "    def on_epoch_end(self, epoch, logs):\n",
    "        print(\"\\nval/train: {:.2f}\".format(logs[\"val_loss\"] / logs[\"loss\"]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "f8c172f8-d822-4ab0-9546-17591d9d9db7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "359/363 [============================>.] - ETA: 0s - loss: 0.3663\n",
      "val/train: 0.97\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3666 - val_loss: 0.3569\n"
     ]
    }
   ],
   "source": [
    "val_train_ratio_cb = PrintValTrainRatioCallback()\n",
    "history = model.fit(X_train, y_train, epochs=1,\n",
    "                    validation_data=(X_valid, y_valid),\n",
    "                    callbacks=[val_train_ratio_cb])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "63b72b74-0395-4b93-a181-0c52d497944b",
   "metadata": {},
   "source": [
    "# TensorBoard"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "6ed6f9c2-5a2c-4ff7-bef9-e0ecec798e7f",
   "metadata": {},
   "outputs": [],
   "source": [
    "root_logdir = os.path.join(os.curdir, \"my_logs\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "id": "ed016c8a-b352-4399-aa84-890c3294a4a2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'./my_logs/run_2024_09_16-05_09_17'"
      ]
     },
     "execution_count": 82,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def get_run_logdir():\n",
    "    import time\n",
    "    run_id = time.strftime(\"run_%Y_%m_%d-%H_%M_%S\")\n",
    "    return os.path.join(root_logdir, run_id)\n",
    "\n",
    "run_logdir = get_run_logdir()\n",
    "run_logdir"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "15cd2f61-6f8c-4e22-bf53-b727405f5dae",
   "metadata": {},
   "outputs": [],
   "source": [
    "keras.backend.clear_session()\n",
    "np.random.seed(100)\n",
    "tf.random.set_seed(100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "64531ade-db33-4b90-a3fa-83977a257c71",
   "metadata": {},
   "outputs": [],
   "source": [
    "model = keras.models.Sequential([\n",
    "    keras.layers.Dense(30, activation=\"relu\", input_shape=[8]),\n",
    "    keras.layers.Dense(30, activation=\"relu\"),\n",
    "    keras.layers.Dense(1)\n",
    "])\n",
    "model.compile(loss=\"mse\", optimizer=keras.optimizers.SGD(learning_rate=1e-3))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "18b717bf-08f2-45e9-b980-f25eadb85186",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/30\n",
      "363/363 [==============================] - 2s 3ms/step - loss: 2.5337 - val_loss: 1.2472\n",
      "Epoch 2/30\n",
      "363/363 [==============================] - 1s 2ms/step - loss: 0.9374 - val_loss: 0.7538\n",
      "Epoch 3/30\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.7202 - val_loss: 0.6494\n",
      "Epoch 4/30\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.6516 - val_loss: 0.6063\n",
      "Epoch 5/30\n",
      "363/363 [==============================] - 1s 2ms/step - loss: 0.6158 - val_loss: 0.5761\n",
      "Epoch 6/30\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.5906 - val_loss: 0.5546\n",
      "Epoch 7/30\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.5707 - val_loss: 0.5374\n",
      "Epoch 8/30\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.5541 - val_loss: 0.5229\n",
      "Epoch 9/30\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.5399 - val_loss: 0.5108\n",
      "Epoch 10/30\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.5279 - val_loss: 0.5009\n",
      "Epoch 11/30\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.5176 - val_loss: 0.4982\n",
      "Epoch 12/30\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.5094 - val_loss: 0.4889\n",
      "Epoch 13/30\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.5020 - val_loss: 0.4799\n",
      "Epoch 14/30\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.4959 - val_loss: 0.4737\n",
      "Epoch 15/30\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.4903 - val_loss: 0.4677\n",
      "Epoch 16/30\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.4854 - val_loss: 0.4657\n",
      "Epoch 17/30\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.4814 - val_loss: 0.4607\n",
      "Epoch 18/30\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.4775 - val_loss: 0.4566\n",
      "Epoch 19/30\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.4743 - val_loss: 0.4551\n",
      "Epoch 20/30\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.4711 - val_loss: 0.4519\n",
      "Epoch 21/30\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.4680 - val_loss: 0.4503\n",
      "Epoch 22/30\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.4656 - val_loss: 0.4444\n",
      "Epoch 23/30\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.4630 - val_loss: 0.4470\n",
      "Epoch 24/30\n",
      "363/363 [==============================] - 1s 2ms/step - loss: 0.4613 - val_loss: 0.4431\n",
      "Epoch 25/30\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.4591 - val_loss: 0.4417\n",
      "Epoch 26/30\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.4573 - val_loss: 0.4366\n",
      "Epoch 27/30\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.4555 - val_loss: 0.4333\n",
      "Epoch 28/30\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.4538 - val_loss: 0.4325\n",
      "Epoch 29/30\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.4521 - val_loss: 0.4316\n",
      "Epoch 30/30\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.4502 - val_loss: 0.4304\n"
     ]
    }
   ],
   "source": [
    "tensorboard_cb = keras.callbacks.TensorBoard(run_logdir)\n",
    "history = model.fit(X_train, y_train, epochs=30,\n",
    "                    validation_data=(X_valid, y_valid),\n",
    "                    callbacks=[checkpoint_cb, tensorboard_cb])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3b84b027-312d-465b-a7d7-88058683b8ce",
   "metadata": {},
   "source": [
    "To start the TensorBoard server, one option is to open a terminal, if needed activate the virtualenv where you installed TensorBoard, go to this notebook's directory, then type:\n",
    "\n",
    "```bash\n",
    "$ tensorboard --logdir=./my_logs --port=6006\n",
    "```\n",
    "\n",
    "You can then open your web browser to [localhost:6006](http://localhost:6006) and use TensorBoard. Once you are done, press Ctrl-C in the terminal window, this will shutdown the TensorBoard server.\n",
    "\n",
    "Alternatively, you can load TensorBoard's Jupyter extension and run it like this:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "id": "48bd7bff-01eb-4266-9a58-cc748eb58fbe",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "      <iframe id=\"tensorboard-frame-7977a19d8eac16ef\" width=\"100%\" height=\"800\" frameborder=\"0\">\n",
       "      </iframe>\n",
       "      <script>\n",
       "        (function() {\n",
       "          const frame = document.getElementById(\"tensorboard-frame-7977a19d8eac16ef\");\n",
       "          const url = new URL(\"/\", window.location);\n",
       "          const port = 6006;\n",
       "          if (port) {\n",
       "            url.port = port;\n",
       "          }\n",
       "          frame.src = url;\n",
       "        })();\n",
       "      </script>\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "%load_ext tensorboard\n",
    "%tensorboard --logdir=./my_logs --port=6006"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "id": "c4db0482-7f2d-4c8b-b5c9-867dd6ebb2fb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'./my_logs/run_2024_09_16-05_09_55'"
      ]
     },
     "execution_count": 87,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "run_logdir2 = get_run_logdir()\n",
    "run_logdir2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "id": "aba77fbb-3033-46c8-affa-1b518d627d00",
   "metadata": {},
   "outputs": [],
   "source": [
    "keras.backend.clear_session()\n",
    "np.random.seed(100)\n",
    "tf.random.set_seed(100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "id": "4b7d0b20-b3f8-4650-8d05-7d4390224cd4",
   "metadata": {},
   "outputs": [],
   "source": [
    "model = keras.models.Sequential([\n",
    "    keras.layers.Dense(30, activation=\"relu\", input_shape=[8]),\n",
    "    keras.layers.Dense(30, activation=\"relu\"),\n",
    "    keras.layers.Dense(1)\n",
    "])\n",
    "model.compile(loss=\"mse\", optimizer=keras.optimizers.SGD(learning_rate=0.05))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "id": "59b71f4c-27c5-43f7-89f5-27b61756abf0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/30\n",
      "363/363 [==============================] - 2s 3ms/step - loss: 0.6884 - val_loss: 0.3903\n",
      "Epoch 2/30\n",
      "363/363 [==============================] - 1s 3ms/step - loss: nan - val_loss: nan\n",
      "Epoch 3/30\n",
      "363/363 [==============================] - 1s 3ms/step - loss: nan - val_loss: nan\n",
      "Epoch 4/30\n",
      "363/363 [==============================] - 1s 4ms/step - loss: nan - val_loss: nan\n",
      "Epoch 5/30\n",
      "363/363 [==============================] - 2s 5ms/step - loss: nan - val_loss: nan\n",
      "Epoch 6/30\n",
      "363/363 [==============================] - 1s 4ms/step - loss: nan - val_loss: nan\n",
      "Epoch 7/30\n",
      "363/363 [==============================] - 1s 4ms/step - loss: nan - val_loss: nan\n",
      "Epoch 8/30\n",
      "363/363 [==============================] - 1s 3ms/step - loss: nan - val_loss: nan\n",
      "Epoch 9/30\n",
      "363/363 [==============================] - 1s 3ms/step - loss: nan - val_loss: nan\n",
      "Epoch 10/30\n",
      "363/363 [==============================] - 1s 3ms/step - loss: nan - val_loss: nan\n",
      "Epoch 11/30\n",
      "363/363 [==============================] - 1s 3ms/step - loss: nan - val_loss: nan\n",
      "Epoch 12/30\n",
      "363/363 [==============================] - 1s 3ms/step - loss: nan - val_loss: nan\n",
      "Epoch 13/30\n",
      "363/363 [==============================] - 1s 3ms/step - loss: nan - val_loss: nan\n",
      "Epoch 14/30\n",
      "363/363 [==============================] - 1s 3ms/step - loss: nan - val_loss: nan\n",
      "Epoch 15/30\n",
      "363/363 [==============================] - 1s 3ms/step - loss: nan - val_loss: nan\n",
      "Epoch 16/30\n",
      "363/363 [==============================] - 1s 3ms/step - loss: nan - val_loss: nan\n",
      "Epoch 17/30\n",
      "363/363 [==============================] - 1s 3ms/step - loss: nan - val_loss: nan\n",
      "Epoch 18/30\n",
      "363/363 [==============================] - 1s 3ms/step - loss: nan - val_loss: nan\n",
      "Epoch 19/30\n",
      "363/363 [==============================] - 1s 3ms/step - loss: nan - val_loss: nan\n",
      "Epoch 20/30\n",
      "363/363 [==============================] - 1s 3ms/step - loss: nan - val_loss: nan\n",
      "Epoch 21/30\n",
      "363/363 [==============================] - 1s 3ms/step - loss: nan - val_loss: nan\n",
      "Epoch 22/30\n",
      "363/363 [==============================] - 1s 3ms/step - loss: nan - val_loss: nan\n",
      "Epoch 23/30\n",
      "363/363 [==============================] - 1s 3ms/step - loss: nan - val_loss: nan\n",
      "Epoch 24/30\n",
      "363/363 [==============================] - 1s 3ms/step - loss: nan - val_loss: nan\n",
      "Epoch 25/30\n",
      "363/363 [==============================] - 1s 3ms/step - loss: nan - val_loss: nan\n",
      "Epoch 26/30\n",
      "363/363 [==============================] - 1s 3ms/step - loss: nan - val_loss: nan\n",
      "Epoch 27/30\n",
      "363/363 [==============================] - 1s 3ms/step - loss: nan - val_loss: nan\n",
      "Epoch 28/30\n",
      "363/363 [==============================] - 1s 3ms/step - loss: nan - val_loss: nan\n",
      "Epoch 29/30\n",
      "363/363 [==============================] - 1s 2ms/step - loss: nan - val_loss: nan\n",
      "Epoch 30/30\n",
      "363/363 [==============================] - 1s 3ms/step - loss: nan - val_loss: nan\n"
     ]
    }
   ],
   "source": [
    "tensorboard_cb = keras.callbacks.TensorBoard(run_logdir2)\n",
    "history = model.fit(X_train, y_train, epochs=30,\n",
    "                    validation_data=(X_valid, y_valid),\n",
    "                    callbacks=[checkpoint_cb, tensorboard_cb])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cb646a1e-7883-499c-a6c9-c2f5a4f6c411",
   "metadata": {},
   "source": [
    "Notice how TensorBoard now sees two runs, and you can compare the learning curves."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "038197ce-de5c-4bd2-90ad-d639e1960b26",
   "metadata": {},
   "source": [
    "Check out the other available logging options:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "id": "ff327b51-8b41-46e4-8a7b-49f1b5b16e3a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Help on function __init__ in module keras.callbacks:\n",
      "\n",
      "__init__(self, log_dir='logs', histogram_freq=0, write_graph=True, write_images=False, write_steps_per_second=False, update_freq='epoch', profile_batch=0, embeddings_freq=0, embeddings_metadata=None, **kwargs)\n",
      "    Initialize self.  See help(type(self)) for accurate signature.\n",
      "\n"
     ]
    }
   ],
   "source": [
    "help(keras.callbacks.TensorBoard.__init__)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "20cff946-8447-46d2-a701-207f618ce9bf",
   "metadata": {},
   "source": [
    "# Hyperparameter Tuning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "id": "b80f0aba-55ac-4ae1-86b3-f575a69f1ac0",
   "metadata": {},
   "outputs": [],
   "source": [
    "keras.backend.clear_session()\n",
    "np.random.seed(100)\n",
    "tf.random.set_seed(100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "id": "c2f390df-98f7-40f1-9517-b9744b2c78b3",
   "metadata": {},
   "outputs": [],
   "source": [
    "def build_model(n_hidden=1, n_neurons=30, learning_rate=3e-3, input_shape=[8]):\n",
    "    model = keras.models.Sequential()\n",
    "    model.add(keras.layers.InputLayer(input_shape=input_shape))\n",
    "    for layer in range(n_hidden):\n",
    "        model.add(keras.layers.Dense(n_neurons, activation=\"relu\"))\n",
    "    model.add(keras.layers.Dense(1))\n",
    "    optimizer = keras.optimizers.SGD(learning_rate=learning_rate)\n",
    "    model.compile(loss=\"mse\", optimizer=optimizer)\n",
    "    return model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "id": "66138d3e-32bc-46df-8f60-0a4a39962b3f",
   "metadata": {},
   "outputs": [],
   "source": [
    "keras_reg = keras.wrappers.scikit_learn.KerasRegressor(build_model)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "id": "d568ca7b-d7ff-4f36-96c2-79cc80402924",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/100\n",
      "363/363 [==============================] - 2s 3ms/step - loss: 1.1180 - val_loss: 0.5756\n",
      "Epoch 2/100\n",
      "363/363 [==============================] - 1s 2ms/step - loss: 0.6121 - val_loss: 0.5272\n",
      "Epoch 3/100\n",
      "363/363 [==============================] - 1s 2ms/step - loss: 0.5364 - val_loss: 0.4913\n",
      "Epoch 4/100\n",
      "363/363 [==============================] - 1s 2ms/step - loss: 0.5067 - val_loss: 0.4682\n",
      "Epoch 5/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.4890 - val_loss: 0.4533\n",
      "Epoch 6/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.4775 - val_loss: 0.4440\n",
      "Epoch 7/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.4680 - val_loss: 0.4416\n",
      "Epoch 8/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.4614 - val_loss: 0.4285\n",
      "Epoch 9/100\n",
      "363/363 [==============================] - 1s 2ms/step - loss: 0.4548 - val_loss: 0.4240\n",
      "Epoch 10/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.4496 - val_loss: 0.4214\n",
      "Epoch 11/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.4453 - val_loss: 0.4167\n",
      "Epoch 12/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.4412 - val_loss: 0.4164\n",
      "Epoch 13/100\n",
      "363/363 [==============================] - 1s 2ms/step - loss: 0.4377 - val_loss: 0.4139\n",
      "Epoch 14/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.4353 - val_loss: 0.4088\n",
      "Epoch 15/100\n",
      "363/363 [==============================] - 1s 2ms/step - loss: 0.4323 - val_loss: 0.4101\n",
      "Epoch 16/100\n",
      "363/363 [==============================] - 1s 2ms/step - loss: 0.4291 - val_loss: 0.4056\n",
      "Epoch 17/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.4276 - val_loss: 0.4014\n",
      "Epoch 18/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.4246 - val_loss: 0.4017\n",
      "Epoch 19/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.4230 - val_loss: 0.4071\n",
      "Epoch 20/100\n",
      "363/363 [==============================] - 1s 2ms/step - loss: 0.4206 - val_loss: 0.4091\n",
      "Epoch 21/100\n",
      "363/363 [==============================] - 1s 2ms/step - loss: 0.4191 - val_loss: 0.4000\n",
      "Epoch 22/100\n",
      "363/363 [==============================] - 1s 2ms/step - loss: 0.4174 - val_loss: 0.3946\n",
      "Epoch 23/100\n",
      "363/363 [==============================] - 1s 2ms/step - loss: 0.4157 - val_loss: 0.4021\n",
      "Epoch 24/100\n",
      "363/363 [==============================] - 1s 2ms/step - loss: 0.4145 - val_loss: 0.3986\n",
      "Epoch 25/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.4132 - val_loss: 0.4021\n",
      "Epoch 26/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.4115 - val_loss: 0.3972\n",
      "Epoch 27/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.4103 - val_loss: 0.3889\n",
      "Epoch 28/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.4092 - val_loss: 0.3886\n",
      "Epoch 29/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.4080 - val_loss: 0.3867\n",
      "Epoch 30/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.4064 - val_loss: 0.3881\n",
      "Epoch 31/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.4050 - val_loss: 0.3898\n",
      "Epoch 32/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.4044 - val_loss: 0.3847\n",
      "Epoch 33/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.4032 - val_loss: 0.3842\n",
      "Epoch 34/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.4024 - val_loss: 0.3828\n",
      "Epoch 35/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.4014 - val_loss: 0.3825\n",
      "Epoch 36/100\n",
      "363/363 [==============================] - 1s 2ms/step - loss: 0.4000 - val_loss: 0.3801\n",
      "Epoch 37/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3987 - val_loss: 0.3808\n",
      "Epoch 38/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3982 - val_loss: 0.3784\n",
      "Epoch 39/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3977 - val_loss: 0.3781\n",
      "Epoch 40/100\n",
      "363/363 [==============================] - 1s 2ms/step - loss: 0.3962 - val_loss: 0.3780\n",
      "Epoch 41/100\n",
      "363/363 [==============================] - 1s 2ms/step - loss: 0.3956 - val_loss: 0.3770\n",
      "Epoch 42/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3941 - val_loss: 0.3755\n",
      "Epoch 43/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3935 - val_loss: 0.3787\n",
      "Epoch 44/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3928 - val_loss: 0.3818\n",
      "Epoch 45/100\n",
      "363/363 [==============================] - 1s 2ms/step - loss: 0.3928 - val_loss: 0.3823\n",
      "Epoch 46/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3916 - val_loss: 0.3777\n",
      "Epoch 47/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3910 - val_loss: 0.3750\n",
      "Epoch 48/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3903 - val_loss: 0.3714\n",
      "Epoch 49/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3890 - val_loss: 0.3733\n",
      "Epoch 50/100\n",
      "363/363 [==============================] - 1s 2ms/step - loss: 0.3884 - val_loss: 0.3716\n",
      "Epoch 51/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3883 - val_loss: 0.3701\n",
      "Epoch 52/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3868 - val_loss: 0.3696\n",
      "Epoch 53/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3864 - val_loss: 0.3694\n",
      "Epoch 54/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3859 - val_loss: 0.3828\n",
      "Epoch 55/100\n",
      "363/363 [==============================] - 1s 2ms/step - loss: 0.3852 - val_loss: 0.3725\n",
      "Epoch 56/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3849 - val_loss: 0.3684\n",
      "Epoch 57/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3840 - val_loss: 0.3698\n",
      "Epoch 58/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3838 - val_loss: 0.3683\n",
      "Epoch 59/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3829 - val_loss: 0.3704\n",
      "Epoch 60/100\n",
      "363/363 [==============================] - 1s 2ms/step - loss: 0.3820 - val_loss: 0.3652\n",
      "Epoch 61/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3822 - val_loss: 0.3666\n",
      "Epoch 62/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3812 - val_loss: 0.3724\n",
      "Epoch 63/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3805 - val_loss: 0.3663\n",
      "Epoch 64/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3804 - val_loss: 0.3656\n",
      "Epoch 65/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3797 - val_loss: 0.3742\n",
      "Epoch 66/100\n",
      "363/363 [==============================] - 1s 2ms/step - loss: 0.3798 - val_loss: 0.3650\n",
      "Epoch 67/100\n",
      "363/363 [==============================] - 1s 2ms/step - loss: 0.3785 - val_loss: 0.3638\n",
      "Epoch 68/100\n",
      "363/363 [==============================] - 1s 2ms/step - loss: 0.3791 - val_loss: 0.3640\n",
      "Epoch 69/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3779 - val_loss: 0.3663\n",
      "Epoch 70/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3776 - val_loss: 0.3672\n",
      "Epoch 71/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3769 - val_loss: 0.3701\n",
      "Epoch 72/100\n",
      "363/363 [==============================] - 1s 2ms/step - loss: 0.3775 - val_loss: 0.3652\n",
      "Epoch 73/100\n",
      "363/363 [==============================] - 1s 2ms/step - loss: 0.3770 - val_loss: 0.3633\n",
      "Epoch 74/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3755 - val_loss: 0.3648\n",
      "Epoch 75/100\n",
      "363/363 [==============================] - 1s 2ms/step - loss: 0.3750 - val_loss: 0.3615\n",
      "Epoch 76/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3749 - val_loss: 0.3627\n",
      "Epoch 77/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3742 - val_loss: 0.3638\n",
      "Epoch 78/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3744 - val_loss: 0.3618\n",
      "Epoch 79/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3739 - val_loss: 0.3619\n",
      "Epoch 80/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3732 - val_loss: 0.3697\n",
      "Epoch 81/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3727 - val_loss: 0.3595\n",
      "Epoch 82/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3723 - val_loss: 0.3618\n",
      "Epoch 83/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3714 - val_loss: 0.3658\n",
      "Epoch 84/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3714 - val_loss: 0.3588\n",
      "Epoch 85/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3727 - val_loss: 0.3708\n",
      "Epoch 86/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3707 - val_loss: 0.3583\n",
      "Epoch 87/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3700 - val_loss: 0.3577\n",
      "Epoch 88/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3692 - val_loss: 0.3660\n",
      "Epoch 89/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3691 - val_loss: 0.3662\n",
      "Epoch 90/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3689 - val_loss: 0.3595\n",
      "Epoch 91/100\n",
      "363/363 [==============================] - 1s 4ms/step - loss: 0.3685 - val_loss: 0.3600\n",
      "Epoch 92/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3675 - val_loss: 0.3603\n",
      "Epoch 93/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3672 - val_loss: 0.3691\n",
      "Epoch 94/100\n",
      "363/363 [==============================] - 1s 4ms/step - loss: 0.3661 - val_loss: 0.3701\n",
      "Epoch 95/100\n",
      "363/363 [==============================] - 1s 4ms/step - loss: 0.3661 - val_loss: 0.3540\n",
      "Epoch 96/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3653 - val_loss: 0.3546\n",
      "Epoch 97/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3653 - val_loss: 0.3532\n",
      "Epoch 98/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3643 - val_loss: 0.3565\n",
      "Epoch 99/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3641 - val_loss: 0.3578\n",
      "Epoch 100/100\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3629 - val_loss: 0.3568\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.callbacks.History at 0x7fc5185607f0>"
      ]
     },
     "execution_count": 95,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "keras_reg.fit(X_train, y_train, epochs=100,\n",
    "              validation_data=(X_valid, y_valid),\n",
    "              callbacks=[keras.callbacks.EarlyStopping(patience=10)])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "id": "279cbafd-3ace-4f6b-ab89-061c2c42914d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "162/162 [==============================] - 0s 2ms/step - loss: 0.3458\n"
     ]
    }
   ],
   "source": [
    "mse_test = keras_reg.score(X_test, y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "id": "fca1b347-4c42-4508-8cb1-aaee980f8dc9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1/1 [==============================] - 0s 87ms/step\n"
     ]
    }
   ],
   "source": [
    "y_pred = keras_reg.predict(X_new)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "id": "bdb90201-d5be-475e-9ba3-c6022160cf55",
   "metadata": {},
   "outputs": [],
   "source": [
    "np.random.seed(100)\n",
    "tf.random.set_seed(100)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3f6c69fa-7428-4ac4-8249-52eff45a00c9",
   "metadata": {},
   "source": [
    "**Warning**: the following cell crashes at the end of training. This seems to be caused by [Keras issue #13586](https://github.com/keras-team/keras/issues/13586), which was triggered by a recent change in Scikit-Learn. [Pull Request #13598](https://github.com/keras-team/keras/pull/13598) seems to fix the issue, so this problem should be resolved soon. In the meantime, I've added `.tolist()` and `.rvs(1000).tolist()` as workarounds."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "id": "41def4f4-3c26-47c1-964b-7e564896e8f3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 3 folds for each of 10 candidates, totalling 30 fits\n",
      "Epoch 1/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 2.7058 - val_loss: 1.2368\n",
      "Epoch 2/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.9244 - val_loss: 0.7335\n",
      "Epoch 3/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.6999 - val_loss: 0.6497\n",
      "Epoch 4/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.6513 - val_loss: 0.6158\n",
      "Epoch 5/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.6272 - val_loss: 0.5943\n",
      "Epoch 6/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.6090 - val_loss: 0.5759\n",
      "Epoch 7/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5949 - val_loss: 0.5631\n",
      "Epoch 8/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5832 - val_loss: 0.5530\n",
      "Epoch 9/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.5739 - val_loss: 0.5455\n",
      "Epoch 10/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.5664 - val_loss: 0.5388\n",
      "Epoch 11/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.5603 - val_loss: 0.5347\n",
      "Epoch 12/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.5549 - val_loss: 0.5295\n",
      "Epoch 13/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.5516 - val_loss: 0.5274\n",
      "Epoch 14/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5483 - val_loss: 0.5267\n",
      "Epoch 15/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5456 - val_loss: 0.5265\n",
      "Epoch 16/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.5436 - val_loss: 0.5271\n",
      "Epoch 17/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5418 - val_loss: 0.5254\n",
      "Epoch 18/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5405 - val_loss: 0.5284\n",
      "Epoch 19/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5393 - val_loss: 0.5280\n",
      "Epoch 20/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5386 - val_loss: 0.5270\n",
      "Epoch 21/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5379 - val_loss: 0.5293\n",
      "Epoch 22/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5373 - val_loss: 0.5282\n",
      "Epoch 23/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5368 - val_loss: 0.5230\n",
      "Epoch 24/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5364 - val_loss: 0.5279\n",
      "Epoch 25/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5360 - val_loss: 0.5264\n",
      "Epoch 26/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5359 - val_loss: 0.5276\n",
      "Epoch 27/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5357 - val_loss: 0.5292\n",
      "Epoch 28/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5354 - val_loss: 0.5304\n",
      "Epoch 29/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5353 - val_loss: 0.5286\n",
      "Epoch 30/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5354 - val_loss: 0.5330\n",
      "Epoch 31/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5350 - val_loss: 0.5251\n",
      "Epoch 32/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5353 - val_loss: 0.5266\n",
      "Epoch 33/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5351 - val_loss: 0.5276\n",
      "121/121 [==============================] - 0s 2ms/step - loss: 0.5390\n",
      "[CV] END learning_rate=0.002258954294943652, n_hidden=0, n_neurons=10; total time=  26.3s\n",
      "Epoch 1/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 3.5180 - val_loss: 1.5018\n",
      "Epoch 2/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 1.0093 - val_loss: 0.7458\n",
      "Epoch 3/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.6992 - val_loss: 0.6350\n",
      "Epoch 4/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.6404 - val_loss: 0.6021\n",
      "Epoch 5/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.6161 - val_loss: 0.5835\n",
      "Epoch 6/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5999 - val_loss: 0.5699\n",
      "Epoch 7/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5874 - val_loss: 0.5598\n",
      "Epoch 8/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5774 - val_loss: 0.5524\n",
      "Epoch 9/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.5691 - val_loss: 0.5475\n",
      "Epoch 10/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5626 - val_loss: 0.5433\n",
      "Epoch 11/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5572 - val_loss: 0.5398\n",
      "Epoch 12/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5526 - val_loss: 0.5368\n",
      "Epoch 13/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5491 - val_loss: 0.5355\n",
      "Epoch 14/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5462 - val_loss: 0.5356\n",
      "Epoch 15/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5436 - val_loss: 0.5360\n",
      "Epoch 16/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5417 - val_loss: 0.5382\n",
      "Epoch 17/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5401 - val_loss: 0.5348\n",
      "Epoch 18/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5387 - val_loss: 0.5364\n",
      "Epoch 19/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5375 - val_loss: 0.5366\n",
      "Epoch 20/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5365 - val_loss: 0.5399\n",
      "Epoch 21/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5359 - val_loss: 0.5415\n",
      "Epoch 22/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5353 - val_loss: 0.5411\n",
      "Epoch 23/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5347 - val_loss: 0.5379\n",
      "Epoch 24/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5343 - val_loss: 0.5407\n",
      "Epoch 25/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5340 - val_loss: 0.5372\n",
      "Epoch 26/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5333 - val_loss: 0.5422\n",
      "Epoch 27/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5332 - val_loss: 0.5385\n",
      "121/121 [==============================] - 0s 2ms/step - loss: 0.5488\n",
      "[CV] END learning_rate=0.002258954294943652, n_hidden=0, n_neurons=10; total time=  21.2s\n",
      "Epoch 1/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 2.9526 - val_loss: 1.1854\n",
      "Epoch 2/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.8929 - val_loss: 0.6788\n",
      "Epoch 3/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.6618 - val_loss: 0.6094\n",
      "Epoch 4/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.6255 - val_loss: 0.5936\n",
      "Epoch 5/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.6117 - val_loss: 0.5835\n",
      "Epoch 6/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.6022 - val_loss: 0.5756\n",
      "Epoch 7/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5940 - val_loss: 0.5695\n",
      "Epoch 8/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5867 - val_loss: 0.5636\n",
      "Epoch 9/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5810 - val_loss: 0.5612\n",
      "Epoch 10/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5758 - val_loss: 0.5552\n",
      "Epoch 11/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5718 - val_loss: 0.5539\n",
      "Epoch 12/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5681 - val_loss: 0.5504\n",
      "Epoch 13/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5646 - val_loss: 0.5480\n",
      "Epoch 14/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5620 - val_loss: 0.5451\n",
      "Epoch 15/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5593 - val_loss: 0.5431\n",
      "Epoch 16/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5570 - val_loss: 0.5462\n",
      "Epoch 17/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5553 - val_loss: 0.5457\n",
      "Epoch 18/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5537 - val_loss: 0.5433\n",
      "Epoch 19/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5523 - val_loss: 0.5378\n",
      "Epoch 20/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5510 - val_loss: 0.5374\n",
      "Epoch 21/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5502 - val_loss: 0.5397\n",
      "Epoch 22/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5491 - val_loss: 0.5373\n",
      "Epoch 23/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5479 - val_loss: 0.5331\n",
      "Epoch 24/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5476 - val_loss: 0.5362\n",
      "Epoch 25/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5468 - val_loss: 0.5341\n",
      "Epoch 26/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5459 - val_loss: 0.5358\n",
      "Epoch 27/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.5458 - val_loss: 0.5331\n",
      "Epoch 28/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.5448 - val_loss: 0.5318\n",
      "Epoch 29/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.5447 - val_loss: 0.5291\n",
      "Epoch 30/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.5443 - val_loss: 0.5309\n",
      "Epoch 31/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5436 - val_loss: 0.5360\n",
      "Epoch 32/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.5435 - val_loss: 0.5296\n",
      "Epoch 33/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5434 - val_loss: 0.5295\n",
      "Epoch 34/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.5432 - val_loss: 0.5320\n",
      "Epoch 35/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5428 - val_loss: 0.5308\n",
      "Epoch 36/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5425 - val_loss: 0.5325\n",
      "Epoch 37/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5427 - val_loss: 0.5327\n",
      "Epoch 38/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5425 - val_loss: 0.5312\n",
      "Epoch 39/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5422 - val_loss: 0.5288\n",
      "Epoch 40/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5423 - val_loss: 0.5281\n",
      "Epoch 41/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5420 - val_loss: 0.5316\n",
      "Epoch 42/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5419 - val_loss: 0.5313\n",
      "Epoch 43/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5418 - val_loss: 0.5277\n",
      "Epoch 44/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5418 - val_loss: 0.5291\n",
      "Epoch 45/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5416 - val_loss: 0.5277\n",
      "Epoch 46/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5415 - val_loss: 0.5307\n",
      "Epoch 47/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5416 - val_loss: 0.5310\n",
      "Epoch 48/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5413 - val_loss: 0.5276\n",
      "Epoch 49/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5416 - val_loss: 0.5279\n",
      "Epoch 50/50\n",
      "242/242 [==============================] - 1s 2ms/step - loss: 0.5416 - val_loss: 0.5269\n",
      "121/121 [==============================] - 0s 2ms/step - loss: 0.5269\n",
      "[CV] END learning_rate=0.002258954294943652, n_hidden=0, n_neurons=10; total time=  38.6s\n",
      "Epoch 1/50\n",
      "242/242 [==============================] - 2s 4ms/step - loss: 1.2170 - val_loss: 0.6492\n",
      "Epoch 2/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.6217 - val_loss: 0.5520\n",
      "Epoch 3/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5485 - val_loss: 0.5030\n",
      "Epoch 4/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5091 - val_loss: 0.4723\n",
      "Epoch 5/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4870 - val_loss: 0.4546\n",
      "Epoch 6/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4685 - val_loss: 0.4421\n",
      "Epoch 7/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4577 - val_loss: 0.4333\n",
      "Epoch 8/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4491 - val_loss: 0.4245\n",
      "Epoch 9/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4409 - val_loss: 0.4169\n",
      "Epoch 10/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4352 - val_loss: 0.4123\n",
      "Epoch 11/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4293 - val_loss: 0.4060\n",
      "Epoch 12/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4244 - val_loss: 0.4047\n",
      "Epoch 13/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.4210 - val_loss: 0.3983\n",
      "Epoch 14/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4168 - val_loss: 0.3991\n",
      "Epoch 15/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4134 - val_loss: 0.3962\n",
      "Epoch 16/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4103 - val_loss: 0.3912\n",
      "Epoch 17/50\n",
      "242/242 [==============================] - 1s 2ms/step - loss: 0.4081 - val_loss: 0.3888\n",
      "Epoch 18/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4048 - val_loss: 0.3868\n",
      "Epoch 19/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4018 - val_loss: 0.3849\n",
      "Epoch 20/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3997 - val_loss: 0.3822\n",
      "Epoch 21/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3984 - val_loss: 0.3795\n",
      "Epoch 22/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3948 - val_loss: 0.3816\n",
      "Epoch 23/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3939 - val_loss: 0.3742\n",
      "Epoch 24/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3916 - val_loss: 0.3778\n",
      "Epoch 25/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3888 - val_loss: 0.3720\n",
      "Epoch 26/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3862 - val_loss: 0.3733\n",
      "Epoch 27/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3849 - val_loss: 0.3712\n",
      "Epoch 28/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3820 - val_loss: 0.3664\n",
      "Epoch 29/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3808 - val_loss: 0.3660\n",
      "Epoch 30/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3789 - val_loss: 0.3663\n",
      "Epoch 31/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3771 - val_loss: 0.3655\n",
      "Epoch 32/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3755 - val_loss: 0.3616\n",
      "Epoch 33/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3728 - val_loss: 0.3634\n",
      "Epoch 34/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3722 - val_loss: 0.3583\n",
      "Epoch 35/50\n",
      "242/242 [==============================] - 1s 2ms/step - loss: 0.3737 - val_loss: 0.3576\n",
      "Epoch 36/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3694 - val_loss: 0.3568\n",
      "Epoch 37/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3684 - val_loss: 0.3583\n",
      "Epoch 38/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3658 - val_loss: 0.3527\n",
      "Epoch 39/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3639 - val_loss: 0.3546\n",
      "Epoch 40/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3640 - val_loss: 0.3542\n",
      "Epoch 41/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3661 - val_loss: 0.3592\n",
      "Epoch 42/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3607 - val_loss: 0.3539\n",
      "Epoch 43/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3710 - val_loss: 0.3624\n",
      "Epoch 44/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3586 - val_loss: 0.3515\n",
      "Epoch 45/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3584 - val_loss: 0.3512\n",
      "Epoch 46/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3548 - val_loss: 0.3563\n",
      "Epoch 47/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3561 - val_loss: 0.3518\n",
      "Epoch 48/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3533 - val_loss: 0.3479\n",
      "Epoch 49/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3522 - val_loss: 0.3478\n",
      "Epoch 50/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3518 - val_loss: 0.3497\n",
      "121/121 [==============================] - 0s 2ms/step - loss: 0.3683\n",
      "[CV] END learning_rate=0.004353582212679653, n_hidden=2, n_neurons=25; total time=  36.6s\n",
      "Epoch 1/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 1.3063 - val_loss: 0.7194\n",
      "Epoch 2/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.6676 - val_loss: 0.5863\n",
      "Epoch 3/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5746 - val_loss: 0.5254\n",
      "Epoch 4/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5273 - val_loss: 0.4902\n",
      "Epoch 5/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4985 - val_loss: 0.4700\n",
      "Epoch 6/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.4789 - val_loss: 0.4556\n",
      "Epoch 7/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.4649 - val_loss: 0.4450\n",
      "Epoch 8/50\n",
      "242/242 [==============================] - 1s 5ms/step - loss: 0.4535 - val_loss: 0.4333\n",
      "Epoch 9/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.4446 - val_loss: 0.4271\n",
      "Epoch 10/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4377 - val_loss: 0.4227\n",
      "Epoch 11/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.4314 - val_loss: 0.4131\n",
      "Epoch 12/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4250 - val_loss: 0.4122\n",
      "Epoch 13/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4193 - val_loss: 0.4082\n",
      "Epoch 14/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4162 - val_loss: 0.4019\n",
      "Epoch 15/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4112 - val_loss: 0.3969\n",
      "Epoch 16/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4079 - val_loss: 0.3977\n",
      "Epoch 17/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4037 - val_loss: 0.3988\n",
      "Epoch 18/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3997 - val_loss: 0.3867\n",
      "Epoch 19/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3955 - val_loss: 0.3844\n",
      "Epoch 20/50\n",
      "242/242 [==============================] - 1s 2ms/step - loss: 0.3938 - val_loss: 0.3832\n",
      "Epoch 21/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3911 - val_loss: 0.3827\n",
      "Epoch 22/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3886 - val_loss: 0.3807\n",
      "Epoch 23/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3867 - val_loss: 0.3776\n",
      "Epoch 24/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3812 - val_loss: 0.3778\n",
      "Epoch 25/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3813 - val_loss: 0.3705\n",
      "Epoch 26/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3780 - val_loss: 0.3734\n",
      "Epoch 27/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3756 - val_loss: 0.3850\n",
      "Epoch 28/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3741 - val_loss: 0.3648\n",
      "Epoch 29/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3735 - val_loss: 0.3698\n",
      "Epoch 30/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3689 - val_loss: 0.3625\n",
      "Epoch 31/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3669 - val_loss: 0.3632\n",
      "Epoch 32/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3651 - val_loss: 0.3600\n",
      "Epoch 33/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3629 - val_loss: 0.3619\n",
      "Epoch 34/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3621 - val_loss: 0.3622\n",
      "Epoch 35/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3592 - val_loss: 0.3621\n",
      "Epoch 36/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3583 - val_loss: 0.4036\n",
      "Epoch 37/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3572 - val_loss: 0.3565\n",
      "Epoch 38/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3556 - val_loss: 0.3642\n",
      "Epoch 39/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3522 - val_loss: 0.3556\n",
      "Epoch 40/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3516 - val_loss: 0.3743\n",
      "Epoch 41/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3502 - val_loss: 0.3596\n",
      "Epoch 42/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3491 - val_loss: 0.3535\n",
      "Epoch 43/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3476 - val_loss: 0.3501\n",
      "Epoch 44/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3457 - val_loss: 0.3602\n",
      "Epoch 45/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3454 - val_loss: 0.3547\n",
      "Epoch 46/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3442 - val_loss: 0.3514\n",
      "Epoch 47/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3419 - val_loss: 0.3489\n",
      "Epoch 48/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3420 - val_loss: 0.3538\n",
      "Epoch 49/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3411 - val_loss: 0.3513\n",
      "Epoch 50/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3386 - val_loss: 0.3515\n",
      "121/121 [==============================] - 0s 2ms/step - loss: 0.3702\n",
      "[CV] END learning_rate=0.004353582212679653, n_hidden=2, n_neurons=25; total time=  41.8s\n",
      "Epoch 1/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 1.0400 - val_loss: 0.6245\n",
      "Epoch 2/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.7123 - val_loss: 0.5471\n",
      "Epoch 3/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.6074 - val_loss: 0.4800\n",
      "Epoch 4/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5029 - val_loss: 0.4601\n",
      "Epoch 5/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4732 - val_loss: 0.4396\n",
      "Epoch 6/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4579 - val_loss: 0.4284\n",
      "Epoch 7/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4480 - val_loss: 0.4213\n",
      "Epoch 8/50\n",
      "242/242 [==============================] - 1s 2ms/step - loss: 0.4401 - val_loss: 0.4138\n",
      "Epoch 9/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4332 - val_loss: 0.4153\n",
      "Epoch 10/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4294 - val_loss: 0.4045\n",
      "Epoch 11/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4255 - val_loss: 0.4001\n",
      "Epoch 12/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4212 - val_loss: 0.3990\n",
      "Epoch 13/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4174 - val_loss: 0.3976\n",
      "Epoch 14/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4143 - val_loss: 0.3899\n",
      "Epoch 15/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4098 - val_loss: 0.3879\n",
      "Epoch 16/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4070 - val_loss: 0.3886\n",
      "Epoch 17/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4045 - val_loss: 0.3866\n",
      "Epoch 18/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4014 - val_loss: 0.3820\n",
      "Epoch 19/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3989 - val_loss: 0.3772\n",
      "Epoch 20/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3957 - val_loss: 0.3753\n",
      "Epoch 21/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3940 - val_loss: 0.3733\n",
      "Epoch 22/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3911 - val_loss: 0.3706\n",
      "Epoch 23/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3890 - val_loss: 0.3685\n",
      "Epoch 24/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3861 - val_loss: 0.3675\n",
      "Epoch 25/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3850 - val_loss: 0.3660\n",
      "Epoch 26/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3825 - val_loss: 0.3655\n",
      "Epoch 27/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3806 - val_loss: 0.3645\n",
      "Epoch 28/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3788 - val_loss: 0.3603\n",
      "Epoch 29/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3758 - val_loss: 0.3636\n",
      "Epoch 30/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3743 - val_loss: 0.3586\n",
      "Epoch 31/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.3735 - val_loss: 0.3552\n",
      "Epoch 32/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.3713 - val_loss: 0.3566\n",
      "Epoch 33/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3698 - val_loss: 0.3519\n",
      "Epoch 34/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3682 - val_loss: 0.3543\n",
      "Epoch 35/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3676 - val_loss: 0.3523\n",
      "Epoch 36/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3654 - val_loss: 0.3528\n",
      "Epoch 37/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3626 - val_loss: 0.3492\n",
      "Epoch 38/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3627 - val_loss: 0.3486\n",
      "Epoch 39/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3613 - val_loss: 0.3456\n",
      "Epoch 40/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3598 - val_loss: 0.3485\n",
      "Epoch 41/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3594 - val_loss: 0.3426\n",
      "Epoch 42/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3570 - val_loss: 0.3452\n",
      "Epoch 43/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3564 - val_loss: 0.3439\n",
      "Epoch 44/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3564 - val_loss: 0.3471\n",
      "Epoch 45/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3595 - val_loss: 0.3409\n",
      "Epoch 46/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3700 - val_loss: 0.3385\n",
      "Epoch 47/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3876 - val_loss: 0.3478\n",
      "Epoch 48/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3842 - val_loss: 0.3386\n",
      "Epoch 49/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3514 - val_loss: 0.3369\n",
      "Epoch 50/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3496 - val_loss: 0.3355\n",
      "121/121 [==============================] - 0s 2ms/step - loss: 0.3547\n",
      "[CV] END learning_rate=0.004353582212679653, n_hidden=2, n_neurons=25; total time=  38.5s\n",
      "Epoch 1/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.7048 - val_loss: 0.8304\n",
      "Epoch 2/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5177 - val_loss: 0.4328\n",
      "Epoch 3/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.4536 - val_loss: 0.4167\n",
      "Epoch 4/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4278 - val_loss: 0.4036\n",
      "Epoch 5/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4112 - val_loss: 0.3949\n",
      "Epoch 6/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3932 - val_loss: 0.4253\n",
      "Epoch 7/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3837 - val_loss: 0.3535\n",
      "Epoch 8/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.3794 - val_loss: 0.3515\n",
      "Epoch 9/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3674 - val_loss: 0.3906\n",
      "Epoch 10/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3608 - val_loss: 0.3379\n",
      "Epoch 11/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3508 - val_loss: 0.3377\n",
      "Epoch 12/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.3481 - val_loss: 0.3995\n",
      "Epoch 13/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3444 - val_loss: 0.3907\n",
      "Epoch 14/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3431 - val_loss: 0.3356\n",
      "Epoch 15/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3320 - val_loss: 0.3552\n",
      "Epoch 16/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.3356 - val_loss: 0.3205\n",
      "Epoch 17/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.3300 - val_loss: 0.3511\n",
      "Epoch 18/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3267 - val_loss: 0.3144\n",
      "Epoch 19/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3193 - val_loss: 0.3299\n",
      "Epoch 20/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3237 - val_loss: 0.3477\n",
      "Epoch 21/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3178 - val_loss: 0.3291\n",
      "Epoch 22/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3163 - val_loss: 0.3085\n",
      "Epoch 23/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3177 - val_loss: 0.3064\n",
      "Epoch 24/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.3140 - val_loss: 0.3131\n",
      "Epoch 25/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3098 - val_loss: 0.3239\n",
      "Epoch 26/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.3058 - val_loss: 0.3286\n",
      "Epoch 27/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3097 - val_loss: 0.3178\n",
      "Epoch 28/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3043 - val_loss: 0.3056\n",
      "Epoch 29/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3053 - val_loss: 0.3248\n",
      "Epoch 30/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.3005 - val_loss: 0.3327\n",
      "Epoch 31/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.3010 - val_loss: 0.3106\n",
      "Epoch 32/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.2987 - val_loss: 0.3022\n",
      "Epoch 33/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.2977 - val_loss: 0.2987\n",
      "Epoch 34/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.2969 - val_loss: 0.3021\n",
      "Epoch 35/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.2935 - val_loss: 0.3335\n",
      "Epoch 36/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.2930 - val_loss: 0.3343\n",
      "Epoch 37/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.2981 - val_loss: 0.3024\n",
      "Epoch 38/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.2943 - val_loss: 0.3057\n",
      "Epoch 39/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.2881 - val_loss: 0.3208\n",
      "Epoch 40/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.2937 - val_loss: 0.2989\n",
      "Epoch 41/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.2875 - val_loss: 0.3281\n",
      "Epoch 42/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.2894 - val_loss: 0.3049\n",
      "Epoch 43/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.2865 - val_loss: 0.3761\n",
      "121/121 [==============================] - 0s 2ms/step - loss: 0.3889\n",
      "[CV] END learning_rate=0.02267944502661799, n_hidden=3, n_neurons=40; total time=  36.1s\n",
      "Epoch 1/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.7840 - val_loss: 0.4904\n",
      "Epoch 2/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4811 - val_loss: 0.4372\n",
      "Epoch 3/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4432 - val_loss: 0.4311\n",
      "Epoch 4/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4222 - val_loss: 0.3980\n",
      "Epoch 5/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4130 - val_loss: 0.4057\n",
      "Epoch 6/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.4032 - val_loss: 0.3799\n",
      "Epoch 7/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3903 - val_loss: 0.3836\n",
      "Epoch 8/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.3829 - val_loss: 0.3444\n",
      "Epoch 9/50\n",
      "242/242 [==============================] - 1s 6ms/step - loss: 0.3720 - val_loss: 0.3590\n",
      "Epoch 10/50\n",
      "242/242 [==============================] - 1s 5ms/step - loss: 0.3702 - val_loss: 0.3362\n",
      "Epoch 11/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.3614 - val_loss: 0.3396\n",
      "Epoch 12/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.3602 - val_loss: 0.4885\n",
      "Epoch 13/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3535 - val_loss: 0.3887\n",
      "Epoch 14/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.3582 - val_loss: 0.3357\n",
      "Epoch 15/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.3494 - val_loss: 0.3250\n",
      "Epoch 16/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3478 - val_loss: 0.3517\n",
      "Epoch 17/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3410 - val_loss: 0.3816\n",
      "Epoch 18/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3372 - val_loss: 0.3287\n",
      "Epoch 19/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3345 - val_loss: 0.3326\n",
      "Epoch 20/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3340 - val_loss: 0.3578\n",
      "Epoch 21/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3290 - val_loss: 0.4023\n",
      "Epoch 22/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3327 - val_loss: 0.3460\n",
      "Epoch 23/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.3328 - val_loss: 0.3306\n",
      "Epoch 24/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3240 - val_loss: 0.3143\n",
      "Epoch 25/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.3298 - val_loss: 0.3271\n",
      "Epoch 26/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.3248 - val_loss: 0.3334\n",
      "Epoch 27/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.3194 - val_loss: 0.3208\n",
      "Epoch 28/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.3204 - val_loss: 0.3582\n",
      "Epoch 29/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3178 - val_loss: 0.3132\n",
      "Epoch 30/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3150 - val_loss: 0.3371\n",
      "Epoch 31/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3125 - val_loss: 0.3041\n",
      "Epoch 32/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3083 - val_loss: 0.3085\n",
      "Epoch 33/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3113 - val_loss: 0.3063\n",
      "Epoch 34/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.3167 - val_loss: 0.3344\n",
      "Epoch 35/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3082 - val_loss: 0.3362\n",
      "Epoch 36/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3081 - val_loss: 0.3122\n",
      "Epoch 37/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.3093 - val_loss: 0.3083\n",
      "Epoch 38/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3015 - val_loss: 0.3132\n",
      "Epoch 39/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.2992 - val_loss: 0.4210\n",
      "Epoch 40/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.3028 - val_loss: 0.3109\n",
      "Epoch 41/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.2994 - val_loss: 0.3070\n",
      "121/121 [==============================] - 0s 2ms/step - loss: 0.3306\n",
      "[CV] END learning_rate=0.02267944502661799, n_hidden=3, n_neurons=40; total time=  36.2s\n",
      "Epoch 1/50\n",
      "242/242 [==============================] - 2s 4ms/step - loss: 0.7459 - val_loss: 0.4826\n",
      "Epoch 2/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: nan - val_loss: nan\n",
      "Epoch 3/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: nan - val_loss: nan\n",
      "Epoch 4/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: nan - val_loss: nan\n",
      "Epoch 5/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: nan - val_loss: nan\n",
      "Epoch 6/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: nan - val_loss: nan\n",
      "Epoch 7/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: nan - val_loss: nan\n",
      "Epoch 8/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: nan - val_loss: nan\n",
      "Epoch 9/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: nan - val_loss: nan\n",
      "Epoch 10/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: nan - val_loss: nan\n",
      "Epoch 11/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: nan - val_loss: nan\n",
      "121/121 [==============================] - 0s 2ms/step - loss: nan\n",
      "[CV] END learning_rate=0.02267944502661799, n_hidden=3, n_neurons=40; total time=  10.3s\n",
      "Epoch 1/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.7674 - val_loss: 0.6440\n",
      "Epoch 2/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 1.0286 - val_loss: 0.7144\n",
      "Epoch 3/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5001 - val_loss: 0.4328\n",
      "Epoch 4/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4226 - val_loss: 0.4014\n",
      "Epoch 5/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3985 - val_loss: 0.4130\n",
      "Epoch 6/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3787 - val_loss: 0.4169\n",
      "Epoch 7/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3706 - val_loss: 0.3480\n",
      "Epoch 8/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3652 - val_loss: 0.3577\n",
      "Epoch 9/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.3559 - val_loss: 0.3859\n",
      "Epoch 10/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3516 - val_loss: 0.3358\n",
      "Epoch 11/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3391 - val_loss: 0.3301\n",
      "Epoch 12/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3354 - val_loss: 0.3801\n",
      "Epoch 13/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.3328 - val_loss: 0.3727\n",
      "Epoch 14/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3269 - val_loss: 0.3535\n",
      "Epoch 15/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3186 - val_loss: 0.3654\n",
      "Epoch 16/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3171 - val_loss: 0.3258\n",
      "Epoch 17/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3118 - val_loss: 0.3537\n",
      "Epoch 18/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.3098 - val_loss: 0.3144\n",
      "Epoch 19/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3064 - val_loss: 0.3434\n",
      "Epoch 20/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3098 - val_loss: 0.3202\n",
      "Epoch 21/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.2983 - val_loss: 0.3334\n",
      "Epoch 22/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.2976 - val_loss: 0.3145\n",
      "Epoch 23/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.3007 - val_loss: 0.3162\n",
      "Epoch 24/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.2974 - val_loss: 0.3202\n",
      "Epoch 25/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.2925 - val_loss: 0.3287\n",
      "Epoch 26/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.2900 - val_loss: 0.3279\n",
      "Epoch 27/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.2925 - val_loss: 0.3328\n",
      "Epoch 28/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.2844 - val_loss: 0.3066\n",
      "Epoch 29/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.2845 - val_loss: 0.3094\n",
      "Epoch 30/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.2826 - val_loss: 0.3359\n",
      "Epoch 31/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.2799 - val_loss: 0.3083\n",
      "Epoch 32/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.2802 - val_loss: 0.3042\n",
      "Epoch 33/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.2793 - val_loss: 0.3060\n",
      "Epoch 34/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.2776 - val_loss: 0.3027\n",
      "Epoch 35/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.2745 - val_loss: 0.3234\n",
      "Epoch 36/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.2706 - val_loss: 0.3248\n",
      "Epoch 37/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.2757 - val_loss: 0.3112\n",
      "Epoch 38/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.2720 - val_loss: 0.3198\n",
      "Epoch 39/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.2692 - val_loss: 0.3297\n",
      "Epoch 40/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.2723 - val_loss: 0.3061\n",
      "Epoch 41/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.2667 - val_loss: 0.3487\n",
      "Epoch 42/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.2692 - val_loss: 0.3264\n",
      "Epoch 43/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.2647 - val_loss: 0.3952\n",
      "Epoch 44/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.2657 - val_loss: 0.3341\n",
      "121/121 [==============================] - 0s 2ms/step - loss: 0.3520\n",
      "[CV] END learning_rate=0.02554520023004804, n_hidden=3, n_neurons=96; total time=  38.3s\n",
      "Epoch 1/50\n",
      "242/242 [==============================] - 1s 5ms/step - loss: 0.6979 - val_loss: 0.4743\n",
      "Epoch 2/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4682 - val_loss: 0.4290\n",
      "Epoch 3/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4295 - val_loss: 0.4199\n",
      "Epoch 4/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.4087 - val_loss: 0.3799\n",
      "Epoch 5/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3993 - val_loss: 0.4113\n",
      "Epoch 6/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3870 - val_loss: 0.3717\n",
      "Epoch 7/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3729 - val_loss: 0.3842\n",
      "Epoch 8/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3676 - val_loss: 0.3379\n",
      "Epoch 9/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3553 - val_loss: 0.3523\n",
      "Epoch 10/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3540 - val_loss: 0.3311\n",
      "Epoch 11/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3460 - val_loss: 0.3304\n",
      "Epoch 12/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3477 - val_loss: 0.5014\n",
      "Epoch 13/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3443 - val_loss: 0.3830\n",
      "Epoch 14/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.3407 - val_loss: 0.3285\n",
      "Epoch 15/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.3325 - val_loss: 0.3179\n",
      "Epoch 16/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.3270 - val_loss: 0.3422\n",
      "Epoch 17/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.3205 - val_loss: 0.3799\n",
      "Epoch 18/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3180 - val_loss: 0.3180\n",
      "Epoch 19/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3120 - val_loss: 0.3263\n",
      "Epoch 20/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3142 - val_loss: 0.3847\n",
      "Epoch 21/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.3089 - val_loss: 0.3730\n",
      "Epoch 22/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.3096 - val_loss: 0.3362\n",
      "Epoch 23/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.3084 - val_loss: 0.3237\n",
      "Epoch 24/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3006 - val_loss: 0.3032\n",
      "Epoch 25/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3061 - val_loss: 0.3084\n",
      "Epoch 26/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.3022 - val_loss: 0.3348\n",
      "Epoch 27/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.2974 - val_loss: 0.3001\n",
      "Epoch 28/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.2981 - val_loss: 0.3367\n",
      "Epoch 29/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.2935 - val_loss: 0.2967\n",
      "Epoch 30/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.2896 - val_loss: 0.3148\n",
      "Epoch 31/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.2894 - val_loss: 0.2932\n",
      "Epoch 32/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.2843 - val_loss: 0.2968\n",
      "Epoch 33/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.2853 - val_loss: 0.2947\n",
      "Epoch 34/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.2911 - val_loss: 0.3055\n",
      "Epoch 35/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.2836 - val_loss: 0.3461\n",
      "Epoch 36/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.2833 - val_loss: 0.2996\n",
      "Epoch 37/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.2846 - val_loss: 0.3093\n",
      "Epoch 38/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.2781 - val_loss: 0.2955\n",
      "Epoch 39/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.2747 - val_loss: 0.4375\n",
      "Epoch 40/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.2768 - val_loss: 0.3131\n",
      "Epoch 41/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.2753 - val_loss: 0.2992\n",
      "121/121 [==============================] - 0s 2ms/step - loss: 0.3243\n",
      "[CV] END learning_rate=0.02554520023004804, n_hidden=3, n_neurons=96; total time=  35.7s\n",
      "Epoch 1/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.6545 - val_loss: 0.4264\n",
      "Epoch 2/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5899 - val_loss: 0.4365\n",
      "Epoch 3/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4521 - val_loss: 0.3950\n",
      "Epoch 4/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4535 - val_loss: 0.4158\n",
      "Epoch 5/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 1.3021 - val_loss: 0.4088\n",
      "Epoch 6/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3983 - val_loss: 0.3532\n",
      "Epoch 7/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5112 - val_loss: 0.4862\n",
      "Epoch 8/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: nan - val_loss: nan\n",
      "Epoch 9/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: nan - val_loss: nan\n",
      "Epoch 10/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: nan - val_loss: nan\n",
      "Epoch 11/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: nan - val_loss: nan\n",
      "Epoch 12/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: nan - val_loss: nan\n",
      "Epoch 13/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: nan - val_loss: nan\n",
      "Epoch 14/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: nan - val_loss: nan\n",
      "Epoch 15/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: nan - val_loss: nan\n",
      "Epoch 16/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: nan - val_loss: nan\n",
      "121/121 [==============================] - 0s 2ms/step - loss: nan\n",
      "[CV] END learning_rate=0.02554520023004804, n_hidden=3, n_neurons=96; total time=  14.2s\n",
      "Epoch 1/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 1.0067 - val_loss: 0.7035\n",
      "Epoch 2/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5914 - val_loss: 0.4976\n",
      "Epoch 3/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5022 - val_loss: 0.4855\n",
      "Epoch 4/50\n",
      "242/242 [==============================] - 1s 2ms/step - loss: 0.4769 - val_loss: 0.4479\n",
      "Epoch 5/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4582 - val_loss: 0.4358\n",
      "Epoch 6/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4467 - val_loss: 0.4227\n",
      "Epoch 7/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4356 - val_loss: 0.4166\n",
      "Epoch 8/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4310 - val_loss: 0.4082\n",
      "Epoch 9/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4216 - val_loss: 0.4050\n",
      "Epoch 10/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4170 - val_loss: 0.3992\n",
      "Epoch 11/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4114 - val_loss: 0.3912\n",
      "Epoch 12/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4060 - val_loss: 0.3928\n",
      "Epoch 13/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4037 - val_loss: 0.3862\n",
      "Epoch 14/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3979 - val_loss: 0.3874\n",
      "Epoch 15/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3952 - val_loss: 0.3867\n",
      "Epoch 16/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3904 - val_loss: 0.3802\n",
      "Epoch 17/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3882 - val_loss: 0.3747\n",
      "Epoch 18/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3838 - val_loss: 0.3742\n",
      "Epoch 19/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3802 - val_loss: 0.3692\n",
      "Epoch 20/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3790 - val_loss: 0.3800\n",
      "Epoch 21/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3776 - val_loss: 0.3814\n",
      "Epoch 22/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3734 - val_loss: 0.3644\n",
      "Epoch 23/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3717 - val_loss: 0.3597\n",
      "Epoch 24/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3710 - val_loss: 0.3659\n",
      "Epoch 25/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3650 - val_loss: 0.3806\n",
      "Epoch 26/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3638 - val_loss: 0.3637\n",
      "Epoch 27/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3634 - val_loss: 0.3584\n",
      "Epoch 28/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3595 - val_loss: 0.3540\n",
      "Epoch 29/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3581 - val_loss: 0.3645\n",
      "Epoch 30/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3559 - val_loss: 0.3652\n",
      "Epoch 31/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3626 - val_loss: 0.3564\n",
      "Epoch 32/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3535 - val_loss: 0.3472\n",
      "Epoch 33/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3504 - val_loss: 0.3480\n",
      "Epoch 34/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3490 - val_loss: 0.3443\n",
      "Epoch 35/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3502 - val_loss: 0.3472\n",
      "Epoch 36/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3460 - val_loss: 0.3446\n",
      "Epoch 37/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3466 - val_loss: 0.3477\n",
      "Epoch 38/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3437 - val_loss: 0.3423\n",
      "Epoch 39/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3409 - val_loss: 0.3377\n",
      "Epoch 40/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3413 - val_loss: 0.3389\n",
      "Epoch 41/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3470 - val_loss: 0.3512\n",
      "Epoch 42/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3375 - val_loss: 0.3433\n",
      "Epoch 43/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3432 - val_loss: 0.3465\n",
      "Epoch 44/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3342 - val_loss: 0.3451\n",
      "Epoch 45/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3321 - val_loss: 0.3461\n",
      "Epoch 46/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3306 - val_loss: 0.3407\n",
      "Epoch 47/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3305 - val_loss: 0.3398\n",
      "Epoch 48/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3283 - val_loss: 0.3538\n",
      "Epoch 49/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3285 - val_loss: 0.3442\n",
      "121/121 [==============================] - 0s 2ms/step - loss: 0.3519\n",
      "[CV] END learning_rate=0.0054637287155864045, n_hidden=2, n_neurons=63; total time=  37.5s\n",
      "Epoch 1/50\n",
      "242/242 [==============================] - 2s 7ms/step - loss: 1.0802 - val_loss: 0.5788\n",
      "Epoch 2/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5563 - val_loss: 0.5008\n",
      "Epoch 3/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4980 - val_loss: 0.4915\n",
      "Epoch 4/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4708 - val_loss: 0.4418\n",
      "Epoch 5/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4562 - val_loss: 0.4317\n",
      "Epoch 6/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4449 - val_loss: 0.4256\n",
      "Epoch 7/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4358 - val_loss: 0.4136\n",
      "Epoch 8/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4282 - val_loss: 0.4066\n",
      "Epoch 9/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4210 - val_loss: 0.4021\n",
      "Epoch 10/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4162 - val_loss: 0.3969\n",
      "Epoch 11/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4112 - val_loss: 0.3908\n",
      "Epoch 12/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4063 - val_loss: 0.3930\n",
      "Epoch 13/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4014 - val_loss: 0.3933\n",
      "Epoch 14/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3985 - val_loss: 0.3854\n",
      "Epoch 15/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3942 - val_loss: 0.3793\n",
      "Epoch 16/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3911 - val_loss: 0.3837\n",
      "Epoch 17/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3872 - val_loss: 0.3753\n",
      "Epoch 18/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3829 - val_loss: 0.3728\n",
      "Epoch 19/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3792 - val_loss: 0.3690\n",
      "Epoch 20/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.3765 - val_loss: 0.3782\n",
      "Epoch 21/50\n",
      "242/242 [==============================] - 1s 6ms/step - loss: 0.3748 - val_loss: 0.3727\n",
      "Epoch 22/50\n",
      "242/242 [==============================] - 1s 5ms/step - loss: 0.3709 - val_loss: 0.3652\n",
      "Epoch 23/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.3687 - val_loss: 0.3596\n",
      "Epoch 24/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.3639 - val_loss: 0.3648\n",
      "Epoch 25/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.3631 - val_loss: 0.3591\n",
      "Epoch 26/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3604 - val_loss: 0.3547\n",
      "Epoch 27/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3577 - val_loss: 0.3555\n",
      "Epoch 28/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3555 - val_loss: 0.3525\n",
      "Epoch 29/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3537 - val_loss: 0.3499\n",
      "Epoch 30/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3509 - val_loss: 0.3486\n",
      "Epoch 31/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3489 - val_loss: 0.3515\n",
      "Epoch 32/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.3464 - val_loss: 0.3445\n",
      "Epoch 33/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3450 - val_loss: 0.3483\n",
      "Epoch 34/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3442 - val_loss: 0.3473\n",
      "Epoch 35/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3415 - val_loss: 0.3459\n",
      "Epoch 36/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3401 - val_loss: 0.3513\n",
      "Epoch 37/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3396 - val_loss: 0.3389\n",
      "Epoch 38/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.3378 - val_loss: 0.3429\n",
      "Epoch 39/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3344 - val_loss: 0.3523\n",
      "Epoch 40/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3340 - val_loss: 0.3419\n",
      "Epoch 41/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3326 - val_loss: 0.3438\n",
      "Epoch 42/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.3309 - val_loss: 0.3377\n",
      "Epoch 43/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.3297 - val_loss: 0.3388\n",
      "Epoch 44/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.3289 - val_loss: 0.3377\n",
      "Epoch 45/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.3290 - val_loss: 0.3446\n",
      "Epoch 46/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.3264 - val_loss: 0.3340\n",
      "Epoch 47/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3243 - val_loss: 0.3350\n",
      "Epoch 48/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3247 - val_loss: 0.3352\n",
      "Epoch 49/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3238 - val_loss: 0.3331\n",
      "Epoch 50/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.3212 - val_loss: 0.3263\n",
      "121/121 [==============================] - 0s 2ms/step - loss: 0.3541\n",
      "[CV] END learning_rate=0.0054637287155864045, n_hidden=2, n_neurons=63; total time= 1.4min\n",
      "Epoch 1/50\n",
      "242/242 [==============================] - 2s 4ms/step - loss: 1.3614 - val_loss: 0.6570\n",
      "Epoch 2/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 2.0117 - val_loss: 0.5692\n",
      "Epoch 3/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5663 - val_loss: 0.4914\n",
      "Epoch 4/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5103 - val_loss: 0.4722\n",
      "Epoch 5/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5125 - val_loss: 0.4459\n",
      "Epoch 6/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4862 - val_loss: 0.4278\n",
      "Epoch 7/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4464 - val_loss: 0.4162\n",
      "Epoch 8/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.4358 - val_loss: 0.4082\n",
      "Epoch 9/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.4267 - val_loss: 0.4052\n",
      "Epoch 10/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4223 - val_loss: 0.3971\n",
      "Epoch 11/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4174 - val_loss: 0.3927\n",
      "Epoch 12/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4123 - val_loss: 0.3914\n",
      "Epoch 13/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4079 - val_loss: 0.3873\n",
      "Epoch 14/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4042 - val_loss: 0.3798\n",
      "Epoch 15/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3992 - val_loss: 0.3789\n",
      "Epoch 16/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3962 - val_loss: 0.3804\n",
      "Epoch 17/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.3929 - val_loss: 0.3759\n",
      "Epoch 18/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.3894 - val_loss: 0.3731\n",
      "Epoch 19/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3868 - val_loss: 0.3652\n",
      "Epoch 20/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3831 - val_loss: 0.3667\n",
      "Epoch 21/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.3814 - val_loss: 0.3653\n",
      "Epoch 22/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.3782 - val_loss: 0.3591\n",
      "Epoch 23/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.3760 - val_loss: 0.3560\n",
      "Epoch 24/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3731 - val_loss: 0.3582\n",
      "Epoch 25/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.3718 - val_loss: 0.3551\n",
      "Epoch 26/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3688 - val_loss: 0.3540\n",
      "Epoch 27/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3664 - val_loss: 0.3523\n",
      "Epoch 28/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3648 - val_loss: 0.3482\n",
      "Epoch 29/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.3616 - val_loss: 0.3477\n",
      "Epoch 30/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.3596 - val_loss: 0.3444\n",
      "Epoch 31/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3580 - val_loss: 0.3447\n",
      "Epoch 32/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3558 - val_loss: 0.3431\n",
      "Epoch 33/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.3546 - val_loss: 0.3395\n",
      "Epoch 34/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3522 - val_loss: 0.3417\n",
      "Epoch 35/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3515 - val_loss: 0.3375\n",
      "Epoch 36/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3485 - val_loss: 0.3382\n",
      "Epoch 37/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.3457 - val_loss: 0.3351\n",
      "Epoch 38/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.3454 - val_loss: 0.3338\n",
      "Epoch 39/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3431 - val_loss: 0.3300\n",
      "Epoch 40/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3416 - val_loss: 0.3360\n",
      "Epoch 41/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3406 - val_loss: 0.3291\n",
      "Epoch 42/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3374 - val_loss: 0.3290\n",
      "Epoch 43/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3358 - val_loss: 0.3266\n",
      "Epoch 44/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.3342 - val_loss: 0.3309\n",
      "Epoch 45/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3332 - val_loss: 0.3230\n",
      "Epoch 46/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.3319 - val_loss: 0.3260\n",
      "Epoch 47/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.3295 - val_loss: 0.3211\n",
      "Epoch 48/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3280 - val_loss: 0.3192\n",
      "Epoch 49/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3268 - val_loss: 0.3220\n",
      "Epoch 50/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3248 - val_loss: 0.3185\n",
      "121/121 [==============================] - 0s 3ms/step - loss: 0.3373\n",
      "[CV] END learning_rate=0.0054637287155864045, n_hidden=2, n_neurons=63; total time= 1.4min\n",
      "Epoch 1/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 3.7742 - val_loss: 12.2984\n",
      "Epoch 2/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 7354.9390 - val_loss: 18815.1641\n",
      "Epoch 3/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 11468059.0000 - val_loss: 36370668.0000\n",
      "Epoch 4/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 144881631232.0000 - val_loss: 67232403456.0000\n",
      "Epoch 5/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 53338108329984.0000 - val_loss: 126808271880192.0000\n",
      "Epoch 6/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 532106590677893120.0000 - val_loss: 239606621896966144.0000\n",
      "Epoch 7/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 159316173824370671616.0000 - val_loss: 450959574806187474944.0000\n",
      "Epoch 8/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 1605389872545446347407360.0000 - val_loss: 995469824968857363677184.0000\n",
      "Epoch 9/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 665782617226448045938311168.0000 - val_loss: 1637901458847835234978758656.0000\n",
      "Epoch 10/50\n",
      "242/242 [==============================] - 1s 2ms/step - loss: 816114237634798723656950218752.0000 - val_loss: 4351582889364740372667742289920.0000\n",
      "Epoch 11/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 10881923748452163928698966824189952.0000 - val_loss: 5992865873270466982716248019697664.0000\n",
      "121/121 [==============================] - 0s 2ms/step - loss: 2984060963882615400890782162354176.0000\n",
      "[CV] END learning_rate=0.028940273676493513, n_hidden=0, n_neurons=32; total time=   8.5s\n",
      "Epoch 1/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.8504 - val_loss: 0.5601\n",
      "Epoch 2/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 1.8682 - val_loss: 1.1827\n",
      "Epoch 3/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 6.4075 - val_loss: 3.2319\n",
      "Epoch 4/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 45.7164 - val_loss: 22.7273\n",
      "Epoch 5/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 302.2659 - val_loss: 142.9750\n",
      "Epoch 6/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 2560.3354 - val_loss: 1002.5056\n",
      "Epoch 7/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 18160.4922 - val_loss: 6849.7144\n",
      "Epoch 8/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 89254.1250 - val_loss: 58802.3438\n",
      "Epoch 9/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 861614.0625 - val_loss: 338992.5000\n",
      "Epoch 10/50\n",
      "242/242 [==============================] - 1s 2ms/step - loss: 4324399.0000 - val_loss: 2370815.7500\n",
      "Epoch 11/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 29506572.0000 - val_loss: 16455709.0000\n",
      "121/121 [==============================] - 0s 2ms/step - loss: 2034339456.0000\n",
      "[CV] END learning_rate=0.028940273676493513, n_hidden=0, n_neurons=32; total time=   8.9s\n",
      "Epoch 1/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.8315 - val_loss: 0.6063\n",
      "Epoch 2/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 26.4262 - val_loss: 38.6079\n",
      "Epoch 3/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 2757.6917 - val_loss: 7729.0347\n",
      "Epoch 4/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 456570.8438 - val_loss: 1748949.1250\n",
      "Epoch 5/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 122147352.0000 - val_loss: 338543904.0000\n",
      "Epoch 6/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 41766473728.0000 - val_loss: 71179354112.0000\n",
      "Epoch 7/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 4396006768640.0000 - val_loss: 15837829267456.0000\n",
      "Epoch 8/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 2244493000572928.0000 - val_loss: 3144636273000448.0000\n",
      "Epoch 9/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 436999384631083008.0000 - val_loss: 666907609596428288.0000\n",
      "Epoch 10/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 91124471465796173824.0000 - val_loss: 139149063489098612736.0000\n",
      "Epoch 11/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 18429526812334114209792.0000 - val_loss: 29263681061712172154880.0000\n",
      "121/121 [==============================] - 0s 2ms/step - loss: 879703607596997138186240.0000\n",
      "[CV] END learning_rate=0.028940273676493513, n_hidden=0, n_neurons=32; total time=   8.2s\n",
      "Epoch 1/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 1.8160 - val_loss: 2.9682\n",
      "Epoch 2/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 1.5322 - val_loss: 0.4458\n",
      "Epoch 3/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4378 - val_loss: 0.4283\n",
      "Epoch 4/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4100 - val_loss: 0.4097\n",
      "Epoch 5/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.3943 - val_loss: 0.4235\n",
      "Epoch 6/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.3879 - val_loss: 0.3645\n",
      "Epoch 7/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.3816 - val_loss: 0.3643\n",
      "Epoch 8/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.3826 - val_loss: 0.3581\n",
      "Epoch 9/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3762 - val_loss: 0.3684\n",
      "Epoch 10/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3727 - val_loss: 0.3604\n",
      "Epoch 11/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3689 - val_loss: 0.3550\n",
      "Epoch 12/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3667 - val_loss: 0.3664\n",
      "Epoch 13/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3650 - val_loss: 0.4136\n",
      "Epoch 14/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3632 - val_loss: 0.3518\n",
      "Epoch 15/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3589 - val_loss: 0.3591\n",
      "Epoch 16/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3585 - val_loss: 0.3519\n",
      "Epoch 17/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.3572 - val_loss: 0.3536\n",
      "Epoch 18/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3535 - val_loss: 0.3475\n",
      "Epoch 19/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3528 - val_loss: 0.3425\n",
      "Epoch 20/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3502 - val_loss: 0.3955\n",
      "Epoch 21/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3611 - val_loss: 0.3544\n",
      "Epoch 22/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3509 - val_loss: 0.3442\n",
      "Epoch 23/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3491 - val_loss: 0.3382\n",
      "Epoch 24/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.3475 - val_loss: 0.3409\n",
      "Epoch 25/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.3445 - val_loss: 0.3662\n",
      "Epoch 26/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3432 - val_loss: 0.3540\n",
      "Epoch 27/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3419 - val_loss: 0.3481\n",
      "Epoch 28/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3397 - val_loss: 0.3358\n",
      "Epoch 29/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3389 - val_loss: 0.3425\n",
      "Epoch 30/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3371 - val_loss: 0.3442\n",
      "Epoch 31/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3383 - val_loss: 0.3446\n",
      "Epoch 32/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.3362 - val_loss: 0.3464\n",
      "Epoch 33/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3336 - val_loss: 0.3444\n",
      "Epoch 34/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3348 - val_loss: 0.3325\n",
      "Epoch 35/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3324 - val_loss: 0.3339\n",
      "Epoch 36/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3314 - val_loss: 0.3347\n",
      "Epoch 37/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3317 - val_loss: 0.3552\n",
      "Epoch 38/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3309 - val_loss: 0.4474\n",
      "Epoch 39/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3278 - val_loss: 0.3361\n",
      "Epoch 40/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3292 - val_loss: 0.3337\n",
      "Epoch 41/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3259 - val_loss: 0.3371\n",
      "Epoch 42/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3277 - val_loss: 0.3328\n",
      "Epoch 43/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.3240 - val_loss: 0.3314\n",
      "Epoch 44/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3259 - val_loss: 0.3391\n",
      "Epoch 45/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3241 - val_loss: 0.3441\n",
      "Epoch 46/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.3233 - val_loss: 0.3348\n",
      "Epoch 47/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3213 - val_loss: 0.3340\n",
      "Epoch 48/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.3215 - val_loss: 0.3351\n",
      "Epoch 49/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3208 - val_loss: 0.3349\n",
      "Epoch 50/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3199 - val_loss: 0.3430\n",
      "121/121 [==============================] - 0s 2ms/step - loss: 0.3495\n",
      "[CV] END learning_rate=0.010691033577060948, n_hidden=1, n_neurons=76; total time=  41.1s\n",
      "Epoch 1/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.8643 - val_loss: 0.5554\n",
      "Epoch 2/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.6776 - val_loss: 0.5243\n",
      "Epoch 3/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.6294 - val_loss: 0.5031\n",
      "Epoch 4/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5016 - val_loss: 0.4449\n",
      "Epoch 5/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4690 - val_loss: 0.4405\n",
      "Epoch 6/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4578 - val_loss: 0.4339\n",
      "Epoch 7/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4498 - val_loss: 0.4242\n",
      "Epoch 8/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4426 - val_loss: 0.4153\n",
      "Epoch 9/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4351 - val_loss: 0.4136\n",
      "Epoch 10/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4300 - val_loss: 0.4068\n",
      "Epoch 11/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4255 - val_loss: 0.4042\n",
      "Epoch 12/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.4187 - val_loss: 0.4163\n",
      "Epoch 13/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4156 - val_loss: 0.4019\n",
      "Epoch 14/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4132 - val_loss: 0.3901\n",
      "Epoch 15/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4077 - val_loss: 0.3852\n",
      "Epoch 16/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4073 - val_loss: 0.3940\n",
      "Epoch 17/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4014 - val_loss: 0.3884\n",
      "Epoch 18/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3991 - val_loss: 0.3794\n",
      "Epoch 19/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3942 - val_loss: 0.3752\n",
      "Epoch 20/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3938 - val_loss: 0.3851\n",
      "Epoch 21/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3928 - val_loss: 0.3842\n",
      "Epoch 22/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3902 - val_loss: 0.3768\n",
      "Epoch 23/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3900 - val_loss: 0.3707\n",
      "Epoch 24/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3831 - val_loss: 0.3686\n",
      "Epoch 25/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3852 - val_loss: 0.3647\n",
      "Epoch 26/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3812 - val_loss: 0.3692\n",
      "Epoch 27/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3788 - val_loss: 0.3997\n",
      "Epoch 28/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3768 - val_loss: 0.3662\n",
      "Epoch 29/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3772 - val_loss: 0.3645\n",
      "Epoch 30/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3732 - val_loss: 0.3623\n",
      "Epoch 31/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.3712 - val_loss: 0.3640\n",
      "Epoch 32/50\n",
      "242/242 [==============================] - 1s 5ms/step - loss: 0.3710 - val_loss: 0.3605\n",
      "Epoch 33/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.3687 - val_loss: 0.3688\n",
      "Epoch 34/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.3692 - val_loss: 0.3675\n",
      "Epoch 35/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3656 - val_loss: 0.3631\n",
      "Epoch 36/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3662 - val_loss: 0.4235\n",
      "Epoch 37/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3654 - val_loss: 0.3551\n",
      "Epoch 38/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3631 - val_loss: 0.3700\n",
      "Epoch 39/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3599 - val_loss: 0.3608\n",
      "Epoch 40/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3589 - val_loss: 0.3747\n",
      "Epoch 41/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3598 - val_loss: 0.3529\n",
      "Epoch 42/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3604 - val_loss: 0.3558\n",
      "Epoch 43/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3571 - val_loss: 0.3549\n",
      "Epoch 44/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3552 - val_loss: 0.3528\n",
      "Epoch 45/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3558 - val_loss: 0.3587\n",
      "Epoch 46/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.3555 - val_loss: 0.3650\n",
      "Epoch 47/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3588 - val_loss: 0.3787\n",
      "Epoch 48/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3545 - val_loss: 0.3671\n",
      "Epoch 49/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3524 - val_loss: 0.3614\n",
      "Epoch 50/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3609 - val_loss: 0.3440\n",
      "121/121 [==============================] - 0s 2ms/step - loss: 0.3642\n",
      "[CV] END learning_rate=0.010691033577060948, n_hidden=1, n_neurons=76; total time=  41.8s\n",
      "Epoch 1/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.8945 - val_loss: 0.5138\n",
      "Epoch 2/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 1.8769 - val_loss: 0.4816\n",
      "Epoch 3/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4544 - val_loss: 0.3993\n",
      "Epoch 4/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4224 - val_loss: 0.3783\n",
      "Epoch 5/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4006 - val_loss: 0.3765\n",
      "Epoch 6/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3906 - val_loss: 0.3625\n",
      "Epoch 7/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3872 - val_loss: 0.3600\n",
      "Epoch 8/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.3868 - val_loss: 0.3631\n",
      "Epoch 9/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.3785 - val_loss: 0.3696\n",
      "Epoch 10/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3771 - val_loss: 0.3579\n",
      "Epoch 11/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3792 - val_loss: 0.3716\n",
      "Epoch 12/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.3794 - val_loss: 0.3626\n",
      "Epoch 13/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.3744 - val_loss: 0.3543\n",
      "Epoch 14/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.3734 - val_loss: 0.3479\n",
      "Epoch 15/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3695 - val_loss: 0.3470\n",
      "Epoch 16/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3679 - val_loss: 0.3578\n",
      "Epoch 17/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3669 - val_loss: 0.3630\n",
      "Epoch 18/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3751 - val_loss: 0.3473\n",
      "Epoch 19/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.3676 - val_loss: 0.3490\n",
      "Epoch 20/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.3656 - val_loss: 0.3467\n",
      "Epoch 21/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3653 - val_loss: 0.3485\n",
      "Epoch 22/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3631 - val_loss: 0.3408\n",
      "Epoch 23/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3610 - val_loss: 0.3444\n",
      "Epoch 24/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3606 - val_loss: 0.3467\n",
      "Epoch 25/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3615 - val_loss: 0.3423\n",
      "Epoch 26/50\n",
      "242/242 [==============================] - 1s 2ms/step - loss: 0.3620 - val_loss: 0.3593\n",
      "Epoch 27/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3598 - val_loss: 0.3596\n",
      "Epoch 28/50\n",
      "242/242 [==============================] - 1s 2ms/step - loss: 0.3576 - val_loss: 0.3379\n",
      "Epoch 29/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3549 - val_loss: 0.3477\n",
      "Epoch 30/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3537 - val_loss: 0.3372\n",
      "Epoch 31/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3597 - val_loss: 0.3369\n",
      "Epoch 32/50\n",
      "242/242 [==============================] - 1s 2ms/step - loss: 0.3543 - val_loss: 0.3446\n",
      "Epoch 33/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3571 - val_loss: 0.3338\n",
      "Epoch 34/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3540 - val_loss: 0.3718\n",
      "Epoch 35/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3610 - val_loss: 0.3346\n",
      "Epoch 36/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3502 - val_loss: 0.3563\n",
      "Epoch 37/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3484 - val_loss: 0.3367\n",
      "Epoch 38/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3486 - val_loss: 0.3354\n",
      "Epoch 39/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3468 - val_loss: 0.3323\n",
      "Epoch 40/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3462 - val_loss: 0.3406\n",
      "Epoch 41/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3502 - val_loss: 0.3296\n",
      "Epoch 42/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3459 - val_loss: 0.3325\n",
      "Epoch 43/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3446 - val_loss: 0.3355\n",
      "Epoch 44/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3423 - val_loss: 0.3429\n",
      "Epoch 45/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3444 - val_loss: 0.3253\n",
      "Epoch 46/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3449 - val_loss: 0.3284\n",
      "Epoch 47/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3403 - val_loss: 0.3493\n",
      "Epoch 48/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3401 - val_loss: 0.3237\n",
      "Epoch 49/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3400 - val_loss: 0.3303\n",
      "Epoch 50/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3377 - val_loss: 0.3343\n",
      "121/121 [==============================] - 0s 2ms/step - loss: 0.3454\n",
      "[CV] END learning_rate=0.010691033577060948, n_hidden=1, n_neurons=76; total time=  38.3s\n",
      "Epoch 1/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 2.3766 - val_loss: 1.0808\n",
      "Epoch 2/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.8360 - val_loss: 0.7326\n",
      "Epoch 3/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.7162 - val_loss: 0.6743\n",
      "Epoch 4/50\n",
      "242/242 [==============================] - 1s 5ms/step - loss: 0.6757 - val_loss: 0.6407\n",
      "Epoch 5/50\n",
      "242/242 [==============================] - 1s 6ms/step - loss: 0.6467 - val_loss: 0.6146\n",
      "Epoch 6/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.6222 - val_loss: 0.5924\n",
      "Epoch 7/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.6014 - val_loss: 0.5735\n",
      "Epoch 8/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.5833 - val_loss: 0.5576\n",
      "Epoch 9/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.5674 - val_loss: 0.5423\n",
      "Epoch 10/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.5535 - val_loss: 0.5273\n",
      "Epoch 11/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.5406 - val_loss: 0.5156\n",
      "Epoch 12/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.5292 - val_loss: 0.5039\n",
      "Epoch 13/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5195 - val_loss: 0.4949\n",
      "Epoch 14/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.5107 - val_loss: 0.4876\n",
      "Epoch 15/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.5025 - val_loss: 0.4803\n",
      "Epoch 16/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.4953 - val_loss: 0.4738\n",
      "Epoch 17/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.4890 - val_loss: 0.4668\n",
      "Epoch 18/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.4831 - val_loss: 0.4630\n",
      "Epoch 19/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.4773 - val_loss: 0.4580\n",
      "Epoch 20/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.4724 - val_loss: 0.4504\n",
      "Epoch 21/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.4680 - val_loss: 0.4476\n",
      "Epoch 22/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.4637 - val_loss: 0.4454\n",
      "Epoch 23/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.4599 - val_loss: 0.4372\n",
      "Epoch 24/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.4559 - val_loss: 0.4364\n",
      "Epoch 25/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.4519 - val_loss: 0.4307\n",
      "Epoch 26/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4490 - val_loss: 0.4288\n",
      "Epoch 27/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4460 - val_loss: 0.4255\n",
      "Epoch 28/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4428 - val_loss: 0.4251\n",
      "Epoch 29/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.4402 - val_loss: 0.4210\n",
      "Epoch 30/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.4375 - val_loss: 0.4200\n",
      "Epoch 31/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.4348 - val_loss: 0.4144\n",
      "Epoch 32/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4323 - val_loss: 0.4116\n",
      "Epoch 33/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4299 - val_loss: 0.4132\n",
      "Epoch 34/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.4277 - val_loss: 0.4081\n",
      "Epoch 35/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.4253 - val_loss: 0.4062\n",
      "Epoch 36/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.4232 - val_loss: 0.4029\n",
      "Epoch 37/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.4213 - val_loss: 0.4020\n",
      "Epoch 38/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.4191 - val_loss: 0.3982\n",
      "Epoch 39/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.4170 - val_loss: 0.3979\n",
      "Epoch 40/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.4157 - val_loss: 0.3968\n",
      "Epoch 41/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.4135 - val_loss: 0.3980\n",
      "Epoch 42/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.4121 - val_loss: 0.3934\n",
      "Epoch 43/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.4099 - val_loss: 0.3951\n",
      "Epoch 44/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.4088 - val_loss: 0.3922\n",
      "Epoch 45/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.4069 - val_loss: 0.3918\n",
      "Epoch 46/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.4057 - val_loss: 0.3879\n",
      "Epoch 47/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.4040 - val_loss: 0.3879\n",
      "Epoch 48/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4027 - val_loss: 0.3871\n",
      "Epoch 49/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4013 - val_loss: 0.3866\n",
      "Epoch 50/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3998 - val_loss: 0.3831\n",
      "121/121 [==============================] - 0s 2ms/step - loss: 0.4093\n",
      "[CV] END learning_rate=0.0010496013392637294, n_hidden=3, n_neurons=82; total time=  46.7s\n",
      "Epoch 1/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 2.0303 - val_loss: 0.8657\n",
      "Epoch 2/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.7871 - val_loss: 0.7149\n",
      "Epoch 3/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.7151 - val_loss: 0.6683\n",
      "Epoch 4/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.6721 - val_loss: 0.6311\n",
      "Epoch 5/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.6367 - val_loss: 0.6005\n",
      "Epoch 6/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.6071 - val_loss: 0.5745\n",
      "Epoch 7/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5815 - val_loss: 0.5523\n",
      "Epoch 8/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5601 - val_loss: 0.5350\n",
      "Epoch 9/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5415 - val_loss: 0.5183\n",
      "Epoch 10/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5260 - val_loss: 0.5066\n",
      "Epoch 11/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5128 - val_loss: 0.4928\n",
      "Epoch 12/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5014 - val_loss: 0.4835\n",
      "Epoch 13/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.4916 - val_loss: 0.4739\n",
      "Epoch 14/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.4834 - val_loss: 0.4687\n",
      "Epoch 15/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.4757 - val_loss: 0.4641\n",
      "Epoch 16/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.4694 - val_loss: 0.4579\n",
      "Epoch 17/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.4635 - val_loss: 0.4481\n",
      "Epoch 18/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.4582 - val_loss: 0.4460\n",
      "Epoch 19/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.4535 - val_loss: 0.4431\n",
      "Epoch 20/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.4495 - val_loss: 0.4398\n",
      "Epoch 21/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.4456 - val_loss: 0.4381\n",
      "Epoch 22/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.4421 - val_loss: 0.4336\n",
      "Epoch 23/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.4390 - val_loss: 0.4245\n",
      "Epoch 24/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.4355 - val_loss: 0.4262\n",
      "Epoch 25/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.4330 - val_loss: 0.4204\n",
      "Epoch 26/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4301 - val_loss: 0.4192\n",
      "Epoch 27/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4274 - val_loss: 0.4160\n",
      "Epoch 28/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4254 - val_loss: 0.4143\n",
      "Epoch 29/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.4228 - val_loss: 0.4114\n",
      "Epoch 30/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.4206 - val_loss: 0.4105\n",
      "Epoch 31/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.4183 - val_loss: 0.4089\n",
      "Epoch 32/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4165 - val_loss: 0.4051\n",
      "Epoch 33/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4143 - val_loss: 0.4054\n",
      "Epoch 34/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4123 - val_loss: 0.4023\n",
      "Epoch 35/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4104 - val_loss: 0.4005\n",
      "Epoch 36/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4087 - val_loss: 0.3985\n",
      "Epoch 37/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4069 - val_loss: 0.3978\n",
      "Epoch 38/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4053 - val_loss: 0.3951\n",
      "Epoch 39/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4032 - val_loss: 0.3932\n",
      "Epoch 40/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4017 - val_loss: 0.3973\n",
      "Epoch 41/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4004 - val_loss: 0.3964\n",
      "Epoch 42/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3983 - val_loss: 0.3915\n",
      "Epoch 43/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3969 - val_loss: 0.3898\n",
      "Epoch 44/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3955 - val_loss: 0.3911\n",
      "Epoch 45/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3942 - val_loss: 0.3891\n",
      "Epoch 46/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3927 - val_loss: 0.3860\n",
      "Epoch 47/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3910 - val_loss: 0.3836\n",
      "Epoch 48/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.3900 - val_loss: 0.3843\n",
      "Epoch 49/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.3885 - val_loss: 0.3835\n",
      "Epoch 50/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.3864 - val_loss: 0.3812\n",
      "121/121 [==============================] - 0s 2ms/step - loss: 0.4106\n",
      "[CV] END learning_rate=0.0010496013392637294, n_hidden=3, n_neurons=82; total time=  43.6s\n",
      "Epoch 1/50\n",
      "242/242 [==============================] - 2s 4ms/step - loss: 1.8526 - val_loss: 0.9075\n",
      "Epoch 2/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.8043 - val_loss: 0.7097\n",
      "Epoch 3/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.7245 - val_loss: 0.6585\n",
      "Epoch 4/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.6811 - val_loss: 0.6251\n",
      "Epoch 5/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.6481 - val_loss: 0.5923\n",
      "Epoch 6/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.6187 - val_loss: 0.5659\n",
      "Epoch 7/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5931 - val_loss: 0.5443\n",
      "Epoch 8/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5700 - val_loss: 0.5229\n",
      "Epoch 9/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.5500 - val_loss: 0.5106\n",
      "Epoch 10/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5340 - val_loss: 0.4910\n",
      "Epoch 11/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5194 - val_loss: 0.4793\n",
      "Epoch 12/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5074 - val_loss: 0.4690\n",
      "Epoch 13/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.4969 - val_loss: 0.4610\n",
      "Epoch 14/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4884 - val_loss: 0.4527\n",
      "Epoch 15/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.4803 - val_loss: 0.4464\n",
      "Epoch 16/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4738 - val_loss: 0.4416\n",
      "Epoch 17/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4684 - val_loss: 0.4371\n",
      "Epoch 18/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4635 - val_loss: 0.4326\n",
      "Epoch 19/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4596 - val_loss: 0.4293\n",
      "Epoch 20/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.4552 - val_loss: 0.4271\n",
      "Epoch 21/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.4525 - val_loss: 0.4242\n",
      "Epoch 22/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4491 - val_loss: 0.4218\n",
      "Epoch 23/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4463 - val_loss: 0.4189\n",
      "Epoch 24/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4432 - val_loss: 0.4173\n",
      "Epoch 25/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4411 - val_loss: 0.4146\n",
      "Epoch 26/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4383 - val_loss: 0.4129\n",
      "Epoch 27/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4359 - val_loss: 0.4119\n",
      "Epoch 28/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4334 - val_loss: 0.4086\n",
      "Epoch 29/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4315 - val_loss: 0.4076\n",
      "Epoch 30/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4292 - val_loss: 0.4062\n",
      "Epoch 31/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4273 - val_loss: 0.4036\n",
      "Epoch 32/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4255 - val_loss: 0.4024\n",
      "Epoch 33/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4234 - val_loss: 0.4021\n",
      "Epoch 34/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4217 - val_loss: 0.4009\n",
      "Epoch 35/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4203 - val_loss: 0.3984\n",
      "Epoch 36/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.4185 - val_loss: 0.3978\n",
      "Epoch 37/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4159 - val_loss: 0.3962\n",
      "Epoch 38/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4149 - val_loss: 0.3962\n",
      "Epoch 39/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4134 - val_loss: 0.3934\n",
      "Epoch 40/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.4119 - val_loss: 0.3925\n",
      "Epoch 41/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.4106 - val_loss: 0.3908\n",
      "Epoch 42/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.4085 - val_loss: 0.3906\n",
      "Epoch 43/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.4071 - val_loss: 0.3900\n",
      "Epoch 44/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.4054 - val_loss: 0.3883\n",
      "Epoch 45/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.4043 - val_loss: 0.3875\n",
      "Epoch 46/50\n",
      "242/242 [==============================] - 1s 5ms/step - loss: 0.4030 - val_loss: 0.3864\n",
      "Epoch 47/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.4013 - val_loss: 0.3860\n",
      "Epoch 48/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.3999 - val_loss: 0.3845\n",
      "Epoch 49/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.3987 - val_loss: 0.3831\n",
      "Epoch 50/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.3973 - val_loss: 0.3815\n",
      "121/121 [==============================] - 0s 2ms/step - loss: 0.4041\n",
      "[CV] END learning_rate=0.0010496013392637294, n_hidden=3, n_neurons=82; total time=  43.3s\n",
      "Epoch 1/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 1.8253 - val_loss: 0.8701\n",
      "Epoch 2/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.7395 - val_loss: 0.6638\n",
      "Epoch 3/50\n",
      "242/242 [==============================] - 1s 2ms/step - loss: 0.6634 - val_loss: 0.6160\n",
      "Epoch 4/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.6257 - val_loss: 0.5830\n",
      "Epoch 5/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5999 - val_loss: 0.5593\n",
      "Epoch 6/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5799 - val_loss: 0.5451\n",
      "Epoch 7/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5642 - val_loss: 0.5325\n",
      "Epoch 8/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5513 - val_loss: 0.5220\n",
      "Epoch 9/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.5403 - val_loss: 0.5112\n",
      "Epoch 10/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5313 - val_loss: 0.4997\n",
      "Epoch 11/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5230 - val_loss: 0.4933\n",
      "Epoch 12/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5158 - val_loss: 0.4829\n",
      "Epoch 13/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5101 - val_loss: 0.4789\n",
      "Epoch 14/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5047 - val_loss: 0.4772\n",
      "Epoch 15/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4997 - val_loss: 0.4723\n",
      "Epoch 16/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4957 - val_loss: 0.4686\n",
      "Epoch 17/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4920 - val_loss: 0.4646\n",
      "Epoch 18/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4888 - val_loss: 0.4634\n",
      "Epoch 19/50\n",
      "242/242 [==============================] - 1s 2ms/step - loss: 0.4855 - val_loss: 0.4611\n",
      "Epoch 20/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4830 - val_loss: 0.4552\n",
      "Epoch 21/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4805 - val_loss: 0.4554\n",
      "Epoch 22/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4785 - val_loss: 0.4541\n",
      "Epoch 23/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4766 - val_loss: 0.4475\n",
      "Epoch 24/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4743 - val_loss: 0.4490\n",
      "Epoch 25/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4721 - val_loss: 0.4443\n",
      "Epoch 26/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4707 - val_loss: 0.4446\n",
      "Epoch 27/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.4692 - val_loss: 0.4418\n",
      "Epoch 28/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4673 - val_loss: 0.4439\n",
      "Epoch 29/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4660 - val_loss: 0.4401\n",
      "Epoch 30/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4650 - val_loss: 0.4400\n",
      "Epoch 31/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.4632 - val_loss: 0.4374\n",
      "Epoch 32/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4621 - val_loss: 0.4355\n",
      "Epoch 33/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4607 - val_loss: 0.4368\n",
      "Epoch 34/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4596 - val_loss: 0.4344\n",
      "Epoch 35/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4586 - val_loss: 0.4344\n",
      "Epoch 36/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4574 - val_loss: 0.4314\n",
      "Epoch 37/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4564 - val_loss: 0.4310\n",
      "Epoch 38/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4553 - val_loss: 0.4290\n",
      "Epoch 39/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4541 - val_loss: 0.4286\n",
      "Epoch 40/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4534 - val_loss: 0.4282\n",
      "Epoch 41/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4519 - val_loss: 0.4323\n",
      "Epoch 42/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4515 - val_loss: 0.4262\n",
      "Epoch 43/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4500 - val_loss: 0.4271\n",
      "Epoch 44/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4495 - val_loss: 0.4265\n",
      "Epoch 45/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4486 - val_loss: 0.4261\n",
      "Epoch 46/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4474 - val_loss: 0.4219\n",
      "Epoch 47/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4466 - val_loss: 0.4236\n",
      "Epoch 48/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4459 - val_loss: 0.4223\n",
      "Epoch 49/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4445 - val_loss: 0.4227\n",
      "Epoch 50/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4438 - val_loss: 0.4190\n",
      "121/121 [==============================] - 0s 2ms/step - loss: 0.4530\n",
      "[CV] END learning_rate=0.0018104244462091872, n_hidden=1, n_neurons=21; total time=  36.9s\n",
      "Epoch 1/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 2.5345 - val_loss: 1.0875\n",
      "Epoch 2/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.8845 - val_loss: 0.7422\n",
      "Epoch 3/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.7356 - val_loss: 0.6728\n",
      "Epoch 4/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.6782 - val_loss: 0.6337\n",
      "Epoch 5/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.6424 - val_loss: 0.6058\n",
      "Epoch 6/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.6151 - val_loss: 0.5828\n",
      "Epoch 7/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5934 - val_loss: 0.5638\n",
      "Epoch 8/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.5757 - val_loss: 0.5498\n",
      "Epoch 9/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5608 - val_loss: 0.5389\n",
      "Epoch 10/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5488 - val_loss: 0.5315\n",
      "Epoch 11/50\n",
      "242/242 [==============================] - 1s 2ms/step - loss: 0.5390 - val_loss: 0.5219\n",
      "Epoch 12/50\n",
      "242/242 [==============================] - 1s 2ms/step - loss: 0.5305 - val_loss: 0.5142\n",
      "Epoch 13/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.5238 - val_loss: 0.5105\n",
      "Epoch 14/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5183 - val_loss: 0.5096\n",
      "Epoch 15/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5133 - val_loss: 0.5088\n",
      "Epoch 16/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5093 - val_loss: 0.5103\n",
      "Epoch 17/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.5058 - val_loss: 0.5008\n",
      "Epoch 18/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5027 - val_loss: 0.5011\n",
      "Epoch 19/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4997 - val_loss: 0.5023\n",
      "Epoch 20/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4973 - val_loss: 0.5042\n",
      "Epoch 21/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4948 - val_loss: 0.5057\n",
      "Epoch 22/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4928 - val_loss: 0.5012\n",
      "Epoch 23/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4907 - val_loss: 0.4931\n",
      "Epoch 24/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4886 - val_loss: 0.4955\n",
      "Epoch 25/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4869 - val_loss: 0.4856\n",
      "Epoch 26/50\n",
      "242/242 [==============================] - 1s 2ms/step - loss: 0.4845 - val_loss: 0.4919\n",
      "Epoch 27/50\n",
      "242/242 [==============================] - 1s 2ms/step - loss: 0.4829 - val_loss: 0.4813\n",
      "Epoch 28/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4808 - val_loss: 0.4818\n",
      "Epoch 29/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4785 - val_loss: 0.4742\n",
      "Epoch 30/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4766 - val_loss: 0.4735\n",
      "Epoch 31/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4745 - val_loss: 0.4755\n",
      "Epoch 32/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4728 - val_loss: 0.4671\n",
      "Epoch 33/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4708 - val_loss: 0.4677\n",
      "Epoch 34/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4692 - val_loss: 0.4591\n",
      "Epoch 35/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4677 - val_loss: 0.4615\n",
      "Epoch 36/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4663 - val_loss: 0.4576\n",
      "Epoch 37/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4649 - val_loss: 0.4553\n",
      "Epoch 38/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4636 - val_loss: 0.4536\n",
      "Epoch 39/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4622 - val_loss: 0.4510\n",
      "Epoch 40/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4608 - val_loss: 0.4537\n",
      "Epoch 41/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4598 - val_loss: 0.4555\n",
      "Epoch 42/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4582 - val_loss: 0.4522\n",
      "Epoch 43/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4571 - val_loss: 0.4459\n",
      "Epoch 44/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4561 - val_loss: 0.4458\n",
      "Epoch 45/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4550 - val_loss: 0.4500\n",
      "Epoch 46/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4538 - val_loss: 0.4439\n",
      "Epoch 47/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.4527 - val_loss: 0.4452\n",
      "Epoch 48/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4519 - val_loss: 0.4424\n",
      "Epoch 49/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4509 - val_loss: 0.4422\n",
      "Epoch 50/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4495 - val_loss: 0.4360\n",
      "121/121 [==============================] - 0s 2ms/step - loss: 0.4591\n",
      "[CV] END learning_rate=0.0018104244462091872, n_hidden=1, n_neurons=21; total time=  36.8s\n",
      "Epoch 1/50\n",
      "242/242 [==============================] - 2s 4ms/step - loss: 2.3755 - val_loss: 0.9827\n",
      "Epoch 2/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.8721 - val_loss: 0.6846\n",
      "Epoch 3/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.7163 - val_loss: 0.6073\n",
      "Epoch 4/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.6416 - val_loss: 0.5952\n",
      "Epoch 5/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5984 - val_loss: 0.5442\n",
      "Epoch 6/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5700 - val_loss: 0.5279\n",
      "Epoch 7/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5493 - val_loss: 0.5075\n",
      "Epoch 8/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5340 - val_loss: 0.4945\n",
      "Epoch 9/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5219 - val_loss: 0.4857\n",
      "Epoch 10/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5127 - val_loss: 0.4797\n",
      "Epoch 11/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5048 - val_loss: 0.4755\n",
      "Epoch 12/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4984 - val_loss: 0.4728\n",
      "Epoch 13/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4928 - val_loss: 0.4608\n",
      "Epoch 14/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4885 - val_loss: 0.4615\n",
      "Epoch 15/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4840 - val_loss: 0.4558\n",
      "Epoch 16/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4800 - val_loss: 0.4599\n",
      "Epoch 17/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4772 - val_loss: 0.4509\n",
      "Epoch 18/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4739 - val_loss: 0.4480\n",
      "Epoch 19/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4713 - val_loss: 0.4433\n",
      "Epoch 20/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4685 - val_loss: 0.4404\n",
      "Epoch 21/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4667 - val_loss: 0.4411\n",
      "Epoch 22/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4645 - val_loss: 0.4341\n",
      "Epoch 23/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4622 - val_loss: 0.4308\n",
      "Epoch 24/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4603 - val_loss: 0.4317\n",
      "Epoch 25/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4586 - val_loss: 0.4285\n",
      "Epoch 26/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.4566 - val_loss: 0.4263\n",
      "Epoch 27/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.4550 - val_loss: 0.4253\n",
      "Epoch 28/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4528 - val_loss: 0.4232\n",
      "Epoch 29/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4517 - val_loss: 0.4208\n",
      "Epoch 30/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4500 - val_loss: 0.4196\n",
      "Epoch 31/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4485 - val_loss: 0.4214\n",
      "Epoch 32/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4471 - val_loss: 0.4166\n",
      "Epoch 33/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4460 - val_loss: 0.4161\n",
      "Epoch 34/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4445 - val_loss: 0.4145\n",
      "Epoch 35/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.4435 - val_loss: 0.4139\n",
      "Epoch 36/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4420 - val_loss: 0.4127\n",
      "Epoch 37/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4407 - val_loss: 0.4122\n",
      "Epoch 38/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4398 - val_loss: 0.4112\n",
      "Epoch 39/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4387 - val_loss: 0.4095\n",
      "Epoch 40/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4377 - val_loss: 0.4092\n",
      "Epoch 41/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4368 - val_loss: 0.4080\n",
      "Epoch 42/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4354 - val_loss: 0.4076\n",
      "Epoch 43/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4346 - val_loss: 0.4065\n",
      "Epoch 44/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4332 - val_loss: 0.4070\n",
      "Epoch 45/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4327 - val_loss: 0.4044\n",
      "Epoch 46/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.4320 - val_loss: 0.4036\n",
      "Epoch 47/50\n",
      "242/242 [==============================] - 1s 5ms/step - loss: 0.4309 - val_loss: 0.4028\n",
      "Epoch 48/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.4300 - val_loss: 0.4017\n",
      "Epoch 49/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4292 - val_loss: 0.4020\n",
      "Epoch 50/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.4285 - val_loss: 0.4006\n",
      "121/121 [==============================] - 0s 2ms/step - loss: 0.4294\n",
      "[CV] END learning_rate=0.0018104244462091872, n_hidden=1, n_neurons=21; total time=  40.9s\n",
      "Epoch 1/50\n",
      "242/242 [==============================] - 2s 4ms/step - loss: 2.5160 - val_loss: 1.0079\n",
      "Epoch 2/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.8578 - val_loss: 0.7584\n",
      "Epoch 3/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.7463 - val_loss: 0.6997\n",
      "Epoch 4/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.7027 - val_loss: 0.6640\n",
      "Epoch 5/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.6738 - val_loss: 0.6379\n",
      "Epoch 6/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.6477 - val_loss: 0.6151\n",
      "Epoch 7/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.6274 - val_loss: 0.5977\n",
      "Epoch 8/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.6083 - val_loss: 0.5798\n",
      "Epoch 9/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5925 - val_loss: 0.5664\n",
      "Epoch 10/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5779 - val_loss: 0.5537\n",
      "Epoch 11/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5647 - val_loss: 0.5409\n",
      "Epoch 12/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5530 - val_loss: 0.5297\n",
      "Epoch 13/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5424 - val_loss: 0.5200\n",
      "Epoch 14/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5336 - val_loss: 0.5122\n",
      "Epoch 15/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5239 - val_loss: 0.5041\n",
      "Epoch 16/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5157 - val_loss: 0.4971\n",
      "Epoch 17/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5083 - val_loss: 0.4897\n",
      "Epoch 18/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5015 - val_loss: 0.4842\n",
      "Epoch 19/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4945 - val_loss: 0.4773\n",
      "Epoch 20/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4891 - val_loss: 0.4720\n",
      "Epoch 21/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4837 - val_loss: 0.4665\n",
      "Epoch 22/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4783 - val_loss: 0.4627\n",
      "Epoch 23/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4743 - val_loss: 0.4571\n",
      "Epoch 24/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4694 - val_loss: 0.4520\n",
      "Epoch 25/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4656 - val_loss: 0.4476\n",
      "Epoch 26/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4618 - val_loss: 0.4444\n",
      "Epoch 27/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4584 - val_loss: 0.4414\n",
      "Epoch 28/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4549 - val_loss: 0.4376\n",
      "Epoch 29/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4519 - val_loss: 0.4341\n",
      "Epoch 30/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4493 - val_loss: 0.4325\n",
      "Epoch 31/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4464 - val_loss: 0.4282\n",
      "Epoch 32/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4445 - val_loss: 0.4258\n",
      "Epoch 33/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4418 - val_loss: 0.4241\n",
      "Epoch 34/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4398 - val_loss: 0.4222\n",
      "Epoch 35/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.4374 - val_loss: 0.4201\n",
      "Epoch 36/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.4363 - val_loss: 0.4182\n",
      "Epoch 37/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4338 - val_loss: 0.4175\n",
      "Epoch 38/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4321 - val_loss: 0.4154\n",
      "Epoch 39/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4303 - val_loss: 0.4153\n",
      "Epoch 40/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4290 - val_loss: 0.4147\n",
      "Epoch 41/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4272 - val_loss: 0.4153\n",
      "Epoch 42/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4260 - val_loss: 0.4126\n",
      "Epoch 43/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4241 - val_loss: 0.4125\n",
      "Epoch 44/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4232 - val_loss: 0.4109\n",
      "Epoch 45/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4214 - val_loss: 0.4107\n",
      "Epoch 46/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4204 - val_loss: 0.4071\n",
      "Epoch 47/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4189 - val_loss: 0.4072\n",
      "Epoch 48/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.4181 - val_loss: 0.4055\n",
      "Epoch 49/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4163 - val_loss: 0.4058\n",
      "Epoch 50/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4153 - val_loss: 0.4027\n",
      "121/121 [==============================] - 0s 2ms/step - loss: 0.4284\n",
      "[CV] END learning_rate=0.00118379502921968, n_hidden=2, n_neurons=37; total time=  42.0s\n",
      "Epoch 1/50\n",
      "242/242 [==============================] - 2s 5ms/step - loss: 1.8850 - val_loss: 0.8844\n",
      "Epoch 2/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.8724 - val_loss: 0.7413\n",
      "Epoch 3/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.7604 - val_loss: 0.6864\n",
      "Epoch 4/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.7006 - val_loss: 0.6482\n",
      "Epoch 5/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.6587 - val_loss: 0.6181\n",
      "Epoch 6/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.6260 - val_loss: 0.5962\n",
      "Epoch 7/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.6008 - val_loss: 0.5752\n",
      "Epoch 8/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5797 - val_loss: 0.5567\n",
      "Epoch 9/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5621 - val_loss: 0.5442\n",
      "Epoch 10/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.5474 - val_loss: 0.5342\n",
      "Epoch 11/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5351 - val_loss: 0.5202\n",
      "Epoch 12/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5242 - val_loss: 0.5082\n",
      "Epoch 13/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5151 - val_loss: 0.5015\n",
      "Epoch 14/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.5072 - val_loss: 0.4984\n",
      "Epoch 15/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.5002 - val_loss: 0.4953\n",
      "Epoch 16/50\n",
      "242/242 [==============================] - 1s 6ms/step - loss: 0.4942 - val_loss: 0.4917\n",
      "Epoch 17/50\n",
      "242/242 [==============================] - 2s 7ms/step - loss: 0.4890 - val_loss: 0.4792\n",
      "Epoch 18/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.4841 - val_loss: 0.4778\n",
      "Epoch 19/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.4800 - val_loss: 0.4760\n",
      "Epoch 20/50\n",
      "242/242 [==============================] - 1s 5ms/step - loss: 0.4763 - val_loss: 0.4759\n",
      "Epoch 21/50\n",
      "242/242 [==============================] - 1s 5ms/step - loss: 0.4728 - val_loss: 0.4773\n",
      "Epoch 22/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.4701 - val_loss: 0.4699\n",
      "Epoch 23/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.4673 - val_loss: 0.4581\n",
      "Epoch 24/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.4644 - val_loss: 0.4618\n",
      "Epoch 25/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.4620 - val_loss: 0.4531\n",
      "Epoch 26/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.4593 - val_loss: 0.4556\n",
      "Epoch 27/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.4572 - val_loss: 0.4493\n",
      "Epoch 28/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.4552 - val_loss: 0.4503\n",
      "Epoch 29/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.4528 - val_loss: 0.4417\n",
      "Epoch 30/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4511 - val_loss: 0.4441\n",
      "Epoch 31/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4491 - val_loss: 0.4455\n",
      "Epoch 32/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4476 - val_loss: 0.4397\n",
      "Epoch 33/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4457 - val_loss: 0.4417\n",
      "Epoch 34/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4440 - val_loss: 0.4342\n",
      "Epoch 35/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4424 - val_loss: 0.4341\n",
      "Epoch 36/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4410 - val_loss: 0.4316\n",
      "Epoch 37/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4395 - val_loss: 0.4286\n",
      "Epoch 38/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4381 - val_loss: 0.4265\n",
      "Epoch 39/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4365 - val_loss: 0.4250\n",
      "Epoch 40/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4352 - val_loss: 0.4291\n",
      "Epoch 41/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4340 - val_loss: 0.4297\n",
      "Epoch 42/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4324 - val_loss: 0.4259\n",
      "Epoch 43/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4312 - val_loss: 0.4200\n",
      "Epoch 44/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4302 - val_loss: 0.4201\n",
      "Epoch 45/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4289 - val_loss: 0.4211\n",
      "Epoch 46/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4277 - val_loss: 0.4155\n",
      "Epoch 47/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.4263 - val_loss: 0.4184\n",
      "Epoch 48/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.4253 - val_loss: 0.4166\n",
      "Epoch 49/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4242 - val_loss: 0.4152\n",
      "Epoch 50/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4226 - val_loss: 0.4104\n",
      "121/121 [==============================] - 0s 2ms/step - loss: 0.4350\n",
      "[CV] END learning_rate=0.00118379502921968, n_hidden=2, n_neurons=37; total time=  45.3s\n",
      "Epoch 1/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 2.1677 - val_loss: 1.0532\n",
      "Epoch 2/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.9450 - val_loss: 0.7850\n",
      "Epoch 3/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.7786 - val_loss: 0.7058\n",
      "Epoch 4/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.7255 - val_loss: 0.6630\n",
      "Epoch 5/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.6895 - val_loss: 0.6311\n",
      "Epoch 6/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.6607 - val_loss: 0.6071\n",
      "Epoch 7/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.6369 - val_loss: 0.5877\n",
      "Epoch 8/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.6167 - val_loss: 0.5705\n",
      "Epoch 9/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5993 - val_loss: 0.5581\n",
      "Epoch 10/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5845 - val_loss: 0.5429\n",
      "Epoch 11/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.5712 - val_loss: 0.5315\n",
      "Epoch 12/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5592 - val_loss: 0.5211\n",
      "Epoch 13/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5486 - val_loss: 0.5123\n",
      "Epoch 14/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.5398 - val_loss: 0.5039\n",
      "Epoch 15/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.5314 - val_loss: 0.4963\n",
      "Epoch 16/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.5243 - val_loss: 0.4905\n",
      "Epoch 17/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5182 - val_loss: 0.4845\n",
      "Epoch 18/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5127 - val_loss: 0.4790\n",
      "Epoch 19/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5080 - val_loss: 0.4745\n",
      "Epoch 20/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.5031 - val_loss: 0.4704\n",
      "Epoch 21/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4995 - val_loss: 0.4668\n",
      "Epoch 22/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4955 - val_loss: 0.4632\n",
      "Epoch 23/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.4920 - val_loss: 0.4599\n",
      "Epoch 24/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.4886 - val_loss: 0.4570\n",
      "Epoch 25/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4857 - val_loss: 0.4533\n",
      "Epoch 26/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4826 - val_loss: 0.4507\n",
      "Epoch 27/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4798 - val_loss: 0.4484\n",
      "Epoch 28/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4768 - val_loss: 0.4452\n",
      "Epoch 29/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4748 - val_loss: 0.4435\n",
      "Epoch 30/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.4719 - val_loss: 0.4406\n",
      "Epoch 31/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.4697 - val_loss: 0.4377\n",
      "Epoch 32/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.4675 - val_loss: 0.4359\n",
      "Epoch 33/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.4654 - val_loss: 0.4342\n",
      "Epoch 34/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.4633 - val_loss: 0.4324\n",
      "Epoch 35/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.4614 - val_loss: 0.4307\n",
      "Epoch 36/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.4595 - val_loss: 0.4291\n",
      "Epoch 37/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4575 - val_loss: 0.4276\n",
      "Epoch 38/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4557 - val_loss: 0.4271\n",
      "Epoch 39/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4543 - val_loss: 0.4242\n",
      "Epoch 40/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4528 - val_loss: 0.4232\n",
      "Epoch 41/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4511 - val_loss: 0.4215\n",
      "Epoch 42/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4490 - val_loss: 0.4200\n",
      "Epoch 43/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4475 - val_loss: 0.4192\n",
      "Epoch 44/50\n",
      "242/242 [==============================] - 1s 4ms/step - loss: 0.4457 - val_loss: 0.4180\n",
      "Epoch 45/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4443 - val_loss: 0.4165\n",
      "Epoch 46/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4430 - val_loss: 0.4151\n",
      "Epoch 47/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4415 - val_loss: 0.4142\n",
      "Epoch 48/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4400 - val_loss: 0.4127\n",
      "Epoch 49/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4388 - val_loss: 0.4126\n",
      "Epoch 50/50\n",
      "242/242 [==============================] - 1s 3ms/step - loss: 0.4374 - val_loss: 0.4110\n",
      "121/121 [==============================] - 0s 2ms/step - loss: 0.4306\n",
      "[CV] END learning_rate=0.00118379502921968, n_hidden=2, n_neurons=37; total time=  41.9s\n",
      "Epoch 1/50\n",
      "363/363 [==============================] - 2s 4ms/step - loss: 0.9662 - val_loss: 0.5612\n",
      "Epoch 2/50\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.5361 - val_loss: 0.4682\n",
      "Epoch 3/50\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.4730 - val_loss: 0.4340\n",
      "Epoch 4/50\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.4459 - val_loss: 0.4183\n",
      "Epoch 5/50\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.4334 - val_loss: 0.4037\n",
      "Epoch 6/50\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.4235 - val_loss: 0.3960\n",
      "Epoch 7/50\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.4161 - val_loss: 0.4006\n",
      "Epoch 8/50\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.4109 - val_loss: 0.3971\n",
      "Epoch 9/50\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.4044 - val_loss: 0.3821\n",
      "Epoch 10/50\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.4001 - val_loss: 0.3793\n",
      "Epoch 11/50\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3946 - val_loss: 0.3753\n",
      "Epoch 12/50\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3900 - val_loss: 0.3765\n",
      "Epoch 13/50\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3859 - val_loss: 0.3775\n",
      "Epoch 14/50\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3836 - val_loss: 0.3669\n",
      "Epoch 15/50\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3793 - val_loss: 0.3669\n",
      "Epoch 16/50\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3746 - val_loss: 0.3658\n",
      "Epoch 17/50\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3727 - val_loss: 0.3552\n",
      "Epoch 18/50\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3681 - val_loss: 0.3582\n",
      "Epoch 19/50\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3655 - val_loss: 0.3537\n",
      "Epoch 20/50\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3629 - val_loss: 0.3481\n",
      "Epoch 21/50\n",
      "363/363 [==============================] - 1s 4ms/step - loss: 0.3599 - val_loss: 0.3534\n",
      "Epoch 22/50\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3701 - val_loss: 0.3501\n",
      "Epoch 23/50\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3590 - val_loss: 0.3509\n",
      "Epoch 24/50\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3527 - val_loss: 0.3423\n",
      "Epoch 25/50\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3519 - val_loss: 0.3392\n",
      "Epoch 26/50\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3486 - val_loss: 0.3449\n",
      "Epoch 27/50\n",
      "363/363 [==============================] - 1s 4ms/step - loss: 0.3543 - val_loss: 0.3504\n",
      "Epoch 28/50\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3442 - val_loss: 0.3412\n",
      "Epoch 29/50\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3423 - val_loss: 0.3369\n",
      "Epoch 30/50\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3406 - val_loss: 0.3363\n",
      "Epoch 31/50\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3377 - val_loss: 0.3402\n",
      "Epoch 32/50\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3369 - val_loss: 0.3351\n",
      "Epoch 33/50\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3343 - val_loss: 0.3418\n",
      "Epoch 34/50\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3334 - val_loss: 0.3295\n",
      "Epoch 35/50\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3323 - val_loss: 0.3310\n",
      "Epoch 36/50\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3369 - val_loss: 0.3288\n",
      "Epoch 37/50\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3349 - val_loss: 0.3277\n",
      "Epoch 38/50\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3312 - val_loss: 0.3320\n",
      "Epoch 39/50\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3266 - val_loss: 0.3223\n",
      "Epoch 40/50\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3245 - val_loss: 0.3297\n",
      "Epoch 41/50\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3234 - val_loss: 0.3188\n",
      "Epoch 42/50\n",
      "363/363 [==============================] - 2s 4ms/step - loss: 0.3203 - val_loss: 0.3168\n",
      "Epoch 43/50\n",
      "363/363 [==============================] - 1s 4ms/step - loss: 0.3210 - val_loss: 0.3182\n",
      "Epoch 44/50\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3207 - val_loss: 0.3246\n",
      "Epoch 45/50\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3218 - val_loss: 0.3198\n",
      "Epoch 46/50\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3624 - val_loss: 0.3218\n",
      "Epoch 47/50\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3173 - val_loss: 0.3215\n",
      "Epoch 48/50\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3152 - val_loss: 0.3403\n",
      "Epoch 49/50\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3158 - val_loss: 0.3246\n",
      "Epoch 50/50\n",
      "363/363 [==============================] - 1s 3ms/step - loss: 0.3121 - val_loss: 0.3277\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {\n",
       "  /* Definition of color scheme common for light and dark mode */\n",
       "  --sklearn-color-text: black;\n",
       "  --sklearn-color-line: gray;\n",
       "  /* Definition of color scheme for unfitted estimators */\n",
       "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
       "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
       "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
       "  --sklearn-color-unfitted-level-3: chocolate;\n",
       "  /* Definition of color scheme for fitted estimators */\n",
       "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
       "  --sklearn-color-fitted-level-1: #d4ebff;\n",
       "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
       "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
       "\n",
       "  /* Specific color for light theme */\n",
       "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
       "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-icon: #696969;\n",
       "\n",
       "  @media (prefers-color-scheme: dark) {\n",
       "    /* Redefinition of color scheme for dark theme */\n",
       "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
       "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-icon: #878787;\n",
       "  }\n",
       "}\n",
       "\n",
       "#sk-container-id-1 {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 pre {\n",
       "  padding: 0;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-hidden--visually {\n",
       "  border: 0;\n",
       "  clip: rect(1px 1px 1px 1px);\n",
       "  clip: rect(1px, 1px, 1px, 1px);\n",
       "  height: 1px;\n",
       "  margin: -1px;\n",
       "  overflow: hidden;\n",
       "  padding: 0;\n",
       "  position: absolute;\n",
       "  width: 1px;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-dashed-wrapped {\n",
       "  border: 1px dashed var(--sklearn-color-line);\n",
       "  margin: 0 0.4em 0.5em 0.4em;\n",
       "  box-sizing: border-box;\n",
       "  padding-bottom: 0.4em;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-container {\n",
       "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
       "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
       "     so we also need the `!important` here to be able to override the\n",
       "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
       "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
       "  display: inline-block !important;\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-text-repr-fallback {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       "div.sk-parallel-item,\n",
       "div.sk-serial,\n",
       "div.sk-item {\n",
       "  /* draw centered vertical line to link estimators */\n",
       "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
       "  background-size: 2px 100%;\n",
       "  background-repeat: no-repeat;\n",
       "  background-position: center center;\n",
       "}\n",
       "\n",
       "/* Parallel-specific style estimator block */\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item::after {\n",
       "  content: \"\";\n",
       "  width: 100%;\n",
       "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
       "  flex-grow: 1;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel {\n",
       "  display: flex;\n",
       "  align-items: stretch;\n",
       "  justify-content: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:first-child::after {\n",
       "  align-self: flex-end;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:last-child::after {\n",
       "  align-self: flex-start;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:only-child::after {\n",
       "  width: 0;\n",
       "}\n",
       "\n",
       "/* Serial-specific style estimator block */\n",
       "\n",
       "#sk-container-id-1 div.sk-serial {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "  align-items: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  padding-right: 1em;\n",
       "  padding-left: 1em;\n",
       "}\n",
       "\n",
       "\n",
       "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
       "clickable and can be expanded/collapsed.\n",
       "- Pipeline and ColumnTransformer use this feature and define the default style\n",
       "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
       "*/\n",
       "\n",
       "/* Pipeline and ColumnTransformer style (default) */\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable {\n",
       "  /* Default theme specific background. It is overwritten whether we have a\n",
       "  specific estimator or a Pipeline/ColumnTransformer */\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "/* Toggleable label */\n",
       "#sk-container-id-1 label.sk-toggleable__label {\n",
       "  cursor: pointer;\n",
       "  display: block;\n",
       "  width: 100%;\n",
       "  margin-bottom: 0;\n",
       "  padding: 0.5em;\n",
       "  box-sizing: border-box;\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n",
       "  /* Arrow on the left of the label */\n",
       "  content: \"▸\";\n",
       "  float: left;\n",
       "  margin-right: 0.25em;\n",
       "  color: var(--sklearn-color-icon);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "/* Toggleable content - dropdown */\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content {\n",
       "  max-height: 0;\n",
       "  max-width: 0;\n",
       "  overflow: hidden;\n",
       "  text-align: left;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content pre {\n",
       "  margin: 0.2em;\n",
       "  border-radius: 0.25em;\n",
       "  color: var(--sklearn-color-text);\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
       "  /* Expand drop-down */\n",
       "  max-height: 200px;\n",
       "  max-width: 100%;\n",
       "  overflow: auto;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
       "  content: \"▾\";\n",
       "}\n",
       "\n",
       "/* Pipeline/ColumnTransformer-specific style */\n",
       "\n",
       "#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator-specific style */\n",
       "\n",
       "/* Colorize estimator box */\n",
       "#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n",
       "#sk-container-id-1 div.sk-label label {\n",
       "  /* The background is the default theme color */\n",
       "  color: var(--sklearn-color-text-on-default-background);\n",
       "}\n",
       "\n",
       "/* On hover, darken the color of the background */\n",
       "#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "/* Label box, darken color on hover, fitted */\n",
       "#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator label */\n",
       "\n",
       "#sk-container-id-1 div.sk-label label {\n",
       "  font-family: monospace;\n",
       "  font-weight: bold;\n",
       "  display: inline-block;\n",
       "  line-height: 1.2em;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label-container {\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "/* Estimator-specific */\n",
       "#sk-container-id-1 div.sk-estimator {\n",
       "  font-family: monospace;\n",
       "  border: 1px dotted var(--sklearn-color-border-box);\n",
       "  border-radius: 0.25em;\n",
       "  box-sizing: border-box;\n",
       "  margin-bottom: 0.5em;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "/* on hover */\n",
       "#sk-container-id-1 div.sk-estimator:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
       "\n",
       "/* Common style for \"i\" and \"?\" */\n",
       "\n",
       ".sk-estimator-doc-link,\n",
       "a:link.sk-estimator-doc-link,\n",
       "a:visited.sk-estimator-doc-link {\n",
       "  float: right;\n",
       "  font-size: smaller;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1em;\n",
       "  height: 1em;\n",
       "  width: 1em;\n",
       "  text-decoration: none !important;\n",
       "  margin-left: 1ex;\n",
       "  /* unfitted */\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted,\n",
       "a:link.sk-estimator-doc-link.fitted,\n",
       "a:visited.sk-estimator-doc-link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "/* Span, style for the box shown on hovering the info icon */\n",
       ".sk-estimator-doc-link span {\n",
       "  display: none;\n",
       "  z-index: 9999;\n",
       "  position: relative;\n",
       "  font-weight: normal;\n",
       "  right: .2ex;\n",
       "  padding: .5ex;\n",
       "  margin: .5ex;\n",
       "  width: min-content;\n",
       "  min-width: 20ex;\n",
       "  max-width: 50ex;\n",
       "  color: var(--sklearn-color-text);\n",
       "  box-shadow: 2pt 2pt 4pt #999;\n",
       "  /* unfitted */\n",
       "  background: var(--sklearn-color-unfitted-level-0);\n",
       "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted span {\n",
       "  /* fitted */\n",
       "  background: var(--sklearn-color-fitted-level-0);\n",
       "  border: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link:hover span {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link {\n",
       "  float: right;\n",
       "  font-size: 1rem;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1rem;\n",
       "  height: 1rem;\n",
       "  width: 1rem;\n",
       "  text-decoration: none;\n",
       "  /* unfitted */\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "#sk-container-id-1 a.estimator_doc_link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomizedSearchCV(cv=3,\n",
       "                   estimator=&lt;keras.wrappers.scikit_learn.KerasRegressor object at 0x7fc5183a9ed0&gt;,\n",
       "                   param_distributions={&#x27;learning_rate&#x27;: [0.0036637947694133383,\n",
       "                                                          0.0010810854563657625,\n",
       "                                                          0.002119124322692762,\n",
       "                                                          0.014678224280748312,\n",
       "                                                          0.00030659069301040127,\n",
       "                                                          0.000525121132853971,\n",
       "                                                          0.006585965087590972,\n",
       "                                                          0.013453236129081815,\n",
       "                                                          0.0005630337571192599,\n",
       "                                                          0.004239434342316...\n",
       "                                                          0.0021904312263322538,\n",
       "                                                          0.022760452602591887,\n",
       "                                                          0.012954480817976233,\n",
       "                                                          0.001410409274007964,\n",
       "                                                          0.0006728870376126008,\n",
       "                                                          0.001670264871648013,\n",
       "                                                          0.0003079628069786369,\n",
       "                                                          0.0009593431117900039,\n",
       "                                                          0.011707017610926032,\n",
       "                                                          0.00032183346213990587, ...],\n",
       "                                        &#x27;n_hidden&#x27;: [0, 1, 2, 3],\n",
       "                                        &#x27;n_neurons&#x27;: [1, 2, 3, 4, 5, 6, 7, 8, 9,\n",
       "                                                      10, 11, 12, 13, 14, 15,\n",
       "                                                      16, 17, 18, 19, 20, 21,\n",
       "                                                      22, 23, 24, 25, 26, 27,\n",
       "                                                      28, 29, 30, ...]},\n",
       "                   verbose=2)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" ><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;RandomizedSearchCV<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.4/modules/generated/sklearn.model_selection.RandomizedSearchCV.html\">?<span>Documentation for RandomizedSearchCV</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>RandomizedSearchCV(cv=3,\n",
       "                   estimator=&lt;keras.wrappers.scikit_learn.KerasRegressor object at 0x7fc5183a9ed0&gt;,\n",
       "                   param_distributions={&#x27;learning_rate&#x27;: [0.0036637947694133383,\n",
       "                                                          0.0010810854563657625,\n",
       "                                                          0.002119124322692762,\n",
       "                                                          0.014678224280748312,\n",
       "                                                          0.00030659069301040127,\n",
       "                                                          0.000525121132853971,\n",
       "                                                          0.006585965087590972,\n",
       "                                                          0.013453236129081815,\n",
       "                                                          0.0005630337571192599,\n",
       "                                                          0.004239434342316...\n",
       "                                                          0.0021904312263322538,\n",
       "                                                          0.022760452602591887,\n",
       "                                                          0.012954480817976233,\n",
       "                                                          0.001410409274007964,\n",
       "                                                          0.0006728870376126008,\n",
       "                                                          0.001670264871648013,\n",
       "                                                          0.0003079628069786369,\n",
       "                                                          0.0009593431117900039,\n",
       "                                                          0.011707017610926032,\n",
       "                                                          0.00032183346213990587, ...],\n",
       "                                        &#x27;n_hidden&#x27;: [0, 1, 2, 3],\n",
       "                                        &#x27;n_neurons&#x27;: [1, 2, 3, 4, 5, 6, 7, 8, 9,\n",
       "                                                      10, 11, 12, 13, 14, 15,\n",
       "                                                      16, 17, 18, 19, 20, 21,\n",
       "                                                      22, 23, 24, 25, 26, 27,\n",
       "                                                      28, 29, 30, ...]},\n",
       "                   verbose=2)</pre></div> </div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" ><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">estimator: KerasRegressor</label><div class=\"sk-toggleable__content fitted\"><pre>&lt;keras.wrappers.scikit_learn.KerasRegressor object at 0x7fc5183a9ed0&gt;</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">KerasRegressor</label><div class=\"sk-toggleable__content fitted\"><pre>&lt;keras.wrappers.scikit_learn.KerasRegressor object at 0x7fc5183a9ed0&gt;</pre></div> </div></div></div></div></div></div></div></div></div>"
      ],
      "text/plain": [
       "RandomizedSearchCV(cv=3,\n",
       "                   estimator=<keras.wrappers.scikit_learn.KerasRegressor object at 0x7fc5183a9ed0>,\n",
       "                   param_distributions={'learning_rate': [0.0036637947694133383,\n",
       "                                                          0.0010810854563657625,\n",
       "                                                          0.002119124322692762,\n",
       "                                                          0.014678224280748312,\n",
       "                                                          0.00030659069301040127,\n",
       "                                                          0.000525121132853971,\n",
       "                                                          0.006585965087590972,\n",
       "                                                          0.013453236129081815,\n",
       "                                                          0.0005630337571192599,\n",
       "                                                          0.004239434342316...\n",
       "                                                          0.0021904312263322538,\n",
       "                                                          0.022760452602591887,\n",
       "                                                          0.012954480817976233,\n",
       "                                                          0.001410409274007964,\n",
       "                                                          0.0006728870376126008,\n",
       "                                                          0.001670264871648013,\n",
       "                                                          0.0003079628069786369,\n",
       "                                                          0.0009593431117900039,\n",
       "                                                          0.011707017610926032,\n",
       "                                                          0.00032183346213990587, ...],\n",
       "                                        'n_hidden': [0, 1, 2, 3],\n",
       "                                        'n_neurons': [1, 2, 3, 4, 5, 6, 7, 8, 9,\n",
       "                                                      10, 11, 12, 13, 14, 15,\n",
       "                                                      16, 17, 18, 19, 20, 21,\n",
       "                                                      22, 23, 24, 25, 26, 27,\n",
       "                                                      28, 29, 30, ...]},\n",
       "                   verbose=2)"
      ]
     },
     "execution_count": 99,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from scipy.stats import reciprocal\n",
    "from sklearn.model_selection import RandomizedSearchCV\n",
    "\n",
    "param_distribs = {\n",
    "    \"n_hidden\": [0, 1, 2, 3],\n",
    "    \"n_neurons\": np.arange(1, 100).tolist(),\n",
    "    \"learning_rate\": reciprocal(3e-4, 3e-2).rvs(1000).tolist(),\n",
    "}\n",
    "\n",
    "rnd_search_cv = RandomizedSearchCV(keras_reg, param_distribs, n_iter=10, cv=3, verbose=2)\n",
    "rnd_search_cv.fit(X_train, y_train, epochs=50,\n",
    "                  validation_data=(X_valid, y_valid),\n",
    "                  callbacks=[keras.callbacks.EarlyStopping(patience=10)])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "id": "dd123b9b-1e9b-4e9c-8c3d-28fe32d0f7d5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'n_neurons': 63, 'n_hidden': 2, 'learning_rate': 0.0054637287155864045}"
      ]
     },
     "execution_count": 100,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rnd_search_cv.best_params_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "id": "eeef670d-7f09-439c-b48c-5c4ef5fd8740",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-0.34777698914210003"
      ]
     },
     "execution_count": 101,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rnd_search_cv.best_score_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "id": "c4b2c248-b574-40f9-8de8-7b38f35199b2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<keras.wrappers.scikit_learn.KerasRegressor at 0x7fc519f5aaa0>"
      ]
     },
     "execution_count": 102,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rnd_search_cv.best_estimator_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "id": "162c1d58-fa86-4e10-8b22-07747cd3959e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "162/162 [==============================] - 0s 2ms/step - loss: 0.3125\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "-0.31247183680534363"
      ]
     },
     "execution_count": 103,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rnd_search_cv.score(X_test, y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "id": "58a554a8-7239-41e2-a1bc-e7163ed75c84",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<keras.engine.sequential.Sequential at 0x7fc513c780d0>"
      ]
     },
     "execution_count": 104,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model = rnd_search_cv.best_estimator_.model\n",
    "model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "id": "ea435798-f1c9-41ff-b48a-4462744d2aed",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "162/162 [==============================] - 0s 2ms/step - loss: 0.3125\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0.31247183680534363"
      ]
     },
     "execution_count": 105,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.evaluate(X_test, y_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8b8cc108-8e6d-4adb-902d-7e4acb98ed0d",
   "metadata": {},
   "source": [
    "# Exercise solutions"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "21e7c826-e5bc-400a-8077-56e1db542819",
   "metadata": {},
   "source": [
    "## 1. to 9."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f71f9fd9-46fa-4480-9731-c654be340ff1",
   "metadata": {},
   "source": [
    "See appendix A."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2ae275e6-fbc1-427e-abf0-0259dc8c32e4",
   "metadata": {},
   "source": [
    "## 10."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4297c82a-c4a0-45f5-b9b9-e91e7ebb7db1",
   "metadata": {},
   "source": [
    "*Exercise: Train a deep MLP on the MNIST dataset (you can load it using `keras.datasets.mnist.load_data()`. See if you can get over 98% precision. Try searching for the optimal learning rate by using the approach presented in this chapter (i.e., by growing the learning rate exponentially, plotting the loss, and finding the point where the loss shoots up). Try adding all the bells and whistles—save checkpoints, use early stopping, and plot learning curves using TensorBoard.*"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5c0f0ccb-af9c-47e8-b40a-024ecefcb0b6",
   "metadata": {},
   "source": [
    "Let's load the dataset:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "id": "a8ba5848-f995-4290-8630-9c92fd53f705",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/mnist.npz\n",
      "11490434/11490434 [==============================] - 1s 0us/step\n"
     ]
    }
   ],
   "source": [
    "(X_train_full, y_train_full), (X_test, y_test) = keras.datasets.mnist.load_data()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf00c257-dcc0-48fa-ab5d-291f20d725b8",
   "metadata": {},
   "source": [
    "Just like for the Fashion MNIST dataset, the MNIST training set contains 60,000 grayscale images, each 28x28 pixels:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "id": "a5bfd017-94a0-4de8-b3ff-b138c8ae5079",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(60000, 28, 28)"
      ]
     },
     "execution_count": 107,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train_full.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5bc24173-168c-43be-a44d-42e17b6ebc74",
   "metadata": {},
   "source": [
    "Each pixel intensity is also represented as a byte (0 to 255):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "id": "5378076e-6119-45f5-aa6e-f655c0563f6b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dtype('uint8')"
      ]
     },
     "execution_count": 108,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train_full.dtype"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a4d9c3eb-c65f-464f-82fb-8b2a3ade3eac",
   "metadata": {},
   "source": [
    "Let's split the full training set into a validation set and a (smaller) training set. We also scale the pixel intensities down to the 0-1 range and convert them to floats, by dividing by 255, just like we did for Fashion MNIST:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "id": "06da0056-4096-4986-acba-28fd328a89cc",
   "metadata": {},
   "outputs": [],
   "source": [
    "X_valid, X_train = X_train_full[:5000] / 255., X_train_full[5000:] / 255.\n",
    "y_valid, y_train = y_train_full[:5000], y_train_full[5000:]\n",
    "X_test = X_test / 255."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d37afc06-5134-4815-a7e4-6d7acc0bfea6",
   "metadata": {},
   "source": [
    "Let's plot an image using Matplotlib's `imshow()` function, with a `'binary'`\n",
    " color map:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "id": "e25a116e-6d80-4359-b849-d4dc6b4df0bc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(-0.5, 27.5, 27.5, -0.5)"
      ]
     },
     "execution_count": 110,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.imshow(X_train[0], cmap=\"binary\")\n",
    "plt.axis('off')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85bb5f27-8014-4b52-9e68-8ce5fadd95c2",
   "metadata": {},
   "source": [
    "The labels are the class IDs (represented as uint8), from 0 to 9. Conveniently, the class IDs correspond to the digits represented in the images, so we don't need a `class_names` array:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "id": "2e75d023-bd4f-475c-afcc-9b37d58daba4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([7, 3, 4, ..., 5, 6, 8], dtype=uint8)"
      ]
     },
     "execution_count": 111,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_train"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4d6d5d86-2045-4803-b158-3b686e594f4e",
   "metadata": {},
   "source": [
    "The validation set contains 5,000 images, and the test set contains 10,000 images:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "id": "081b8c2d-be7c-4af3-bf68-c5a17bf4e14e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(5000, 28, 28)"
      ]
     },
     "execution_count": 112,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_valid.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "id": "fd8e5965-01e9-4762-8645-91319e0d8a26",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(10000, 28, 28)"
      ]
     },
     "execution_count": 113,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_test.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f8ca6598-62d7-4bed-bb33-e84bb9699735",
   "metadata": {},
   "source": [
    "Let's take a look at a sample of the images in the dataset:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "id": "e218ccee-dc11-4165-9999-c9db1e17fc7f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x480 with 40 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "n_rows = 4\n",
    "n_cols = 10\n",
    "plt.figure(figsize=(n_cols * 1.2, n_rows * 1.2))\n",
    "for row in range(n_rows):\n",
    "    for col in range(n_cols):\n",
    "        index = n_cols * row + col\n",
    "        plt.subplot(n_rows, n_cols, index + 1)\n",
    "        plt.imshow(X_train[index], cmap=\"binary\", interpolation=\"nearest\")\n",
    "        plt.axis('off')\n",
    "        plt.title(y_train[index], fontsize=12)\n",
    "plt.subplots_adjust(wspace=0.2, hspace=0.5)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3f3e4cb1-9758-4f38-90a0-dc4c9030930f",
   "metadata": {},
   "source": [
    "Let's build a simple dense network and find the optimal learning rate. We will need a callback to grow the learning rate at each iteration. It will also record the learning rate and the loss at each iteration:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "id": "63c055f3-5926-45eb-8c15-19020c304043",
   "metadata": {},
   "outputs": [],
   "source": [
    "K = keras.backend\n",
    "\n",
    "class ExponentialLearningRate(keras.callbacks.Callback):\n",
    "    def __init__(self, factor):\n",
    "        self.factor = factor\n",
    "        self.rates = []\n",
    "        self.losses = []\n",
    "    def on_batch_end(self, batch, logs):\n",
    "        self.rates.append(K.get_value(self.model.optimizer.learning_rate))\n",
    "        self.losses.append(logs[\"loss\"])\n",
    "        K.set_value(self.model.optimizer.learning_rate, self.model.optimizer.learning_rate * self.factor)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "id": "1bdd3ddb-872d-46ab-950f-3e400c8a2af2",
   "metadata": {},
   "outputs": [],
   "source": [
    "keras.backend.clear_session()\n",
    "np.random.seed(100)\n",
    "tf.random.set_seed(100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "id": "206a2fcc-d8ca-49d8-b257-18d991e656b7",
   "metadata": {},
   "outputs": [],
   "source": [
    "model = keras.models.Sequential([\n",
    "    keras.layers.Flatten(input_shape=[28, 28]),\n",
    "    keras.layers.Dense(300, activation=\"relu\"),\n",
    "    keras.layers.Dense(100, activation=\"relu\"),\n",
    "    keras.layers.Dense(10, activation=\"softmax\")\n",
    "])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2cb73777-569b-4271-9872-f9f2cbf82bd9",
   "metadata": {},
   "source": [
    "We will start with a small learning rate of 1e-3, and grow it by 0.5% at each iteration:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "id": "a11b72de-5fe1-4769-befa-0227ab171f13",
   "metadata": {},
   "outputs": [],
   "source": [
    "model.compile(loss=\"sparse_categorical_crossentropy\",\n",
    "              optimizer=keras.optimizers.SGD(learning_rate=1e-3),\n",
    "              metrics=[\"accuracy\"])\n",
    "expon_lr = ExponentialLearningRate(factor=1.005)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2ee019b3-49a7-496d-a385-be3f816946b8",
   "metadata": {},
   "source": [
    "Now let's train the model for just 1 epoch:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "id": "6c621119-8ce6-4b57-87af-3829e2df5f36",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1719/1719 [==============================] - 11s 6ms/step - loss: nan - accuracy: 0.6068 - val_loss: nan - val_accuracy: 0.0958\n"
     ]
    }
   ],
   "source": [
    "history = model.fit(X_train, y_train, epochs=1,\n",
    "                    validation_data=(X_valid, y_valid),\n",
    "                    callbacks=[expon_lr])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "128e689b-cde0-41c7-8275-8ebab681b434",
   "metadata": {},
   "source": [
    "We can now plot the loss as a function of the learning rate:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "id": "57affc20-7eb7-4599-9851-bec524597653",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Loss')"
      ]
     },
     "execution_count": 120,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(expon_lr.rates, expon_lr.losses)\n",
    "plt.gca().set_xscale('log')\n",
    "plt.hlines(min(expon_lr.losses), min(expon_lr.rates), max(expon_lr.rates))\n",
    "plt.axis([min(expon_lr.rates), max(expon_lr.rates), 0, expon_lr.losses[0]])\n",
    "plt.grid()\n",
    "plt.xlabel(\"Learning rate\")\n",
    "plt.ylabel(\"Loss\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fb46758a-3ec9-40a4-8cb2-7360e2aebf06",
   "metadata": {},
   "source": [
    "The loss starts shooting back up violently when the learning rate goes over 6e-1, so let's try using half of that, at 3e-1:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "id": "a68f6bc1-cbd4-444a-a08e-4492cb7c4536",
   "metadata": {},
   "outputs": [],
   "source": [
    "keras.backend.clear_session()\n",
    "np.random.seed(100)\n",
    "tf.random.set_seed(100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "id": "1c51e295-5b96-48b8-9d27-228f21be18e0",
   "metadata": {},
   "outputs": [],
   "source": [
    "model = keras.models.Sequential([\n",
    "    keras.layers.Flatten(input_shape=[28, 28]),\n",
    "    keras.layers.Dense(300, activation=\"relu\"),\n",
    "    keras.layers.Dense(100, activation=\"relu\"),\n",
    "    keras.layers.Dense(10, activation=\"softmax\")\n",
    "])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "id": "ddf3ced3-6ef5-4f34-9bb7-00ea6df5226e",
   "metadata": {},
   "outputs": [],
   "source": [
    "model.compile(loss=\"sparse_categorical_crossentropy\",\n",
    "              optimizer=keras.optimizers.SGD(learning_rate=3e-1),\n",
    "              metrics=[\"accuracy\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "id": "c1d90e32-624a-458f-a4a2-f25422ba8bcb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'./my_mnist_logs/run_001'"
      ]
     },
     "execution_count": 124,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "run_index = 1 # increment at every run\n",
    "run_logdir = os.path.join(os.curdir, \"my_mnist_logs\", \"run_{:03d}\".format(run_index))\n",
    "run_logdir"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "id": "59001e0c-c8f7-4a5d-8e7a-54052c100e50",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/50\n",
      "1719/1719 [==============================] - 9s 5ms/step - loss: 0.2330 - accuracy: 0.9285 - val_loss: 0.1068 - val_accuracy: 0.9684\n",
      "Epoch 2/50\n",
      "1719/1719 [==============================] - 8s 4ms/step - loss: 0.0960 - accuracy: 0.9697 - val_loss: 0.0961 - val_accuracy: 0.9700\n",
      "Epoch 3/50\n",
      "1719/1719 [==============================] - 8s 5ms/step - loss: 0.0646 - accuracy: 0.9794 - val_loss: 0.0750 - val_accuracy: 0.9784\n",
      "Epoch 4/50\n",
      "1719/1719 [==============================] - 8s 5ms/step - loss: 0.0471 - accuracy: 0.9846 - val_loss: 0.0693 - val_accuracy: 0.9814\n",
      "Epoch 5/50\n",
      "1719/1719 [==============================] - 8s 4ms/step - loss: 0.0366 - accuracy: 0.9883 - val_loss: 0.0680 - val_accuracy: 0.9800\n",
      "Epoch 6/50\n",
      "1719/1719 [==============================] - 8s 4ms/step - loss: 0.0290 - accuracy: 0.9905 - val_loss: 0.0618 - val_accuracy: 0.9830\n",
      "Epoch 7/50\n",
      "1719/1719 [==============================] - 8s 4ms/step - loss: 0.0225 - accuracy: 0.9927 - val_loss: 0.0824 - val_accuracy: 0.9806\n",
      "Epoch 8/50\n",
      "1719/1719 [==============================] - 8s 5ms/step - loss: 0.0224 - accuracy: 0.9924 - val_loss: 0.0857 - val_accuracy: 0.9798\n",
      "Epoch 9/50\n",
      "1719/1719 [==============================] - 7s 4ms/step - loss: 0.0136 - accuracy: 0.9957 - val_loss: 0.0807 - val_accuracy: 0.9822\n",
      "Epoch 10/50\n",
      "1719/1719 [==============================] - 7s 4ms/step - loss: 0.0096 - accuracy: 0.9970 - val_loss: 0.0816 - val_accuracy: 0.9838\n",
      "Epoch 11/50\n",
      "1719/1719 [==============================] - 7s 4ms/step - loss: 0.0125 - accuracy: 0.9960 - val_loss: 0.0842 - val_accuracy: 0.9830\n",
      "Epoch 12/50\n",
      "1719/1719 [==============================] - 8s 4ms/step - loss: 0.0145 - accuracy: 0.9954 - val_loss: 0.0927 - val_accuracy: 0.9830\n",
      "Epoch 13/50\n",
      "1719/1719 [==============================] - 7s 4ms/step - loss: 0.0157 - accuracy: 0.9951 - val_loss: 0.0818 - val_accuracy: 0.9838\n",
      "Epoch 14/50\n",
      "1719/1719 [==============================] - 6s 4ms/step - loss: 0.0109 - accuracy: 0.9965 - val_loss: 0.0844 - val_accuracy: 0.9852\n",
      "Epoch 15/50\n",
      "1719/1719 [==============================] - 7s 4ms/step - loss: 0.0046 - accuracy: 0.9987 - val_loss: 0.0852 - val_accuracy: 0.9838\n",
      "Epoch 16/50\n",
      "1719/1719 [==============================] - 8s 4ms/step - loss: 0.0035 - accuracy: 0.9989 - val_loss: 0.0856 - val_accuracy: 0.9858\n",
      "Epoch 17/50\n",
      "1719/1719 [==============================] - 7s 4ms/step - loss: 0.0013 - accuracy: 0.9996 - val_loss: 0.0889 - val_accuracy: 0.9842\n",
      "Epoch 18/50\n",
      "1719/1719 [==============================] - 7s 4ms/step - loss: 0.0013 - accuracy: 0.9995 - val_loss: 0.0853 - val_accuracy: 0.9856\n",
      "Epoch 19/50\n",
      "1719/1719 [==============================] - 7s 4ms/step - loss: 8.6374e-04 - accuracy: 0.9999 - val_loss: 0.0799 - val_accuracy: 0.9868\n",
      "Epoch 20/50\n",
      "1719/1719 [==============================] - 7s 4ms/step - loss: 1.0835e-04 - accuracy: 1.0000 - val_loss: 0.0818 - val_accuracy: 0.9868\n",
      "Epoch 21/50\n",
      "1719/1719 [==============================] - 9s 5ms/step - loss: 7.3944e-05 - accuracy: 1.0000 - val_loss: 0.0828 - val_accuracy: 0.9870\n",
      "Epoch 22/50\n",
      "1719/1719 [==============================] - 7s 4ms/step - loss: 6.0914e-05 - accuracy: 1.0000 - val_loss: 0.0834 - val_accuracy: 0.9868\n",
      "Epoch 23/50\n",
      "1719/1719 [==============================] - 7s 4ms/step - loss: 5.2915e-05 - accuracy: 1.0000 - val_loss: 0.0841 - val_accuracy: 0.9872\n",
      "Epoch 24/50\n",
      "1719/1719 [==============================] - 7s 4ms/step - loss: 4.7167e-05 - accuracy: 1.0000 - val_loss: 0.0847 - val_accuracy: 0.9870\n",
      "Epoch 25/50\n",
      "1719/1719 [==============================] - 8s 5ms/step - loss: 4.2716e-05 - accuracy: 1.0000 - val_loss: 0.0852 - val_accuracy: 0.9868\n",
      "Epoch 26/50\n",
      "1719/1719 [==============================] - 7s 4ms/step - loss: 3.9185e-05 - accuracy: 1.0000 - val_loss: 0.0859 - val_accuracy: 0.9866\n"
     ]
    }
   ],
   "source": [
    "early_stopping_cb = keras.callbacks.EarlyStopping(patience=20)\n",
    "checkpoint_cb = keras.callbacks.ModelCheckpoint(\"my_mnist_model.h5\", save_best_only=True)\n",
    "tensorboard_cb = keras.callbacks.TensorBoard(run_logdir)\n",
    "\n",
    "history = model.fit(X_train, y_train, epochs=50,\n",
    "                    validation_data=(X_valid, y_valid),\n",
    "                    callbacks=[checkpoint_cb, early_stopping_cb, tensorboard_cb])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "id": "4894a327-f44b-45f7-ad91-72e57a771dc2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "313/313 [==============================] - 1s 3ms/step - loss: 0.0714 - accuracy: 0.9786\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[0.07142048329114914, 0.978600025177002]"
      ]
     },
     "execution_count": 126,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model = keras.models.load_model(\"my_mnist_model.h5\") # rollback to best model\n",
    "model.evaluate(X_test, y_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9719b7ea-9964-4535-a256-0e221d67d4f5",
   "metadata": {},
   "source": [
    "We got over 98% accuracy. Finally, let's look at the learning curves using TensorBoard:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "id": "e291beff-50f8-4037-8c40-e20b6a8ec71d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "ERROR: Failed to launch TensorBoard (exited with 255).\n",
       "Contents of stderr:\n",
       "2024-09-16 05:35:46.592476: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 FMA\n",
       "To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.\n",
       "2024-09-16 05:35:46.793596: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libcudart.so.11.0'; dlerror: libcudart.so.11.0: cannot open shared object file: No such file or directory\n",
       "2024-09-16 05:35:46.793662: I tensorflow/stream_executor/cuda/cudart_stub.cc:29] Ignore above cudart dlerror if you do not have a GPU set up on your machine.\n",
       "2024-09-16 05:35:46.847063: E tensorflow/stream_executor/cuda/cuda_blas.cc:2981] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n",
       "2024-09-16 05:35:47.835669: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libnvinfer.so.7'; dlerror: libnvinfer.so.7: cannot open shared object file: No such file or directory\n",
       "2024-09-16 05:35:47.835805: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libnvinfer_plugin.so.7'; dlerror: libnvinfer_plugin.so.7: cannot open shared object file: No such file or directory\n",
       "2024-09-16 05:35:47.835824: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:38] TF-TRT Warning: Cannot dlopen some TensorRT libraries. If you would like to use Nvidia GPU with TensorRT, please make sure the missing libraries mentioned above are installed properly.\n",
       "2024-09-16 05:35:49.711938: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libcuda.so.1'; dlerror: libcuda.so.1: cannot open shared object file: No such file or directory\n",
       "2024-09-16 05:35:49.711993: W tensorflow/stream_executor/cuda/cuda_driver.cc:263] failed call to cuInit: UNKNOWN ERROR (303)\n",
       "2024-09-16 05:35:49.712026: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:156] kernel driver does not appear to be running on this host (jupyter_machrafal): /proc/driver/nvidia/version does not exist\n",
       "\n",
       "NOTE: Using experimental fast data loading logic. To disable, pass\n",
       "    \"--load_fast=false\" and report issues on GitHub. More details:\n",
       "    https://github.com/tensorflow/tensorboard/issues/4784\n",
       "\n",
       "E0916 05:35:50.220252 140321269785664 program.py:298] TensorBoard could not bind to port 6006, it was already in use\n",
       "ERROR: TensorBoard could not bind to port 6006, it was already in use"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "%tensorboard --logdir=./my_mnist_logs --port=6006"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
